{"version":3,"sources":["assets/Scripts/game3/Back.js","assets/Scripts/Game1/BoxCollision.js","assets/Scripts/Game2/BoxState.js","assets/Scripts/game3/Common.js","assets/Scripts/FightGame3/FightGame3.js","assets/Scripts/game4/Figure.js","assets/Scripts/Game1/Game1Main.js","assets/Scripts/Game2/Game2Main.js","assets/Scripts/FightGame4/Game4Fight.js","assets/Scripts/GetServer.js","assets/Scripts/Game2/GroundChildState.js","assets/Scripts/ImageLoader.js","assets/Scripts/game4/Image.js","assets/Scripts/Game2/InitPrefabState.js","assets/Scripts/JumpLogin.js","assets/Scripts/Loading.js","assets/Scripts/ChooseGame/MatchState.js","assets/Scripts/ChooseGame/MatchUser.js","assets/Scripts/game3/Menu.js","assets/Scripts/Game1/MoveBackGroud.js","assets/Scripts/Game1/OperateBlock.js","assets/Scripts/game4/Over.js","assets/Scripts/Game1/PersonsGame1Main.js","assets/Scripts/Game1/PrefabState.js","assets/Scripts/Match/PressButton1.js","assets/Scripts/Game1/PressButton.js","assets/Scripts/PublicClass.js","assets/Scripts/Game2/PuyoDown.js","assets/Scripts/FightGame4/RivalGame.js","assets/Scripts/game3/Shape.js","assets/Scripts/Main1/ShowUser.js","assets/Scripts/ShowWorldRank.js","assets/Scripts/game4/StatuMachine.js","assets/Scripts/game3/Stone.js","assets/Scripts/Game2/SyowPositiin.js","assets/Scripts/Game1/SyowPosition.js","assets/Scripts/Main1/TurnScene.js","assets/Scripts/UserInfo.js","assets/Scripts/WechatLogin.js","assets/Scripts/ChooseGame/chooseModel.js","assets/Scripts/game4/game4.js","assets/Scripts/game3/game.js","assets/Scripts/md5.js","assets/Scripts/wechatForJava.js","assets/Scripts/Main1/wxRankList.ts"],"names":["cc","Class","extends","Component","properties","isFilled","type","innerNode","onLoad","start","this","isStationary","fCollisionTime","isCollision","update","dt","node","getPositionY","parent","getComponent","isJoin","isBox","stringColor","module","exports","STATE_COVER","STATE_MENU","STATE_PLAY","STATE_REMOVE","STATE_OVER","MAP_ROW","MAP_COL","MOVEMODEL","Game3","require","prefabArr","default","Prefab","girdSize","backPrefab","scoreLabel","Node","nextShape","rivalInfoNode","downButton","slideButton","rotateButton","mask","pauseMenu","overMenu","overAnimation","gameSlide","nickName","rivalName","normalSpeed","quickSpeed","up","lr","log","director","isPaused","resume","active","jsonMsgToServer","tag1","score","state1","changeMapList1","removeMapList1","nMapRow","nMapCol","loading1","nodeWidth","width","nodeHeight","height","eliminateCount","backGroundArr","time","initMap","nodeArr","createShape","createNext","gameOver","canChangeStatu","iState","xltime","cishu","Array","prototype","contain","shape","undefined","i","length","x","y","on","children","opacity","bind","registerKeyBoard","removeTime","overCost","index","sys","isNative","Label","string","find","nameUser","SendLongMsg","nUserScore","nCol","rightDirection","leftDirection","slideStart","rivalTouchBarry","invokeRemoveTime","sendLeft","sendRight","sendDown","sendRotate","call","onKeyDown","onKeyUp","getTouchLine","buttonNode","worldPosition","getNodeArrMaxCol","getNodeArrMinCol","row","col","nextBlock","showNextShape","nextNode","generateNext","parentNode","setPrefabPosition","prefab","trimSizeJson","createPrefab","instantiate","createRandom","min","max","onSlide","onGameSlide","column","slidePosition","gameSlidePosition","moveRight","moveLeft","getChildByName","loadScene","map","sendJsonData","color","toString","console","push","os","OS_ANDROID","sendJsonData1","sendJsonData0","sendJsonData2","_sendJsonData","_sendJsonData2","updatePrefatY","sendDataToServer","isNetWork","checkNodeArr","canRemove","waitQueue","addWillDeleteArr","willDeleteArr","directorFind","typeArr","isCommonType","leftRow","leftCol","remove","deleteNodeFromParent","waitDownArr","upFindNodes","addScore","waitQueueLength","CheckIsDown","down","CheckIsLeft","leftMove","CheckIsRight","rightMove","rotate","updateMap","onDestroy","pause","_defineProperty","_cc$Class","isRemove","isMove","isActive","t","angle","hasDown","quickDown","beforeRow","beforeCol","targetX","targetY","moveAction","moveTo","p","runAction","afterRemoveDown","targetRow","scanDown","hasTarget","json1","json2","checkCanDown","shine","self","a","action1","fadeTo","action2","action3","action4","sequence","aaa","centerX","centerY","scheduleOnce","destroy","delay","childrenCount","nodeCanvas","groundPrefab","boxParent","groundParent","prefabL","prefabSquare","prefabZ","prefabLong","prefabT","blockParent","nodeRotateButton","nodeDownButton","nodeMove1","next1Node","next2Node","overBackGround","nodeScore1","stopNode","clickAudio","url","AudioClip","loseAudio","removeAudio","darkNotice","handNode","slideNode","noticePrefab","usernameNode","userPictureNode","gameOverScoreNode","darkNode","SlideAcrossNode","downNode","rotateNode","ShowScore","nDissppearRow1","nodeScore","parseInt","Global","advertisement","hide","gameBye","showNoticeHelp","noticeBlock","nLine","invalidRemoveTime","isOutSlide","isShowScore","positionTouchX","Animation","play","nTime","event","startWar","EventType","TOUCH_START","TOUCH_MOVE","getLocation","TOUCH_END","TOUCH_CANCEL","isOutDown","LoadUser","pictureUser","isPressRotate","CC_WECHATGAME","playAudio","disappearAll","isFirst","game1Main","groundChild","stringShape","stringRotate","nCreat","GetGround","GetBlock","boxParent1","getChildren","systemEvent","SystemEvent","KEY_DOWN","ShowUser","keyCode","KEY","MoveLeft","d","MoveRight","s","DownQuick","l","RotateBlock","nLine1","nArrayRow","nArrayList","blockChild","nodeBlock","nX","nWidth","nY","j","k","nOldY","nOldX","stringBoloekShape","isHas","groundNode","setPosition","TarvelFalse","OnLoadBlock","nBlock","stringColor3","setBlockPosition","getPosition","nRotateAngle","nodeBlock1","setBlock1Position","nodeBlock2","CopyBlock","prefabLBlock","stringShape1","shapeBlock","nShape","rotateBlock","nRotate","randomColor","nodePosition3","v2WorldY","v1WorldX","TraverseRotate","audioSource","audioEngine","IsColor","stringShape3","nShape3","ChangeColor","OnloadColor","stringColor1","nodeBlock3","nodeBlockChild","loader","loadRes","SpriteFrame","err","txt","Sprite","spriteFrame","fDownTime","nTimeInteval","nodeBlockChild1","nodeBlockChild2","stringColor0","stringColor2","IsShape","IsRotate","ChangeRotate","nAngle","nodeBoxArray","nodeBoxArray1","nodeBoxArray2","isStartDown","isHasBox","isOutWall","isOutGround","nRowY","nLineX","arrayX","arrayY","nX1","nY1","oldX","oldY","isZero","v2RotateX","v2RotateY","nMove","nMoveX","nMoveY","arrayMoveX","arrayMoveY","v2RotateY1","positionX","positionY","v2RotateX1","stringShape2","colorBlock","nColor","Math","floor","random0To1","GetBoxNode","childBox","TraversalNodeBox","nPositionY","nLength","bCollisionOne","BoxDown","nMaxDisappea","nDisappearAll","DisappearBox","nDisappear","nTrue","nMin","GetBlockLine","localX","convertToNodeSpaceAR","v2","n1","n2","GetTouchLine","nodePosition","nWidth1","shareButton","nativeShare","directBack","isGameOver","Button","interactable","localStorage","getItem","setItem","currentBestScore","Number","tetrisTopScore","postMessage","isChangeParent","rerurn","toFixed","downBoxParent","prefabSquare1","nodeBackgroundBox","prefab1","prefab22","prefab2","prefab3","prefab4","fChangeShape","fScaleChange","fActionDown","SetBackground","nWidthPuYo","getPositionX","userGroundChild","CreatBackGround","nRotateLong","isRotate","positionRotateX","positionRotateY","nPositionX","isActionShape","isActionDown","nChangeShape","nDownSpeed","RotateLoadPosition","RotatePuYo","RotateActioin","RotateLongShape","ChangePuyoColor","isDown","LoadPosition","target","jsonMsg","OnloadRotate","ChangeNodePositionY","ChangeNodePositionX","LodaRotation","rotation","actionRotate","rotateTo","callRotate","callFunc","RotateLong","child","bezier","cos","PI","sin","bezierAction","bezierTo","loadPositionAction","actionMoveLeft","moveBy","loadPosition1","loadPosition0","actionRotate1","spawn","IsDestroy","arrayBox","arrayDestroy","arrayPositionX","arrayDestroyWait","arrayPositionY","DestroyNode","CountRow","CountLine","nRow","nSign","isFind","ActionChangeShape","arrayChangeShape","fScale","actionChangeShape","scaleTo","actionResumeShape","nDownDistance","actionMoveDown","actionMoveUp","onloadPosition","actionStartShape","StartActionShape","ChangeShape","msgJson","StartActionDown","DestroyDown","nRow1","actionDown","loadPosition","isChangeShape","changeShape","arrayChange","arrayDown","startChange","nRow2","nLine2","GetDisappearBox","nRandomNum","nColor1","stringRandom","CreatPosition","GetShapeSign","array","arrayLine","inner","includes","isTall","fPositinoY","fPositinoX","SureShape","nArratLength","line","arraySign","stringConnectDirection","nodeChild","nodePuyo","CountPosition","IsConnect","nTravel","nRow3","nLine3","arrayLength","comm","game3","statuMachine","imagePrefabArr","back","next2","gameOverAnimation","winAudio","downAudio","noticeBtn","preloadScene","giveIn","usernameString","showUsername","initImage","times","totalTime","quick","status","isContain","data","tempNodes","san","isTouch","isPunish","hasOver","isWin","KEY_UP","slidePositionX","touchNode","left","right","f","off","createRandomX","randomNumber","random","tempY","outArr","mapData","tempX","tempPrefab","arguments","addJsonData","randomCol","prefabArrTemp","isCreateOver","loopCount","generateCount","controlRandom","punishType","prefabNode","addChild","id","rnd","next2Block","getColumn","chooseColumnByLocation","getRow","chooseRawByLocation","colArr","apply","STATE_BEGIN","sendChangeDataToServer","gameOverJson","result_score","result","showAdvice","changeMap","removeJsonToServerWithPunish","removeRow","then","next","removeJsonToServer","jsonR","_next","share","splice","Promise","resolve","reject","m","cRow","cCol","activeNode","setTimeout","isP","nDisappear1","queue","tempArr","cType","nodeType","_console","activeNodeArr","checkHasSealBlock","removeJsonInfo","_toConsumableArray","directionArr","crow","ccol","anim","sendJson","playAnimAndChangeState","name","setPositionX","dynamicLoad","nodeName","callback","arr","upNode","round","checkType","waitDeleteNode","minRow","of","colNum","afterDownRow","currentJson","upZero","remainTwoNumber","x0","y0","x0Row","x0Col","rotate45X","rotate45Y","nodeAngle","canAction","changeRotateCenter","checkIsRotate","dealRotate","cb","angleCode","json3","nodeZeroType","nodeOneType","rotate90X","rotate90Y","createJsonDateForServer","jsonArr","pushChangeMapList","e","canRotate","x00","y00","x00Row","x00Col","xx","yy","rotate45Xc","rotate45Yc","checkIsRotateByRotateCenter","centerRow","centerCol","maxCol","rowArr","jsonDataToServer","afterLeftJson","minCol","_i","afterRightJson","checkIsBottom","checkDown","targetNode","findTheNodeDown","count1","count0","nodeDownIsZero","wasPunishedByRival","punishArr","jsonNumber","Object","punishCol","generatePunishBlock","count","generatePunishJson","punishBlockArr","showScoreForGame1","removeRows","overAgain","overQuit","overShare","audioUrl","willDisappearRow","userMsg","tag","token","tokenMsg","integral","loadingState","changeMapList","removeMapList","state","hasOwnProperty","b","JSON","stringify","websocket","send","connectLongSerive","onopen","onmessage","msg1","parse","GetServerMsg","onerror","onclose","code","reason","msg","userInfoScript","GetUserMsg","WebSocket","openid","matchState","matchSuccess","msg2","playerList","pictureEnemy","LoadUserPicture","rowColArr","nGameType","nEnemyGame","nameEnemy","beginMap","nodeArray","rivalGameType","_typeof","lenght","substring","rivalIconNode","userIconNode","enemyGroundChild","prefabEnemy","nodeEnemyParent","nServerWidth","initMapForTwoAndFour","LoadRivalPicture","initRivalMap","prefabEnemy1","userType","forEach","element","typeName","Date","getMilliseconds","frame","end","color1","punishMap","rows","PunishUp","nodePunish","punishPrefab","arrayChangeNode","userGameType","isDisppearEnemy","info","keys","userInfo","lose","jsonData","noticeMsg","informMessage","rollText","gameType","md","statics","loadImage","load","tex","Rect","filePath","rivalFilePath","rivalImageForWechatGame","wxDownloadImage","imageLoadToolForWechatGame","imagePath","imageLoadTool","dirpath","jsb","fileUtils","getWritablePath","md5URL","filepath","loadEnd","error","retain","isFileExist","saveFile","isDirectoryExist","createDirectory","writeDataToFile","Uint8Array","xhr","XMLHttpRequest","onreadystatechange","readyState","response","responseType","open","action","jindu","progressBar","ProgressBar","clearAll","u","release","progressCallback","completedCount","totalCount","res","progress","resource","completeCallback","texture","LoginScene","userNameLabel","rivalNameLabel","countDownAudio","backBtn","showCountDown","nSuccessTime","startTime","UserState","sceneArr","preLoadGameScene","sceneLoad","urls","gameSceneName","LoadTwoUser","backGame","backButton","tetirsComment","stoneComment","puyouComment","figureComment","tetirsX","stoneX","puyouX","figureX","loadMatchUserSuccess","tX","sX","pX","fX","backA","backb","backc","backd","PressBlock","PressStoneBlock","PressFigureBlock","rundomChoose","helpLeft","targetLeft","currentMenu","moveMenu","helpRight","targetRight","targetMenu","backB","backC","backD","help","continue","restart","editor","executionOrder","backFunction","continueFunction","restartFunction","modelOneFunction","modelTwoFunction","modelThreeFunction","nSpeed","nodeChildPause","nBox","isShow","isDownState","nUpdate","isOver","AddBoxNumber","DownBlock","TravelOnloda","GetShape","stringBlock","nArray","nx","ny","nRotate1","BlockDown","nBoxArray","nXArray","nYArray","levelLabel","username","prefabUser","nodeUserParent","groundUser","groundEnemy","nodeMove","pauseRestart","pauseReturn","pauseGiveIn","noticeDark","operationNode","userScore","overNodeLose","pauseFunction","nSide","isRotateState","isMoveState","isDisppearState","getLocationX","isSend","gameNode","Console","nDissppearRow","nodeScoreString","PressBack","nodeStop","PressPause","PressContinue","PressRestart","PressNext","PressTuiChu","window","nSide1","wechatSuccess","videoAdIsClick","arrayBackGround","SortArray","nArrayLength","nodeBox","nServerFigureWidth","initMapForEnemy","puyouChild","nCollisionBack","arratSubScript","nSubScript","IsDown","Game4Fight","backArr","rowNum","Shape","allowRotate","waitRemove","setAllowRotate","rankNode","display","noticeX","notice","noticeY","wx","loadUserPictureByWx","shareIcon","shareFriends","shareText","offsetRow","xlTime","isRemoveDown","downShine","action5","nodeChildParent","_properties","helpX","runBack","MAIN_MENU","topScore","canClick","setting","setNotice","schedule","unscheduleAllCallbacks","TurnOneChoose","TurnPersonsChoose","helpFun","runA","showRank","showWorldRank","imageLoader","rankPrefab","loseLink","backAudio","worldRankPrefab","informmask","informContent","_isCapturing","game","addPersistRootNode","isLoad","userImage","rivalImage","figureTopScore","stoneTopScore","informContentX","informContentY","message","repeatForever","StandAloneLoad","iconUrl","nickname","nodePicture","iconUr2","nodeName1","nodePicture1","nodePicture2","LoadThreeUser","iconUr3","nodePicture3","iconUr","vsNode","responseText","responseData","_loop","avatarUrl","worldNode","rownum","cacelShowWorldRank","gameClubButton","show","loadRivalPictureByWx","LoadUserPictureAsync","sprite","isBrowser","fullPath","removeFile","size","getWinSize","RenderTexture","begin","getRunningScene","visit","saveToFile","IMAGE_FORMAT_JPG","tryTimes","fn","reflection","callStaticMethod","OS_IOS","adId","createAdvertisement","winSize","bannerWidth","bannerHeight","showVideoAd","videoId","videoAd","createRewardedVideoAd","adUnitId","catch","errMsg","onClose","isEnded","waitServer","startBtn","accessToken","openId","refshToken","fTokenTime","isTokenTime","screenAdapt","wxLoginSuccess","WechatLogin","current","wechatGameLogin","login","success","appid","secret","request","header","method","dataType","sessionKey","getUserInfo","fail","complete","GetAccessToken","code1","SendServer","access_token","refresh_token","str","str1","headimgurl","SendUserInfo","RefreshToken","isRefsh","view","getFrameSize","size1","loginState","icon","figureBlock","playClickMusic","puyoBlock","tetrisBlock","stoneBlock","pauseBack","pauseContinue","showOver","totalRemoveTime","currentAu","resLength","textureCache","getAllTextures","resArr","relive","stop","choosedId","animation","n","_j","_j2","_j3","xArr","minX","maxX","currentWidth","winWidth","Common","leftFunction","rightFunction","boxColorArr","Over","setState","createMatrix","cols","initial","columns","before0Name","before0Type","before0Frame","before0Row","before1Name","before1Type","before1Frame","before1Row","before2Name","before2Type","before2Frame","before2Row","jsonData0","jsonData1","jsonData2","jsonData3","jsonData4","jsonData5","jsonDataForServer","mr","direction","downArr","r","o","c","h","g","v","String","fromCharCode","charCodeAt","charAt","unescape","encodeURIComponent","concat","A","C","define","amd","md5","Consts","InitKey","Grade","LevelKey","ScoreKey","FetchFriend","FetchGroup","FetchFriendLevel","FetchFriendScore","HorConmpar","Paging","Scrolling","SaveScore","_a","_decorator","ccclass","property","wxRankList","_super","_this","rankRender","rankListNode","horRankNode","tetrisRankBtn","tetrisRankBtn_down","figureRankBtn","figureRankBtn_down","stoneRankBtn","stoneRankBtn_down","rankBgNode","labelTitle","touchLayer","enableScroll","_timeCounter","rendInterval","rankTexture","rankSpriteFrame","closeBackRank","__extends","wxRankList_1","instance","Texture2D","resizeSharedCanvas","tetrisRank","updateRankList","sharedCanvas","getOpenDataContext","canvas","changeRender","renderNode","position","initWithElement","handleLoadedTexture","setTexture","onEnable","onTouchMove","onDisable","onViewDetailRank","loadLevelScoreRank","onPageUp","onPageDown","deltaY","getDeltaY","level","loadLevelOpenRank","uploadScore","setUserCloudStorage","KVDataList","key","value","uploadLevelOpen","removeUserKey","key_or_keys","removeUserCloudStorage","keyList","args","imageUrl","shareAppMessage","title","query","initRank","snapshotSync","destWidth","destHeight","tetrisScore","figureRank","figureScore","stoneRank","stoneScore","__decorate","Boolean"],"mappings":"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","sourcesContent":["cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        //该方格是否已经填充东西初始化为false\r\n        isFilled : false,\r\n        type     : null,\r\n        innerNode     : null,\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        \r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n    // LIFE-CYCLE CALLBACKS:\r\n    onLoad () {\r\n     \r\n        // //初始化物体下落计时器\r\n        // this.fDownTime=0;\r\n        //判断下落方块是否固定\r\n        this.isStationary=false;\r\n        //初始化物体触底，触碰方块计时器\r\n        this.fCollisionTime=0;\r\n        //判断物体是否和底部或 方块触碰\r\n        this.isCollision=false;\r\n    },\r\n    start () {\r\n\r\n    },\r\n    update (dt) {\r\n        if(this.node.getPositionY()+this.node.parent.getPositionY()<1920)\r\n        {\r\n            this.node.parent.getComponent(\"OperateBlock\").isJoin=true;\r\n        }\r\n    },\r\n    // //俄罗斯方块旋转\r\n    // RotateBlock:function(){\r\n    //     if(this.isStationary==false)\r\n    //     {\r\n    //         //刷新1s计时时间\r\n    //         this.fCollisionTime=0;\r\n    //         //旋转次数自加1\r\n    //         this.nRotate++;\r\n    //         this.node.rotation=this.nRotate*90;\r\n    //         if(this.nRotate==4)\r\n    //         {\r\n    //             this.nRotate=1;\r\n    //         }\r\n    //     }\r\n    // },\r\n\r\n \r\n});\r\n","// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        //判断此处是否含有噗呦块\r\n        isBox:false,\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        //获取此噗呦小块的颜色\r\n        this.stringColor=\"\";\r\n        //\r\n\r\n        \r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","module.exports = {\r\n    STATE_COVER : 0,\r\n    //\r\n    STATE_MENU  : 1,\r\n    //玩游戏状态\r\n    STATE_PLAY  : 2,\r\n    //消除状态\r\n    STATE_REMOVE: 3,\r\n    //游戏结束状态\r\n    STATE_OVER  : 4,\r\n    //网格的行和列\r\n    MAP_ROW : 12,\r\n    MAP_COL : 6,\r\n    MOVEMODEL : 1,\r\n}","var Game3 = require(\"../game3/game\");\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n            //预制体数组\r\n        prefabArr : {\r\n            default : [],\r\n            type    : [cc.Prefab],\r\n        },\r\n        girdSize : 20,\r\n        backPrefab  : {\r\n            default : null,\r\n            type    : cc.Prefab,\r\n        },\r\n        scoreLabel : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        //下一个形状显示区域节点\r\n        nextShape   : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        //联网版的时候是对手信息\r\n        rivalInfoNode : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        //下落按钮\r\n        downButton  : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        // //单机版的时候是下下个方格状态\r\n        // next2 : {\r\n        //     default : null,\r\n        //     type    : cc.Node,\r\n        // },\r\n        //gameover标签\r\n        // gameBye : {\r\n        //     default : null,\r\n        //     type    : cc.Node,\r\n        // },\r\n        //滑动按钮\r\n        slideButton : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        rotateButton : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        //遮罩\r\n        mask : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        //结束菜单\r\n        pauseMenu : {\r\n            default   : null,\r\n            type      : cc.Node,\r\n        },\r\n        //游戏结束菜单\r\n        overMenu  : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        overAnimation : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        //左移右移节点\r\n        // leftAndRight : {\r\n        //     default : null,\r\n        //     type    : cc.Node,\r\n        // },\r\n        gameSlide : cc.Node,\r\n        nickName  : cc.Node,\r\n        rivalName : cc.Node,\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        this.normalSpeed = 0.7,\r\n        this.quickSpeed  = 0.07,\r\n        this.up = 15;\r\n        this.lr = 13;\r\n        cc.log(\"当前游戏是否是处于暂停状态\"+cc.director.isPaused());\r\n        if(cc.director.isPaused()){\r\n            cc.director.resume();\r\n        }\r\n        this.overAnimation.active = false;\r\n        //发给服务器的数据\r\n        this.jsonMsgToServer = {\r\n            tag1            : 9,\r\n            score           : \"\",\r\n            type            : \"\",\r\n            state1          : \"\",\r\n            changeMapList1  : [],\r\n            removeMapList1  : 0,\r\n            nMapRow         : \"\",\r\n            nMapCol         : \"\",\r\n            loading1        : \"\",\r\n        };\r\n        //消除之后待下落数组的集合\r\n        this.nodeWidth = this.node.width;\r\n        this.nodeHeight = this.node.height;\r\n        cc.log(\"this.nodeWidth is \" + this.nodeWidth + \"this.nodeHeight is \" + this.nodeHeight);\r\n        //定义消除次数\r\n        this.eliminateCount = 0;\r\n        //定义得分\r\n        this.score = 0;\r\n        //背景二位数组\r\n        this.backGroundArr = null;\r\n        //形状集合二维数组,将每次生成的形状添加到二维数组里面\r\n        // this.shapeArr = [];\r\n        this.time = 0;\r\n        //创建背景网格\r\n        this.initMap(this.up,this.lr,this.backPrefab,12,6);\r\n        //存放每次生成的预制体数组即是活动的条\r\n        this.nodeArr = this.createShape(this.node);\r\n        // //生成下一个形状\r\n        this.createNext();\r\n        cc.log(\"this.nodeArr is \" + this.nodeArr);\r\n        // this.columnLocation();\r\n        //创建下一个旋转体\r\n        this.gameOver = false;\r\n        // this.nextShape = new Shape(this.nextShape,0,0);\r\n        // this.gameBye.active = false;\r\n        //当前条是否还可以改变状态\r\n        this.canChangeStatu = true;\r\n        //状态机的状态\r\n        this.iState = 0;\r\n        //定义一个状态标志\r\n        /**\r\n         * cover = 0 封面\r\n         * paly = 2; 游戏\r\n         * remove = 3;消除\r\n         * over = 4;结束游戏\r\n         * Menu 菜单\r\n         */\r\n        this.xltime = this.normalSpeed;\r\n        this.cishu = 0;\r\n        Array.prototype.contain = function(shape){\r\n            if(shape != undefined){\r\n                for(var i = 0;i<this.length;i++){\r\n                    if(this[i].x === shape.x && this[i].y === shape.y && this[i].getComponent(\"Stone\").type === shape.getComponent(\"Stone\").type){\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n        //下落按钮监听\r\n        this.downButton.on(\"touchstart\",function(){\r\n            this.downButton.children[0].opacity = 120;\r\n            this.xltime = this.quickSpeed;\r\n        }.bind(this));\r\n        this.downButton.on(\"touchend\",function(){\r\n            this.downButton.children[0].opacity = 0;\r\n            this.xltime = this.normalSpeed;\r\n        }.bind(this));\r\n        //注册监听事件\r\n        this.registerKeyBoard();\r\n        // var rotateAction = cc.rotateBy(3,360).easing(cc.easeCubicActionOut());\r\n        // var rf = cc.repeatForever(rotateAction);\r\n        // this.rotateButton.runAction(rf);\r\n        //游戏开始不显示遮罩\r\n        this.mask.active = false;\r\n        //开始时候暂停菜单不显示\r\n        this.pauseMenu.active = false;\r\n        //消除的次数\r\n        this.removeTime = 0;\r\n\r\n        //游戏结束菜单不显示\r\n        this.overMenu.active = false;\r\n        //游戏结束计时\r\n        this.overCost = 0;\r\n        //滑动按钮时间间隔，到达那个事件间隔计算第二次触摸所对应的列数\r\n        this.index = 0;\r\n        if(cc.sys.isNative){\r\n            this.nickName.getComponent(cc.Label).string = cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser;\r\n            //发送数据到服务器\r\n            cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg({\"tag1\":10,\"type\":\"\",\"score\":cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nUserScore,\"nMapRow\":\"\",\"nMapCol\":\"\",\"loading1\":1});\r\n        }\r\n        //触屏的当前列\r\n        this.nCol = 0;\r\n        this.rightDirection = false;\r\n        this.leftDirection = false;\r\n        this.slideStart = 0;\r\n        //对手是否触底\r\n        this.rivalTouchBarry = false;\r\n        //调用消除方法的次数\r\n        this.invokeRemoveTime = 0;\r\n        //是不是向服务器发送向左移动的信息\r\n        this.sendLeft = false;\r\n        //是不是向服务器发送向右移动的信息\r\n        this.sendRight = false;\r\n        //是不是向服务器发送向下移动的信息\r\n        this.sendDown = false;\r\n        //是不是向服务器发送旋转的信息\r\n        this.sendRotate = false;\r\n    },\r\n    registerKeyBoard : function(){\r\n        Game3.prototype.registerKeyBoard.call(this);\r\n    },\r\n    onKeyDown : function(){\r\n        Game3.prototype.onKeyDown.call(this);\r\n    },\r\n    onKeyUp   : function(){\r\n        Game3.prototype.onKeyUp.call(this);\r\n    },\r\n    //获得触点坐标位置\r\n    getTouchLine : function(buttonNode,worldPosition){\r\n        return Game3.prototype.getTouchLine.call(this,buttonNode,worldPosition);\r\n    },\r\n    //获得节点数组中最大的列\r\n    getNodeArrMaxCol : function(){\r\n        return Game3.prototype.getNodeArrMaxCol.call(this);\r\n    },\r\n    //获得节点数组中最小的列\r\n    getNodeArrMinCol : function(){\r\n        return Game3.prototype.getNodeArrMinCol.call(this);\r\n    },\r\n    //this.up,this.lr,this.backPrefab,12,6\r\n    initMap : function(up,lr,backPrefab,row,col){\r\n        Game3.prototype.initMap.call(this,up,lr,backPrefab,row,col);\r\n    },\r\n    //生成预制体\r\n    createShape : function(node){\r\n        return Game3.prototype.createShape.call(this,node);\r\n    },\r\n    createNext : function(){\r\n        this.nextBlock = this.createShape(this.node);\r\n        //显示下一个形状\r\n        this.showNextShape(this.nextBlock,this.nextShape);\r\n    },\r\n    showNextShape : function(nextBlock,nextNode){\r\n        var trimSizeJson = {\r\n            width  : 100,\r\n            height : 100,\r\n        }\r\n        Game3.prototype.showNextShape.call(this,nextBlock,nextNode,trimSizeJson);\r\n    },\r\n    generateNext : function(parentNode){\r\n        return this.createShape(parentNode);\r\n    },\r\n    /**\r\n    @param prefab:将要生成预制节点的预制体\r\n    @param x     :将要生成预制节点的x坐标\r\n    @param y     :将要生成预制节点的y坐标\r\n    @param parentNode : 生成的预制节点的父节点\r\n    @param trimSizeJson : 对预制体进行裁减的时候的json对象\r\n    */\r\n    setPrefabPosition : function(prefab,x,y,parentNode,trimSizeJson){\r\n        return Game3.prototype.setPrefabPosition.call(this,prefab,x,y,parentNode,trimSizeJson);\r\n    },\r\n    createPrefab : function(prefab){\r\n        var prefabNode = cc.instantiate(prefab);\r\n        return prefabNode;\r\n    },\r\n    createRandom : function(min,max){\r\n        return Game3.prototype.createRandom.call(this,min,max);\r\n    },\r\n    start () {\r\n\r\n    },\r\n    update (dt) {\r\n        if(this.onSlide || this.onGameSlide){\r\n            this.index += dt;\r\n            // cc.log(\"this.slidePosition is \" + this.slidePosition.x);\r\n            // if(this.index === dt){\r\n            //     this.column1 = this.getTouchLine(this.slidePosition);\r\n            // }\r\n            // if(this.index >= 0.3){\r\n            //     this.column2 = this.getTouchLine(this.slidePosition);\r\n            //     this.index = 0;\r\n            // }\r\n            if(this.onSlide){\r\n                var column = this.getTouchLine(this.slideButton,this.slidePosition);\r\n                //当用的是滑屏的时候将空节点的滑动状态改为false\r\n                this.onSlide = false;\r\n            }else{\r\n                var column = this.getTouchLine(this.gameSlide,this.gameSlidePosition);\r\n                this.onGameSlide = false;\r\n            }\r\n            //如果当前列比节点数组中最大列还大的话就右移\r\n            if(column > this.getNodeArrMaxCol()){\r\n                //右移\r\n                this.moveRight();\r\n            }else if(column < this.getNodeArrMinCol()){\r\n                //左移\r\n                this.moveLeft();\r\n            }\r\n        }\r\n        //如果游戏结束了就不在进行下落\r\n        if(!this.gameOver){\r\n            this.time += dt;\r\n            if(this.cishu === 0 && this.xltime < this.normalSpeed){\r\n                //如果重新生成一个形状的话就将下落的速度改为this.normalSpeed\r\n                this.xltime = this.normalSpeed;\r\n            }\r\n            if(this.time > this.xltime){\r\n                if(this.cishu < 3){\r\n                    if(this.cishu === 0){\r\n                        if(this.map[0][this.nodeArr[2].getComponent(\"Stone\").col] != 1){\r\n                            this.nodeArr[2].active = true;\r\n                            let sendJsonData = {\r\n                                row   : 0,\r\n                                col   : this.nodeArr[2].getComponent(\"Stone\").col,\r\n                                color : this.nodeArr[2].getComponent(\"Stone\").type.toString(),\r\n                            }\r\n                            console.log(\"this.jsonMsgToServer is \" + this.jsonMsgToServer);\r\n                            this.jsonMsgToServer.changeMapList1.push(sendJsonData);\r\n                            console.log(\"sendJsonData is \",sendJsonData);\r\n                            //发送数据到服务器\r\n                            if(cc.sys.os === cc.sys.OS_ANDROID){\r\n                                cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(this.jsonMsgToServer);\r\n                            }\r\n                            this.jsonMsgToServer.changeMapList1 = [];\r\n                        }\r\n                        else\r\n                            this.gameOver = true;    \r\n                    }else if(this.cishu === 1){\r\n                        if(this.map[1][this.nodeArr[1].getComponent(\"Stone\").col] != 1){\r\n                            this.nodeArr[2].y = this.backGroundArr[1][this.nodeArr[1].getComponent(\"Stone\").col].y;\r\n                            this.nodeArr[2].getComponent(\"Stone\").row = 1;\r\n                            this.nodeArr[1].active = true;\r\n                            this.nodeArr[1].y = this.backGroundArr[0][this.nodeArr[0].getComponent(\"Stone\").col].y;\r\n                            this.nodeArr[1].getComponent(\"Stone\").row = 0;\r\n\r\n                            let sendJsonData1 = {\r\n                                row : 1,\r\n                                col : this.nodeArr[2].getComponent(\"Stone\").col,\r\n                                color : this.nodeArr[2].getComponent(\"Stone\").type.toString(),\r\n                            }\r\n                            let sendJsonData0 = {\r\n                                row : 0,\r\n                                col : this.nodeArr[1].getComponent(\"Stone\").col,\r\n                                color : this.nodeArr[1].getComponent(\"Stone\").type.toString(),\r\n                            }\r\n                            this.jsonMsgToServer.changeMapList1.push(sendJsonData1);\r\n                            this.jsonMsgToServer.changeMapList1.push(sendJsonData0);\r\n                            console.log(sendJsonData1);\r\n                            console.log(sendJsonData0);\r\n                            if(cc.sys.os === cc.sys.OS_ANDROID){\r\n                                cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(this.jsonMsgToServer);\r\n                            }\r\n                            this.jsonMsgToServer.changeMapList1 = [];\r\n                        }else{\r\n                            this.gameOver = true;\r\n                        }\r\n                    }else if(this.cishu === 2){\r\n                        if(this.map[2][this.nodeArr[1].getComponent(\"Stone\").col] != 1){\r\n                            this.nodeArr[2].y = this.backGroundArr[2][this.nodeArr[1].getComponent(\"Stone\").col].y;\r\n                            this.nodeArr[2].getComponent(\"Stone\").row = 2;\r\n    \r\n                            this.nodeArr[1].y = this.backGroundArr[1][this.nodeArr[0].getComponent(\"Stone\").col].y;\r\n                            this.nodeArr[1].getComponent(\"Stone\").row = 1;\r\n    \r\n                            this.nodeArr[0].active = true;\r\n                            this.nodeArr[0].getComponent(\"Stone\").row = 0;\r\n                            let sendJsonData2 = {\r\n                                row     : 2,\r\n                                col     : this.nodeArr[2].getComponent(\"Stone\").col,\r\n                                color   : this.nodeArr[2].getComponent(\"Stone\").type.toString(),\r\n                            };\r\n                            let sendJsonData1 = {\r\n                                row     : 1,\r\n                                col     : this.nodeArr[1].getComponent(\"Stone\").col,\r\n                                color   : this.nodeArr[1].getComponent(\"Stone\").type.toString(),\r\n                            };\r\n                            let sendJsonData0 = {\r\n                                row     : 0,\r\n                                col     : this.nodeArr[0].getComponent(\"Stone\").col,\r\n                                color   : this.nodeArr[0].getComponent(\"Stone\").type.toString(),\r\n                            }\r\n                            this.jsonMsgToServer.changeMapList1.push(sendJsonData2);\r\n                            this.jsonMsgToServer.changeMapList1.push(sendJsonData1);\r\n                            this.jsonMsgToServer.changeMapList1.push(sendJsonData0);\r\n                            console.log(sendJsonData2);\r\n                            console.log(sendJsonData1);\r\n                            console.log(sendJsonData0);\r\n                            if(cc.sys.os === cc.sys.OS_ANDROID){\r\n                                cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(this.jsonMsgToServer);\r\n                            }\r\n                            this.jsonMsgToServer.changeMapList1 = [];\r\n                        }else{\r\n                            this.gameOver = true;\r\n                        }\r\n                        \r\n                    }\r\n                    this.cishu++;\r\n                }else{\r\n                    // this.cishu = 0;\r\n                    this.updatePrefatY(this.nodeArr,true);\r\n                }\r\n                this.time = 0;\r\n            }\r\n            //左移动的时候将数据发送到服务器\r\n            if(this.sendDown){\r\n                if(cc.sys.os === cc.sys.OS_ANDROID){\r\n                    cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(this.jsonMsgToServer);\r\n                    console.log(\"=================下落发送数据到服务器完毕==================\");\r\n                    //发送完该数据后将该数组置空\r\n                    this.jsonMsgToServer.changeMapList1 = [];\r\n                    //发送完毕关闭该开关\r\n                    this.sendDown = false;\r\n                }\r\n            }\r\n            //发送向左移动的数据\r\n            if(this.sendLeft){\r\n                if(cc.sys.os === cc.sys.OS_ANDROID){\r\n                    console.log(\"================发送数据开始================\");\r\n                    cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(this.jsonMsgToServer);\r\n                    console.log(\"================发送数据结束================\");\r\n                    this.jsonMsgToServer.changeMapList1 = [];\r\n                    this.sendLeft = false;\r\n                }\r\n            }\r\n            //发送向右移动的数据\r\n            if(this.sendRight){\r\n                if(cc.sys.os === cc.sys.OS_ANDROID){\r\n                    cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(this.jsonMsgToServer);\r\n                    console.log(\"================发送数据结束================\");\r\n                    this.jsonMsgToServer.changeMapList1 = [];\r\n                    this.sendRight = false;\r\n                }\r\n            }\r\n            //发送旋转的相关数据\r\n            if(this.sendRotate){\r\n                if(cc.sys.os === cc.sys.OS_ANDROID){\r\n                    console.log(\"=============发送数据到服务器==============\");\r\n                    this.sendDataToServer(this.jsonMsgToServer);\r\n                    this.jsonMsgToServer.changeMapList1 = [];\r\n                    this.sendRotate = false;\r\n                }\r\n            }\r\n        }else{\r\n            this.overMenu.active = true;\r\n            //显示分数\r\n            this.overMenu.getChildByName(\"scoreValue\").getComponent(cc.Label).string = this.score;\r\n            this.overCost += dt;\r\n            // //暂停游戏\r\n            // cc.director.pause();\r\n            if(this.overCost >= 4){\r\n                //恢复游戏主逻辑\r\n                cc.director.resume();\r\n                cc.director.loadScene(\"OneChoose\");\r\n                this.overCost = 0;\r\n            }\r\n        }\r\n    },\r\n    //网络版的加测下落\r\n    updatePrefatY : function(nodeArr,isNetWork){\r\n        Game3.prototype.updatePrefatY.call(this,nodeArr,isNetWork);\r\n    },\r\n    //检查节点是否可以消除\r\n    checkNodeArr : function(nodeArr,isNetWork){\r\n        return Game3.prototype.checkNodeArr.call(this,nodeArr,isNetWork);\r\n    },\r\n    //检查一个节点数组是否可以进行消除\r\n    canRemove : function(nodeArr,waitQueue){\r\n        return Game3.prototype.canRemove.call(this,nodeArr,waitQueue);\r\n    },\r\n    //添加待消节点到待消节点到待消队列里面\r\n    addWillDeleteArr : function(node,willDeleteArr){\r\n        Game3.prototype.addWillDeleteArr.call(this,node,willDeleteArr);\r\n    },\r\n    //四个方向寻找看看是否和自己的类型相同\r\n    directorFind : function(typeArr,row,col,i,type,node){\r\n        Game3.prototype.directorFind.call(this,typeArr,row,col,i,type,node);\r\n    },\r\n    //看看周围的加点是否和自己的类型相同\r\n    isCommonType : function(leftRow,leftCol,type){\r\n        return Game3.prototype.isCommonType.call(this,leftRow,leftCol,type);\r\n    },\r\n    //消除方法\r\n    remove : function(waitQueue,removeTime,isNetWork){\r\n        return Game3.prototype.remove.call(this,waitQueue,removeTime,isNetWork);\r\n    },\r\n    //从节点树种删除待消节点\r\n    deleteNodeFromParent : function(waitQueue,waitDownArr){\r\n        Game3.prototype.deleteNodeFromParent.call(this,waitQueue,waitDownArr);\r\n    },\r\n    //向上查找待消节点上的所有节点\r\n    upFindNodes:function(row,col){\r\n        return Game3.prototype.upFindNodes.call(this,row,col);\r\n    },\r\n    addScore :function(waitQueueLength){\r\n        Game3.prototype.addScore.call(this,waitQueueLength);\r\n    },\r\n    //检查是否可以下落\r\n    CheckIsDown   : function(nodeArr){\r\n        return Game3.prototype.CheckIsDown.call(this,nodeArr);\r\n    },\r\n    //=================下落,左移右移代码部分开始==================\r\n    down : function(nodeArr,isNetWork){\r\n        //可以向服务器发送下降信息\r\n        this.sendDown = true;\r\n        Game3.prototype.down.call(this,nodeArr,isNetWork);\r\n    },\r\n    //左移方法\r\n    moveLeft : function(){\r\n        Game3.prototype.moveLeft.call(this,true);\r\n    },\r\n    //检查是否能够向左移动\r\n    CheckIsLeft : function(){\r\n        return Game3.prototype.CheckIsLeft.call(this);\r\n    },\r\n    //左移方法\r\n    leftMove : function(node,isNetWork){\r\n        this.sendLeft = true;\r\n        Game3.prototype.leftMove.call(this,node,isNetWork);\r\n    },\r\n    //右移方法\r\n    moveRight : function(){\r\n        Game3.prototype.moveRight.call(this);\r\n    },\r\n    //检查是否可以向右移动\r\n    CheckIsRight : function(){\r\n        return Game3.prototype.CheckIsRight.call(this);\r\n    },\r\n    //右移操作\r\n    rightMove : function(node,isNetWork){\r\n        this.sendRight = true;\r\n        Game3.prototype.rightMove.call(this,node,isNetWork);\r\n    },\r\n    //旋转操作\r\n    rotate : function(){\r\n        this.sendRotate = true;\r\n        Game3.prototype.rotate.call(this,true);\r\n    },\r\n    //====================下落，左移右移,旋转代码部分结束=========================\r\n    //更新地图信息\r\n    updateMap : function(nodeArr){\r\n        Game3.prototype.updateMap.call(this,nodeArr);\r\n    },\r\n    onDestroy (){\r\n        Game3.prototype.onDestroy.call(this);\r\n    },\r\n    //暂停游戏方法\r\n    pause: function(){\r\n        Game3.prototype.pause.call(this);\r\n    }\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n    properties: {\r\n        //宝石类型\r\n        type:null,\r\n        //是否可以消除\r\n        isRemove:false,\r\n        //是否移动过\r\n        isMove : false,\r\n        //是否可以激活\r\n        isActive : false,\r\n        t        : 0,\r\n        /**\r\n         * 0 : 0度方向\r\n         * 1 : 90度方向\r\n         * 2 : 180度方向\r\n         * 3 : 270度方向\r\n         * 4 : 360度方向也就是0度方向\r\n         */\r\n        angle    : 0,\r\n        //是否可以快速下落\r\n        hasDown : false,\r\n        //该节点所处的行和列\r\n        row : 0,\r\n        col : 0,      \r\n    },\r\n    onLoad (){  \r\n    },\r\n    /**\r\n     * @param  {目标位置的行} row\r\n     * @param  {目标位置的列} col\r\n     * @param  {背景节点数组} backGroundArr\r\n     * @param  {背景方格模型数据} map\r\n     * @param  {是否是网络版的游戏} isNetWork\r\n     */\r\n    quickDown : function(row,col,backGroundArr,map,isNetWork){\r\n        var jsonMsgToServer = {\r\n            tag1            : 9,\r\n            score           : \"\",\r\n            type            : \"\",\r\n            state1          : \"\",\r\n            changeMapList1  : [],\r\n            removeMapList1  : 0,\r\n            nMapRow         : \"\",\r\n            nMapCol         : \"\",\r\n            loading1        : \"\",\r\n        };\r\n        //改变当前行\r\n        var self = this;\r\n        //将当前要快速下路的节点的背景方格模型数据的状态改为0\r\n        var beforeRow = self.row;\r\n        var beforeCol = self.col;\r\n        map[self.row][self.col] = 0;\r\n        backGroundArr[self.row][self.col].getComponent(\"Back\").type = -1;\r\n        backGroundArr[self.row][self.col].getComponent(\"Back\").innerNode = null;\r\n        cc.log(\"map is \" + map);\r\n        var targetX = backGroundArr[row][col].x;\r\n        var targetY = backGroundArr[row][col].y;\r\n        var moveAction = cc.moveTo(0.0008,cc.p(targetX,targetY));\r\n        self.node.runAction(moveAction);\r\n        //该节点已经下落过了，以后更新地图的时候不更新\r\n        self.hasDown = true;\r\n        // this.node.x = targetX;\r\n        // this.node.y = targetY;\r\n        map[row][col] = 1;\r\n        //设置背景方格的类型为该节点的类型\r\n        backGroundArr[row][col].getComponent(\"Back\").type = this.type;\r\n        backGroundArr[row][col].getComponent(\"Back\").innerNode = this.node;\r\n        //设置当前的行为下落之后的行\r\n        this.row = row;\r\n        //如果是网络版游戏的话就发送数据到服务器\r\n        if(isNetWork){\r\n            //填充jsonMsgToServer\r\n            jsonMsgToServer.changeMapList1.push({row:beforeRow,col:beforeCol,color:\"-1\"});\r\n            jsonMsgToServer.changeMapList1.push({row:row,col:col,color:this.type.toString()});\r\n            //发送数据到服务器\r\n            cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(jsonMsgToServer);\r\n        }\r\n        \r\n    },\r\n    //消除下落操作\r\n    afterRemoveDown : function(map,backGroundArr,isNetWork){\r\n        var jsonMsgToServer = {\r\n            tag1            : 9,\r\n            score           : \"\",\r\n            type            : \"\",\r\n            state1          : \"\",\r\n            changeMapList1  : [],\r\n            removeMapList1  : 0,\r\n            nMapRow         : \"\",\r\n            nMapCol         : \"\",\r\n            loading1        : \"\",\r\n        };\r\n        this.t = 0;\r\n        //开启物理组件刚体\r\n        // cc.director.getPhysicsManager().enabled = true;\r\n        if(this.isActive){\r\n            console.log(\"不可消除块下落了，需要你引起注意\");\r\n        }\r\n        //当最底下有两个要消除的时候上方的两个方格下落会出现问题\r\n        \r\n        //自己向下找空穴的位置\r\n        //自己占据的地图信息改为0\r\n        // if(this.checkCanDown(map)){\r\n            let beforeRow = this.row;\r\n            let beforeCol = this.col;\r\n            map[this.row][this.col] = 0;\r\n            //改变背景方格的类型状态及内置节点的引用风\r\n            backGroundArr[this.row][this.col].getComponent(\"Back\").type = -1;\r\n            backGroundArr[this.row][this.col].getComponent(\"Back\").innerNode = null;\r\n            //向下扫描找到空穴的位置\r\n            var targetRow = this.scanDown(map,this.row,this.col);\r\n            cc.log(\"targetRow is \" + targetRow);\r\n            this.targetX = backGroundArr[targetRow][this.col].x;\r\n            this.targetY = backGroundArr[targetRow][this.col].y;\r\n            this.hasTarget = true;\r\n            // var distance = targetRow - this.row;\r\n            // if (cc._renderType === cc.game.RENDER_TYPE_CANVAS) {\r\n            //     cc.renderer.enableDirtyRegion(false);\r\n            // }\r\n            // var action = cc.moveTo(0.3,cc.p(targetX,targetY));\r\n            // this.node.runAction(action);\r\n            // this.node.y = targetY;\r\n            //将该节点的行设置成目标行\r\n            this.row = targetRow;\r\n            map[this.row][this.col] = 1;\r\n            //设置背景方格的类型为该节点的类型\r\n            backGroundArr[this.row][this.col].getComponent(\"Back\").type = this.type;\r\n            backGroundArr[this.row][this.col].getComponent(\"Back\").innerNode = this.node;\r\n            console.log(\"++++++++beforeRow is +++++++++++\" + beforeRow);\r\n            console.log(\"++++++++beforeRow is +++++++++++\" + beforeCol);\r\n            let json1 = {\r\n                row     : beforeRow,\r\n                col     : beforeCol,\r\n                color   : \"-1\",\r\n            };\r\n            let json2 = {\r\n                row     : this.row,\r\n                col     : this.col,\r\n                color   : this.type.toString(),\r\n            };\r\n            //如果是网络版的游戏发送消息到服务器\r\n            if(isNetWork){\r\n                jsonMsgToServer.changeMapList1.push(json1);\r\n                jsonMsgToServer.changeMapList1.push(json2);\r\n                cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(jsonMsgToServer);\r\n            }\r\n            \r\n            // if(this.node.y <= backGroundArr[11][this.col].y){\r\n            //     this.node.y = backGroundArr[11][this.col].y;\r\n            // }\r\n        // }\r\n    },\r\n    // //下落惩罚\r\n    // downPunish : function(){\r\n\r\n    // },\r\n    scanDown : function(map,row,col){\r\n         //向下寻找\r\n         while(row < 11){\r\n            row++;\r\n            if(map[row][col] === 1){\r\n                break;\r\n            }\r\n            if(row === 11){\r\n                break;\r\n            }\r\n         }\r\n         //最底下的背景方格的状态不为1\r\n         if(row === 11 && map[row][col] != 1){\r\n             return 11;\r\n         }else{\r\n            return row-1;\r\n         }\r\n    },\r\n    //检测该节点是否可以下落\r\n    checkCanDown : function(map){\r\n        if(map[this.row+1][this.col] === 1){\r\n            return false;\r\n        }else{\r\n            return true;\r\n        }\r\n    },\r\n    //节点发光\r\n    shine : function(){\r\n        var self = this;\r\n          (function test(a){\r\n              (function t(){\r\n                var action1 = cc.fadeTo(0.1,70);\r\n                var action2 = cc.fadeTo(0,1,100);\r\n                var action3 = cc.fadeTo(0.1,130);\r\n                var action4 = cc.fadeTo(0.1,160);\r\n                var sequence = cc.sequence(action1,action2,action3,action4);\r\n                self.node.runAction(sequence);\r\n                cc.log(\"adfadfadf\");\r\n              })();\r\n            a();\r\n        })(self.aaa.bind(self));\r\n    },\r\n    //旋转操作\r\n    rotate : function(centerX,centerY,backGroundArr){\r\n\r\n\r\n    },\r\n    // LIFE-CYCLE CALLBACKS:\r\n    aaa:function(){\r\n        // this.node.destroy();\r\n        cc.log(\"发光完毕\");\r\n        this.scheduleOnce(function(){\r\n            this.node.destroy();\r\n        },0.2);\r\n        \r\n    },\r\n    onLoad () {\r\n        // cc.log(\"%%%%%%%%%%%\");\r\n        this.delay = 0;\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n    update (dt) {\r\n          \r\n            if(this.hasTarget){\r\n                    cc.log(\"dt s \" + dt);\r\n                    cc.log(\"this.t is \" + this.t);\r\n                    this.t += dt;\r\n                    cc.log(this.t);\r\n                    cc.log(this.node.y+\"？？？？？？？？？？？？？？？？？？？？？？？？\");\r\n                    cc.log(this.targetY+\"/////////////////////////\");\r\n                    if(this.node.y >= this.targetY+120){\r\n                        if(this.t >= 0.1){\r\n                            cc.log(\"33434343434343434434\");\r\n                            //  cc.director.getPhysicsManager().enabled = false;\r\n                            this.node.y -= 120;\r\n                            this.t = 0;\r\n                        }\r\n                    }\r\n            }\r\n            if(!this.isActive && this.type >= 4){\r\n                //不显示它们的子节点\r\n                for(let i = 0;i<this.node.childrenCount;i++){\r\n                    this.node.children[i].active = false;\r\n                }\r\n            }\r\n            // if(this.isActive && this.type >= 4){\r\n            //     for(let i = 0;i<this.node.childrenCount;i++){\r\n            //         this.node.children[i].active = true;\r\n            //     }\r\n            // }\r\n    },\r\n});\r\n","/*\r\n * @Author: mikey.zhaopeng \r\n * @Date: 2018-06-25 21:11:34 \r\n * @Last Modified by: mikey.zhaopeng\r\n * @Last Modified time: 2018-12-21 22:17:15\r\n */\r\n// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n// window.Global = {\r\n//     //声明全局Game1Main\r\n//      game1Main:null,\r\n//      //小方块的宽度\r\n//      nWidth:70,\r\n// };\r\nconst Game3 = require('../game3/game')\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        //获取canvas节点\r\n        nodeCanvas: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        //获取地板预制体元素\r\n        groundPrefab: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        //获取方块父节点\r\n        boxParent: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        //获取地板父节点\r\n        groundParent: {\r\n            default: null,\r\n            type: cc.Node\r\n        }\r\n        ,\r\n        //获取L形状方块预制体\r\n        prefabL: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        //获取正方形方块预制体\r\n        prefabSquare: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        //获取Z形状方块预制体\r\n        prefabZ: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        }, //获取长条形状方块预制体\r\n        prefabLong: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        //获取T形状方块预制体\r\n        prefabT: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        //获取俄罗斯方块父节点\r\n        blockParent: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        //获取旋转按钮节点\r\n        nodeRotateButton: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n\r\n        //获取下落按钮节点\r\n        nodeDownButton: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        //获取移动按钮节点\r\n        nodeMove1: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        //获取第二个俄罗斯方块位置节点\r\n        next1Node: {\r\n            default: null,\r\n            type: cc.Node\r\n\r\n        },\r\n        //获取第三个俄罗斯方块位置节点\r\n        next2Node: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        //获取结束游戏背景节点\r\n        overBackGround: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        //获取分数节点\r\n        nodeScore1: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        //\r\n        stopNode:{\r\n            default:null,\r\n            type:cc.Node\r\n        },\r\n        clickAudio : {\r\n            url : cc.AudioClip,\r\n            default : null,\r\n        },\r\n        loseAudio : {\r\n            url : cc.AudioClip,\r\n            default : null,\r\n        },\r\n        removeAudio : {\r\n            url : cc.AudioClip,\r\n            default : null,\r\n        },\r\n        darkNotice : cc.Node,\r\n        handNode   : cc.Node,\r\n        //网格上也可以滑动\r\n        slideNode  : cc.Node,\r\n        noticePrefab : cc.Prefab,\r\n        usernameNode : cc.Node,\r\n        userPictureNode : cc.Node,\r\n        gameOverScoreNode : cc.Node,\r\n        //遮罩节点\r\n        darkNode : cc.Node,\r\n        //滑动节点\r\n        SlideAcrossNode : cc.Node,\r\n        //下落节点\r\n        downNode : cc.Node,\r\n        //旋转节点\r\n        rotateNode : cc.Node,\r\n\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n    // LIFE-CYCLE CALLBACKS:\r\n    //根据消行层数显示自分数\r\n    ShowScore: function (nDissppearRow1, nodeScore) {\r\n        switch (nDissppearRow1) {\r\n            case 1:\r\n                this.score = parseInt(nodeScore.getComponent(cc.Label).string) + 40;\r\n                nodeScore.getComponent(cc.Label).string = (parseInt(nodeScore.getComponent(cc.Label).string) + 40).toString();\r\n                break;\r\n            case 2:\r\n                this.score = parseInt(nodeScore.getComponent(cc.Label).string) + 90;\r\n                nodeScore.getComponent(cc.Label).string = (parseInt(nodeScore.getComponent(cc.Label).string) + 90).toString();\r\n                break;\r\n            case 3:\r\n                this.score = parseInt(nodeScore.getComponent(cc.Label).string) + 150;\r\n                nodeScore.getComponent(cc.Label).string = (parseInt(nodeScore.getComponent(cc.Label).string) + 150).toString();\r\n                break;\r\n            case 4:\r\n                this.score = parseInt(nodeScore.getComponent(cc.Label).string) + 220;\r\n                nodeScore.getComponent(cc.Label).string = (parseInt(nodeScore.getComponent(cc.Label).string) + 220).toString();\r\n                break;\r\n        }\r\n    },\r\n    onLoad() {\r\n        if(Global.advertisement !== null){\r\n            //隐藏广告\r\n            Global.advertisement.hide();\r\n        }\r\n        this.gameBye = false;\r\n        var self = this;\r\n        this.showNoticeHelp = true;\r\n        //显示提示信息框\r\n        this.noticeBlock = Game3.prototype.setPrefabPosition.call(self,self.noticePrefab,0,0,self.node);\r\n        console.log(\"提示按钮是：\",this.noticeBlock);\r\n        console.log(\"this is \",this);\r\n        this.noticeBlock.active = true;\r\n        this.noticeBlock.getChildByName(\"wordNotice\").getChildByName(\"dynamicWords\").getComponent(cc.Label).string = \"随着消除次数的增加，方块的小落速度\\n\"\r\n        + \"随之增加,要掌控住方块的速度哦！\";\r\n        //定义自己的分数为0\r\n        this.score = 0;\r\n        this.nLine = 0;\r\n        this.invalidRemoveTime = 0;\r\n        this.gameSlide = true;\r\n        cc.director.resume();\r\n        \r\n        this.isOutSlide = true;\r\n        //判断是否显示分数\r\n        this.isShowScore = false;\r\n        this.positionTouchX = 0;\r\n        this.handNode.getComponent(cc.Animation).play();\r\n        //初始化结束计时\r\n        this.nTime=0;\r\n        this.darkNotice.on(\"touchstart\",function(event){\r\n            this.darkNotice.active = false;\r\n            this.handNode.active = false;\r\n            this.showNoticeHelp = false;\r\n            Global.startWar = true;\r\n            this.noticeBlock.active = false;\r\n        }.bind(this));\r\n        this.handNode.on(\"touchstart\",function(event){\r\n            this.darkNotice.active = false;\r\n            this.handNode.active = false;\r\n            this.showNoticeHelp = false;\r\n            this.noticeBlock.active = false;\r\n            Global.startWar = true;\r\n        }.bind(this));\r\n        //当手指落在滑动节点上时\r\n        this.noticeBlock.on(cc.Node.EventType.TOUCH_START,function(event){\r\n            console.log(\"点击了提示按钮\");\r\n            this.darkNotice.active = false;\r\n            this.handNode.active = false;\r\n            this.noticeBlock.active = false;\r\n            this.showNoticeHelp = false;\r\n            Global.startWar = true;\r\n        }.bind(this));\r\n        this.nodeMove1.on(cc.Node.EventType.TOUCH_START, function (event) {\r\n            console.log(\"点击了滑动节点\");\r\n            // self.isOutSlide = false;\r\n            // self.positionTouchX = event.getLocationX();\r\n        }, this);\r\n        //当手指在滑动节点上移动时\r\n        this.nodeMove1.on(cc.Node.EventType.TOUCH_MOVE, function (event) {\r\n            console.log(\"滑动了滑动节点\");\r\n            self.isOutSlide = false;\r\n            self.positionTouchX = event.getLocation();\r\n        }, this);\r\n        //当手指离开滑动节点时\r\n        this.nodeMove1.on(cc.Node.EventType.TOUCH_END, function (event) {\r\n            self.isOutSlide = false;\r\n            self.positionTouchX = event.getLocation();\r\n        }, this);\r\n        this.nodeMove1.on(cc.Node.EventType.TOUCH_CANCEL, function (event) {\r\n            self.isOutSlide = true;\r\n            self.positionTouchX = event.getLocation();\r\n        }, this);\r\n        //滑动节点上方的空节点用来在网格上方滑动\r\n        this.slideNode.on(\"touchstart\",function(event){\r\n            cc.log(\"点击了gameSlide节点\");\r\n        }.bind(this));\r\n        this.slideNode.on(\"touchmove\",function(event){\r\n            console.log(\"touchmove is touched\");\r\n            self.gameSlide = false;\r\n            self.slidePosition = event.getLocation();\r\n        }.bind(this));\r\n        this.slideNode.on(\"touchend\",function(event){\r\n            self.gameSlide = false;\r\n            self.slidePosition = event.getLocation();\r\n        }.bind(this));\r\n        this.slideNode.on(\"touchcancel\",function(event){\r\n            self.gameSlide = true;\r\n            self.slidePosition = event.getLocation();\r\n        }.bind(this));\r\n        if (cc.sys.isNative) {\r\n          \r\n            //判断手指是否离开滑动节点\r\n         \r\n            // this.gameSlide = true;\r\n            //判断手指是否离开下落节点\r\n            this.isOutDown = true;\r\n            //显示用户信息\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").LoadUser(cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").pictureUser, cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser, this.usernameNode, this.userPictureNode);\r\n            //  //旋转触屏\r\n            //  this.nodeRotateButton.on(cc.Node.EventType.TOUCH_START, function (event) {\r\n            //      self.rotateBlock();\r\n            //   }, this);\r\n            //下落触屏 \r\n            //当手指落在下落节点上时\r\n            this.nodeDownButton.on(cc.Node.EventType.TOUCH_START, function (event) {\r\n                console.log(\"111111111111111111111111111111111111111111111111\");\r\n                self.isOutDown = false;\r\n            }, this);\r\n            //当手指离开下落节点上时\r\n            this.nodeDownButton.on(cc.Node.EventType.TOUCH_END, function (event) {\r\n                self.isOutDown = true;\r\n            }, this);\r\n            //左右滑动触屏\r\n            // //当手指落在滑动节点上时\r\n            // this.nodeMove.on(cc.Node.EventType.TOUCH_START, function (event) {\r\n            //     console.log(\"点击了滑动节点\");\r\n            //     // self.isOutSlide = false;\r\n            //     self.positionTouchX = event.getLocationX();\r\n            // }, this);\r\n            // //当手指在滑动节点上移动时\r\n            // this.nodeMove.on(cc.Node.EventType.TOUCH_MOVE, function (event) {\r\n            //     console.log(\"滑动了滑动节点\");\r\n            //     // self.isOutSlide = false;\r\n            //     self.positionTouchX = event.getLocationX();\r\n            // }, this);\r\n            // //当手指离开滑动节点时\r\n            // this.nodeMove.on(cc.Node.EventType.TOUCH_END, function (event) {\r\n            //     self.isOutSlide = true;\r\n            // }, this);\r\n            // this.nodeMove.on(cc.Node.EventType.TOUCH_CANCEL, function (event) {\r\n            //     self.isOutSlide = true;\r\n            // }, this);\r\n             //判断是否点击旋转按钮\r\n        this.isPressRotate = false;\r\n        // //是否点击了视频广告\r\n        // this.isClickAd = false;\r\n        //当手指落在下落节点上时\r\n        this.nodeRotateButton.on(cc.Node.EventType.TOUCH_START, function (event) {\r\n            self.isPressRotate = false;\r\n        }, this);\r\n        //当手指离开下落节点上时\r\n        this.nodeRotateButton.on(cc.Node.EventType.TOUCH_END, function (event) {\r\n            self.isPressRotate = true;\r\n        }, this);\r\n        }\r\n        else {\r\n            if(CC_WECHATGAME){\r\n                //显示用户信息\r\n                cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").LoadUser(cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").pictureUser, cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser, this.usernameNode, this.userPictureNode);\r\n            }\r\n            //获取出点的世界坐标\r\n            this.positionTouchX = 0;\r\n            var self = this;\r\n            //判断手指是否离开滑动节点\r\n            this.isOutSlide = true;\r\n            //判断手指是否落在滑动节点\r\n            this.isOutDown = true;\r\n            // //当手指落在滑动节点上时\r\n            // this.nodeMove.on(cc.Node.EventType.TOUCH_START, function (event) {\r\n             \r\n            //     self.isOutSlide = false;\r\n            //     self.positionTouchX = event.getLocationX();\r\n            // }, this);\r\n            // //当手指在滑动节点上移动时\r\n            // this.nodeMove.on(cc.Node.EventType.TOUCH_MOVE, function (event) {\r\n            //   ;\r\n            //     self.isOutSlide = false;\r\n            //     self.positionTouchX = event.getLocationX();\r\n            // }, this);\r\n            // //当手指离开滑动节点时\r\n            // this.nodeMove.on(cc.Node.EventType.TOUCH_END, function (event) {\r\n               \r\n            //     self.isOutSlide = true;\r\n            // }, this);\r\n            // this.nodeMove.on(cc.Node.EventType.TOUCH_CANCEL, function (event) {\r\n            //     self.isOutSlide = true;\r\n            // }, this);\r\n            //当手指落在下落节点上时\r\n            this.nodeDownButton.on(cc.Node.EventType.TOUCH_START, function (event) {\r\n                this.playAudio(this.clickAudio);\r\n                self.isOutDown = false;\r\n            }, this);\r\n            //当手指离开下落节点上时\r\n            this.nodeDownButton.on(cc.Node.EventType.TOUCH_END, function (event) {\r\n                self.isOutDown = true;\r\n            }, this);\r\n             //判断是否点击旋转按钮\r\n        this.isPressRotate = false;\r\n        //当手指落在下落节点上时\r\n        this.nodeRotateButton.on(cc.Node.EventType.TOUCH_START, function (event) {\r\n            self.isPressRotate = false;\r\n        }, this);\r\n        //当手指离开下落节点上时\r\n        this.nodeRotateButton.on(cc.Node.EventType.TOUCH_END, function (event) {\r\n            self.isPressRotate = true;\r\n        }, this);\r\n        }\r\n        if(CC_WECHATGAME){\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").LoadUser(cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").pictureUser, \r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser,\r\n            this.usernameNode, this.userPictureNode);\r\n        }\r\n        //初始化敌人消行总数\r\n        this.disappearAll = 0;\r\n        //判断是否第一次生成俄罗斯方块\r\n        this.isFirst = false;\r\n        // //显示用户信息\r\n        // cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").LoadUser(cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").pictureUser,cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser,this.usernameNode,cc.find(\"UserPicture\"),cc.find(\"UserPicture1\"));\r\n        Global.game1Main = this;\r\n        //初始化背景子节点\r\n        this.groundChild = [];\r\n        for (var i = 0; i <= 9; i++) {\r\n            this.groundChild[i] = [];\r\n        }\r\n        //  this.nRotateAngle1=0;\r\n        //  this.nRotateAngle2=0;\r\n        //初始化当前俄罗斯方块颜色\r\n        this.stringColor = \"\";\r\n        //初始化当前俄罗斯方块形状\r\n        this.stringShape = \"\";\r\n        //初始化当前俄罗斯方块角度\r\n        this.stringRotate = \"\";\r\n        // cc.log(this.nodeCanvas.getComponent(\"Game1Main\").stringShape);\r\n        //初始化旋转角度\r\n        //  this.nRotateAngle=0; \r\n        this.nCreat = 0;\r\n        //生成游戏背景\r\n        this.GetGround();\r\n        //随机生成俄罗斯方块\r\n        this.GetBlock();\r\n        this.boxParent1 = this.boxParent.getChildren();\r\n        //声明数组，当俄罗斯方块固定后将俄罗斯方块的子块存入该数组   \r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n    },\r\n    //显示用户信息\r\n    /**\r\n     */\r\n    ShowUser: function () {\r\n    },\r\n    start() {\r\n        //资源引用\r\n        // let resLength = cc.textureCache.getAllTextures().length;\r\n        // for(let i = 0;i < resLength;i++){\r\n        //     console.log(\"in game1's textures is \",cc.textureCache.getAllTextures()[i].url);\r\n        // }\r\n    },\r\n    //手动释放资源\r\n    onDestroy: function(){\r\n        // cc.loader.setAutoReleaseRecursively(\"res/raw-assets/Textures/Common1.png\",false);\r\n        // cc.loader.setAutoReleaseRecursively(\"res/raw-assets/Textures/Common2.png\",false);\r\n        // //不释放预制体资源\r\n        // cc.loader.setAutoReleaseRecursively(\"c52f365c-d782-4bf1-ab19-dca69cfa484f\",false);\r\n    },\r\n    createPrefab : function(prefab){\r\n        var prefabNode = cc.instantiate(prefab);\r\n        return prefabNode;\r\n    },\r\n    onKeyDown: function (event) {\r\n        var self = this;\r\n        switch (event.keyCode) {\r\n            case cc.KEY.a:\r\n                self.MoveLeft();\r\n                break;\r\n            case cc.KEY.d:\r\n                self.MoveRight();\r\n                break;\r\n            case cc.KEY.s:\r\n                self.DownQuick();\r\n                break;\r\n            case cc.KEY.l:\r\n                self.RotateBlock();\r\n                break;\r\n        }\r\n    },\r\n    //俄罗斯方块向左移动\r\n    /**\r\n     * @param  {} nLine\r\n     * @param  {} nLine1\r\n     */\r\n    MoveLeft: function (nLine, nLine1) {\r\n        if (nLine == nLine1) {\r\n            return;\r\n        }\r\n        //存取俄罗斯方块的行数\r\n        var nArrayRow = [];\r\n        //存取俄罗斯方块的列数\r\n        var nArrayList = [];\r\n        //获取节点子节点数组\r\n        var blockChild = this.nodeBlock.getChildren();\r\n        //将俄罗斯方块的行列存入数组中\r\n        for (var i = 0; i <= 3; i++) {\r\n            //获取此时组成俄罗斯方块元素的行列\r\n            var nX = (blockChild[i].x + this.nodeBlock.x - this.groundParent.x) / Global.nWidth + 1;\r\n            var nY = (blockChild[i].y + this.nodeBlock.y - this.groundParent.y) / Global.nWidth + 1;\r\n            nArrayList.push(nX);\r\n            nArrayRow.push(nY);\r\n        }       //从小到大排序行数\r\n        function compare(value1,value2){\r\n            if(value1 < value2){\r\n                return -1;\r\n           }else if(value1 > value2){\r\n                return 1;\r\n           }else{\r\n                return 0;\r\n           }\r\n        }\r\n        // nArrayRow.sort(compare);\r\n        // console.log(\"nArrayRow is \",nArrayRow);\r\n        for (var j = 0; j <= 3; j++) {\r\n            if (j <= 2) {\r\n                for (var k = j + 1; k <= 3; k++) {\r\n                    if (nArrayRow[k] < nArrayRow[j]) {\r\n                        var nOldY = nArrayRow[j];\r\n                        nArrayRow[j] = nArrayRow[k];\r\n                        nArrayRow[k] = nOldY;\r\n                        var nOldX = nArrayList[j];\r\n                        nArrayList[j] = nArrayList[k];\r\n                        nArrayList[k] = nOldX;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // cc.log(nArrayRow+\"？？？？？？？？？？？？？？？？？？？？？\");\r\n        if (nArrayRow[0] <= 19 || (nArrayRow[0] == 20 && this.nodeBlock.getComponent(\"OperateBlock\").stringBoloekShape == \"Long\")) {\r\n            // cc.log(nArrayRow[0]+\"////////////////////////////////////////////////////////\");\r\n            //从小到大排序列数\r\n            for (var j = 0; j <= 3; j++) {\r\n                if (j <= 2) {\r\n                    for (var k = j + 1; k <= 3; k++) {\r\n                        if (nArrayList[k] < nArrayList[j]) {\r\n                            var nOldY = nArrayRow[j];\r\n                            nArrayRow[j] = nArrayRow[k];\r\n                            nArrayRow[k] = nOldY;\r\n                            var nOldX = nArrayList[j];\r\n                            nArrayList[j] = nArrayList[k];\r\n                            nArrayList[k] = nOldX;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (nArrayList[0] == 1) {\r\n                return;\r\n            }\r\n            else {\r\n                //判断方块的前一列是否有方块\r\n                var isHas = false;\r\n                for (var i = 0; i <= 3; i++) {\r\n                    // //将俄罗斯方块所在方格置为false\r\n                    // this.groundChild[nArrayList[i] - 1][nArrayRow[i] - 1].getComponent(\"PrefabState\").isBox = false;\r\n                    //判断方块的前一列的方块属性是否为true\r\n                    if (this.groundChild[nArrayList[i] - 2][nArrayRow[i] - 1].getComponent(\"PrefabState\").isBox) {\r\n                        isHas = true;\r\n                    }\r\n                    if (i == 3) {\r\n                        if (isHas) {\r\n                            // for (var j = 0; j <= 3; j++) {\r\n                            //     //将俄罗斯方块所在方格置为false\r\n                            //     this.groundChild[nArrayList[j] - 1][nArrayRow[j] - 1].getComponent(\"PrefabState\").isBox = true;\r\n                            // }\r\n                            return;\r\n                        }\r\n                        else {\r\n                            for (var k = 0; k <= 3; k++) {\r\n                                // //将前一列的方块所在方格置为true\r\n                                // this.groundChild[nArrayList[k] - 2][nArrayRow[k] - 1].getComponent(\"PrefabState\").isBox = true;\r\n                                if (k == 3) {\r\n                                    //俄罗斯方块向左移动\r\n                                    this.nodeBlock.x -= Global.nWidth;\r\n                                    if (this.nodeBlock.getComponent(\"OperateBlock\").isCollision) {\r\n                                        // //初始化 1s计时器\r\n                                        // this.nodeBlock.getComponent(\"OperateBlock\").fDownTime = 0;\r\n                                        // this.nodeBlock.getComponent(\"OperateBlock\").fCollisionTime = 0;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n    },\r\n    //俄罗斯方块向右移动\r\n    MoveRight: function (nLine, nLine1) {\r\n        if (nLine == nLine1) {\r\n            return;\r\n        }\r\n        //存取俄罗斯方块的行数\r\n        var nArrayRow = [];\r\n        //存取俄罗斯方块的列数\r\n        var nArrayList = [];\r\n        //获取节点子节点数组\r\n        var blockChild = this.nodeBlock.getChildren();\r\n        //将俄罗斯方块的行列存入数组中\r\n        for (var i = 0; i <= 3; i++) {\r\n            //获取此时组成俄罗斯方块元素的行列\r\n            var nX = (blockChild[i].x + this.nodeBlock.x - this.groundParent.x) / Global.nWidth + 1;\r\n            var nY = (blockChild[i].y + this.nodeBlock.y - this.groundParent.y) / Global.nWidth + 1;\r\n            //    cc.log(nX);\r\n            //    cc.log(nY);\r\n            nArrayList.push(nX);\r\n            nArrayRow.push(nY);\r\n        }\r\n        //从小到大排序行数\r\n        for (var j = 0; j <= 3; j++) {\r\n            if (j <= 2) {\r\n                for (var k = j + 1; k <= 3; k++) {\r\n                    if (nArrayRow[k] < nArrayRow[j]) {\r\n                        var nOldY = nArrayRow[j];\r\n                        nArrayRow[j] = nArrayRow[k];\r\n                        nArrayRow[k] = nOldY;\r\n                        var nOldX = nArrayList[j];\r\n                        nArrayList[j] = nArrayList[k];\r\n                        nArrayList[k] = nOldX;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (nArrayRow[0] <= 19 || (nArrayRow[0] == 20 && this.nodeBlock.getComponent(\"OperateBlock\").stringBoloekShape == \"Long\")) {\r\n            //从小到大排序列数\r\n            for (var j = 0; j <= 3; j++) {\r\n                if (j <= 2) {\r\n                    for (var k = j + 1; k <= 3; k++) {\r\n                        if (nArrayList[k] < nArrayList[j]) {\r\n                            var nOldY = nArrayRow[j];\r\n                            nArrayRow[j] = nArrayRow[k];\r\n                            nArrayRow[k] = nOldY;\r\n                            var nOldX = nArrayList[j];\r\n                            nArrayList[j] = nArrayList[k];\r\n                            nArrayList[k] = nOldX;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (nArrayList[3] == 10) {\r\n                return;\r\n            }\r\n            else {\r\n                //判断方块的下一列是否有方块\r\n                var isHas = false;\r\n                for (var i = 3; i >= 0; i--) {\r\n                    // //将俄罗斯方块所在方格置为false\r\n                    // this.groundChild[nArrayList[i] - 1][nArrayRow[i] - 1].getComponent(\"PrefabState\").isBox = false;\r\n                    //判断方块的下一列的方块属性是否为true\r\n                    if (this.groundChild[nArrayList[i]][nArrayRow[i] - 1].getComponent(\"PrefabState\").isBox) {\r\n                        isHas = true;\r\n                    }\r\n                    if (i == 0) {\r\n                        if (isHas) {\r\n                            for (var j = 0; j <= 3; j++) {\r\n                                // //将俄罗斯方块所在方格置为true\r\n                                // this.groundChild[nArrayList[j] - 1][nArrayRow[j] - 1].getComponent(\"PrefabState\").isBox = true;\r\n                            }\r\n                            return;\r\n                        }\r\n                        else {\r\n                            for (var k = 0; k <= 3; k++) {\r\n                                // //将下一列的方块所在方格置为true\r\n                                // this.groundChild[nArrayList[k]][nArrayRow[k] - 1].getComponent(\"PrefabState\").isBox = true;\r\n                                if (k == 3) {\r\n                                    //俄罗斯方块向右移动\r\n                                    this.nodeBlock.x += Global.nWidth;\r\n                                    if (this.nodeBlock.getComponent(\"OperateBlock\").isCollision) {\r\n                                        // //初始化 1s计时器\r\n                                        // this.nodeBlock.getComponent(\"OperateBlock\").fDownTime = 0;\r\n                                        // this.nodeBlock.getComponent(\"OperateBlock\").fCollisionTime = 0;\r\n                                    }\r\n                                    //   //初始化 1s计时器\r\n                                    //   this.nodeBlock.getComponent(\"OperateBlock\").fCollisionTime=0;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return;\r\n\r\n        }\r\n    },\r\n    //生成背景\r\n    GetGround: function () {\r\n        for (var i = 0; i <= 9; i++) {\r\n            for (var j = 0; j <= 19; j++) {\r\n                var groundNode = cc.instantiate(this.groundPrefab);\r\n                groundNode.parent = this.groundParent;\r\n                groundNode.setPosition(cc.p(i * Global.nWidth, j * Global.nWidth));\r\n                this.groundChild[i].push(groundNode);\r\n            }\r\n        }\r\n    },\r\n    //便遍历俄罗斯方块火苏组，并使它们生成时为隐藏\r\n    TarvelFalse: function () {\r\n        var blockChild = this.nodeBlock.getChildren();\r\n        for (var i = 0; i <= blockChild.length - 1; i++) {\r\n            blockChild[i].active = false;\r\n        }\r\n    },\r\n    //当俄罗斯方块落下后初始化信息\r\n    OnLoadBlock: function (stringShape, nBlock, stringRotate, stringColor3) {\r\n        cc.log(stringShape);\r\n        cc.log(stringRotate);\r\n        cc.log(nBlock);\r\n        switch (stringShape) {\r\n            //  this.shapeBlock=[\"T\",\"L\",\"Long\",\"Z\",\"Square\"];\r\n            case \"Long\":\r\n                switch (nBlock) {\r\n                    case 0:\r\n                        this.nodeBlock.destroy();\r\n                        //生成俄罗斯方块\r\n                        this.nodeBlock = cc.instantiate(this.prefabLong);\r\n                        this.TarvelFalse();\r\n                        //获取此时方块的形状\r\n                        this.nodeBlock.parent = this.blockParent;\r\n                        //随机方块位置\r\n                        this.nodeBlock.setPosition(this.setBlockPosition(\"Long\", stringRotate));\r\n                        cc.log(this.nodeBlock.getPosition());\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").stringColor = stringColor3;\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").stringBoloekShape = stringShape;\r\n                        // this.nodeBlock.getComponent(\"OperateBlock\").isStartDown = true;\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle = parseInt(stringRotate);\r\n                        break;\r\n                    case 1:\r\n                        this.nodeBlock1.destroy();\r\n                        this.nodeBlock1 = cc.instantiate(this.prefabLong);\r\n                        //获取此时方块的形状\r\n                        this.nodeBlock1.parent = this.blockParent;\r\n                        //随机方块位置\r\n                        this.nodeBlock1.setPosition(this.setBlock1Position(\"Long\", this.next1Node, stringRotate));\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").stringColor = stringColor3;\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").stringBoloekShape = stringShape;\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").nRotateAngle = parseInt(stringRotate);\r\n                        break;\r\n                    case 2:\r\n                        this.nodeBlock2.destroy();\r\n                        this.nodeBlock2 = cc.instantiate(this.prefabLong);\r\n                        //获取此时方块的形状\r\n                        this.nodeBlock2.parent = this.blockParent;\r\n                        //随机方块位置\r\n                        this.nodeBlock2.setPosition(this.setBlock1Position(\"Long\", this.next2Node, stringRotate));\r\n                        this.nodeBlock2.getComponent(\"OperateBlock\").stringColor = stringColor3;\r\n                        this.nodeBlock2.getComponent(\"OperateBlock\").stringBoloekShape = stringShape;\r\n                        this.nodeBlock2.getComponent(\"OperateBlock\").nRotateAngle = parseInt(stringRotate);\r\n                        break;\r\n                }\r\n                break;\r\n            case \"Z\":\r\n                switch (nBlock) {\r\n                    case 0:\r\n                        this.nodeBlock.destroy();\r\n                        //生成俄罗斯方块\r\n                        this.nodeBlock = cc.instantiate(this.prefabZ);\r\n                        this.TarvelFalse();\r\n                        //获取此时方块的形状\r\n                        this.nodeBlock.parent = this.blockParent;\r\n                        //随机方块位置\r\n                        this.nodeBlock.setPosition(this.setBlockPosition(\"Z\", stringRotate));\r\n                        cc.log(this.nodeBlock.getPosition());\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").stringColor = stringColor3;\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").stringBoloekShape = stringShape;\r\n                        // this.nodeBlock.getComponent(\"OperateBlock\").isStartDown = true;\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle = parseInt(stringRotate);\r\n                        break;\r\n                    case 1:\r\n                        this.nodeBlock1.destroy();\r\n                        this.nodeBlock1 = cc.instantiate(this.prefabZ);\r\n                        //获取此时方块的形状\r\n                        this.nodeBlock1.parent = this.blockParent;\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").stringColor = stringColor3;\r\n                        //随机方块位置\r\n                        this.nodeBlock1.setPosition(this.setBlock1Position(\"Z\", this.next1Node, stringRotate));\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").stringBoloekShape = stringShape;\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").nRotateAngle = parseInt(stringRotate);\r\n                        break;\r\n                    case 2:\r\n                        this.nodeBlock2.destroy();\r\n                        this.nodeBlock2 = cc.instantiate(this.prefabZ);\r\n                        //获取此时方块的形状\r\n                        this.nodeBlock2.parent = this.blockParent;\r\n                        //随机方块位置\r\n                        this.nodeBlock2.setPosition(this.setBlock1Position(\"Z\", this.next2Node, stringRotate));\r\n                        this.nodeBlock2.getComponent(\"OperateBlock\").stringColor = stringColor3;\r\n                        this.nodeBlock2.getComponent(\"OperateBlock\").stringBoloekShape = stringShape;\r\n                        this.nodeBlock2.getComponent(\"OperateBlock\").nRotateAngle = parseInt(stringRotate);\r\n                        break;\r\n                }\r\n                break;\r\n            case \"Square\":\r\n                switch (nBlock) {\r\n                    case 0:\r\n                        this.nodeBlock.destroy();\r\n                        //生成俄罗斯方块\r\n                        this.nodeBlock = cc.instantiate(this.prefabSquare);\r\n                        this.TarvelFalse();\r\n                        //获取此时方块的形状\r\n                        this.nodeBlock.parent = this.blockParent;\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").stringColor = stringColor3;\r\n                        //随机方块位置\r\n                        this.nodeBlock.setPosition(this.setBlockPosition(\"Square\", stringRotate));\r\n                        cc.log(this.nodeBlock.getPosition());\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").stringBoloekShape = stringShape;\r\n                        // this.nodeBlock.getComponent(\"OperateBlock\").isStartDown = true;\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle = 0;\r\n                        break;\r\n                    case 1:\r\n                        this.nodeBlock1.destroy();\r\n                        this.nodeBlock1 = cc.instantiate(this.prefabSquare);\r\n                        //获取此时方块的形状\r\n                        this.nodeBlock1.parent = this.blockParent;\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").stringColor = stringColor3;\r\n                        this.nodeBlock1.setPosition(this.setBlock1Position(\"Square\", this.next1Node, stringRotate));\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").stringBoloekShape = stringShape;\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").nRotateAngle = 0;\r\n                    case 2:\r\n                        this.nodeBlock2.destroy();\r\n                        this.nodeBlock2 = cc.instantiate(this.prefabSquare);\r\n                        //获取此时方块的形状\r\n                        this.nodeBlock2.parent = this.blockParent;\r\n                        //随机方块位置\r\n                        this.nodeBlock2.setPosition(this.setBlock1Position(\"Square\", this.next2Node, stringRotate));\r\n                        this.nodeBlock2.getComponent(\"OperateBlock\").stringColor = stringColor3;\r\n                        this.nodeBlock2.getComponent(\"OperateBlock\").stringBoloekShape = stringShape;\r\n                        this.nodeBlock2.getComponent(\"OperateBlock\").nRotateAngle = 0;\r\n                        break;\r\n                }\r\n                break;\r\n            case \"T\":\r\n                switch (nBlock) {\r\n                    case 0:\r\n                        this.nodeBlock.destroy();\r\n                        //生成俄罗斯方块\r\n                        this.nodeBlock = cc.instantiate(this.prefabT);\r\n                        this.TarvelFalse();\r\n                        //获取此时方块的形状\r\n                        this.nodeBlock.parent = this.blockParent;\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").stringColor = stringColor3;\r\n                        //随机方块位置\r\n                        this.nodeBlock.setPosition(this.setBlockPosition(\"T\", stringRotate));\r\n                        cc.log(this.nodeBlock.getPosition());\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").stringBoloekShape = stringShape;\r\n                        // this.nodeBlock.getComponent(\"OperateBlock\").isStartDown = true;\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle = parseInt(stringRotate);\r\n                        break;\r\n                    case 1:\r\n                        this.nodeBlock1.destroy();\r\n                        this.nodeBlock1 = cc.instantiate(this.prefabT);\r\n                        //获取此时方块的形状\r\n                        this.nodeBlock1.parent = this.blockParent;\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").stringColor = stringColor3;\r\n                        this.nodeBlock1.setPosition(this.setBlock1Position(\"T\", this.next1Node, stringRotate));\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").stringBoloekShape = stringShape;\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").nRotateAngle = parseInt(stringRotate);\r\n                        break;\r\n                    case 2:\r\n                        this.nodeBlock2.destroy();\r\n                        this.nodeBlock2 = cc.instantiate(this.prefabT);\r\n                        //获取此时方块的形状\r\n                        this.nodeBlock2.parent = this.blockParent;\r\n                        //随机方块位置\r\n                        this.nodeBlock2.setPosition(this.setBlock1Position(\"T\", this.next2Node, stringRotate));\r\n                        this.nodeBlock2.getComponent(\"OperateBlock\").stringColor = stringColor3;\r\n                        this.nodeBlock2.getComponent(\"OperateBlock\").stringBoloekShape = stringShape;\r\n                        this.nodeBlock2.getComponent(\"OperateBlock\").nRotateAngle = parseInt(stringRotate);\r\n                        break;\r\n                }\r\n                break;\r\n            case \"L\":\r\n                switch (nBlock) {\r\n                    case 0:\r\n                        this.nodeBlock.destroy();\r\n                        //生成俄罗斯方块\r\n                        this.nodeBlock = cc.instantiate(this.prefabL);\r\n                        this.TarvelFalse();\r\n                        //获取此时方块的形状\r\n                        this.nodeBlock.parent = this.blockParent;\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").stringColor = stringColor3;\r\n                        //随机方块位置\r\n                        this.nodeBlock.setPosition(this.setBlockPosition(\"L\", stringRotate));\r\n                        cc.log(this.nodeBlock.getPosition());\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").stringBoloekShape = stringShape;\r\n                        // this.nodeBlock.getComponent(\"OperateBlock\").isStartDown = true;\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle = parseInt(stringRotate);\r\n                        break;\r\n                    case 1:\r\n                        this.nodeBlock1.destroy();\r\n                        this.nodeBlock1 = cc.instantiate(this.prefabL);\r\n                        //获取此时方块的形状\r\n                        this.nodeBlock1.parent = this.blockParent;\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").stringColor = stringColor3;\r\n                        this.nodeBlock1.setPosition(this.setBlock1Position(\"L\", this.next1Node, stringRotate));\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").stringBoloekShape = stringShape;\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").nRotateAngle = parseInt(stringRotate);\r\n                        break;\r\n                    case 2:\r\n                        this.nodeBlock2.destroy();\r\n                        this.nodeBlock2 = cc.instantiate(this.prefabL);\r\n                        //获取此时方块的形状\r\n                        this.nodeBlock2.parent = this.blockParent;\r\n                        //随机方块位置\r\n                        this.nodeBlock2.setPosition(this.setBlock1Position(\"L\", this.next2Node, stringRotate));\r\n                        this.nodeBlock2.getComponent(\"OperateBlock\").stringColor = stringColor3;\r\n                        this.nodeBlock2.getComponent(\"OperateBlock\").stringBoloekShape = stringShape;\r\n                        this.nodeBlock2.getComponent(\"OperateBlock\").nRotateAngle = parseInt(stringRotate);\r\n                        break;\r\n                }\r\n                break;\r\n        }\r\n\r\n    },\r\n    //生成方块\r\n    CopyBlock: function (prefabLBlock, stringShape1) {\r\n        if (this.isFirst == false) {\r\n            switch (this.nCreat) {\r\n                case 0:\r\n                    //生成俄罗斯方块\r\n                    this.nodeBlock = cc.instantiate(prefabLBlock);\r\n                    //获取此时方块的形状\r\n                    this.nodeBlock.parent = this.blockParent;\r\n                    this.TarvelFalse();\r\n                    //随机方块位置\r\n                    this.nodeBlock.setPosition(this.setBlockPosition(this.shapeBlock[this.nShape], this.rotateBlock[this.nRotate]));\r\n                    this.nodeBlock.getComponent(\"OperateBlock\").stringBoloekShape = stringShape1;\r\n                    //  this.nodeBlock.getComponent(\"OperateBlock\").stringColor=this.nc;\r\n                    //  this.nodeBlock.getComponent(\"OperateBlock\").isStartDown=true;\r\n                    break;\r\n                case 1:\r\n                    //生成俄罗斯方块\r\n                    this.nodeBlock1 = cc.instantiate(prefabLBlock);\r\n                    // stringShape1 = \"L\";\r\n                    //获取此时方块的形状\r\n                    this.nodeBlock1.parent = this.blockParent;\r\n                    this.nodeBlock1.setPosition(this.setBlock1Position(this.shapeBlock[this.nShape], this.next1Node, this.rotateBlock[this.nRotate]));\r\n                    this.nodeBlock1.getComponent(\"OperateBlock\").stringBoloekShape = stringShape1;\r\n                    break;\r\n                case 2:\r\n                    this.nodeBlock2 = cc.instantiate(prefabLBlock);\r\n                    //获取此时方块的形状\r\n                    this.nodeBlock2.parent = this.blockParent;\r\n                    this.nodeBlock2.setPosition(this.setBlock1Position(this.shapeBlock[this.nShape], this.next2Node, this.rotateBlock[this.nRotate]));\r\n                    this.nodeBlock2.getComponent(\"OperateBlock\").stringBoloekShape = stringShape1;\r\n            }\r\n        }\r\n        else {\r\n            cc.log(this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle + \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\");\r\n            this.OnLoadBlock(this.nodeBlock1.getComponent(\"OperateBlock\").stringBoloekShape, 0, this.nodeBlock1.getComponent(\"OperateBlock\").nRotateAngle.toString(), this.nodeBlock1.getComponent(\"OperateBlock\").stringColor);\r\n            cc.log(this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle + \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\");\r\n            this.OnLoadBlock(this.nodeBlock2.getComponent(\"OperateBlock\").stringBoloekShape, 1, this.nodeBlock2.getComponent(\"OperateBlock\").nRotateAngle.toString(), this.nodeBlock2.getComponent(\"OperateBlock\").stringColor);\r\n            var randomColor = \"\";\r\n            switch (this.shapeBlock[this.nShape]) {\r\n                case \"Long\":\r\n                    randomColor = \"blue\";\r\n                    break;\r\n                case \"Square\":\r\n                    randomColor = \"green\";\r\n                    break;\r\n                case \"Z\":\r\n                    randomColor = \"red\";\r\n                    break;\r\n                case \"T\":\r\n                    randomColor = \"yellow\";\r\n                    break;\r\n                case \"L\":\r\n                    randomColor = \"purple\";\r\n                    break;\r\n            }\r\n            this.OnLoadBlock(stringShape1, 2, this.rotateBlock[this.nRotate], randomColor);\r\n        }\r\n    },\r\n    //根据第二个俄罗斯方块的类型设置位置\r\n    setBlock1Position: function (stringShape1, nodePosition3, stringRotate) {\r\n        switch (stringShape1) {\r\n            case \"Square\":\r\n                //获取方块的世界坐标\r\n                var v2WorldY = nodePosition3.y;\r\n                var v1WorldX = nodePosition3.x + Global.nWidth / 2;\r\n                return cc.p(v1WorldX, v2WorldY);\r\n                break;\r\n            case \"T\":\r\n                switch (stringRotate) {\r\n                    case \"0\":\r\n                        //获取方块的世界坐标\r\n                        var v2WorldY = nodePosition3.y;\r\n                        var v1WorldX = nodePosition3.x + Global.nWidth / 2;\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                    case \"180\":\r\n                        //获取方块的世界坐标\r\n                        var v2WorldY = nodePosition3.y;\r\n                        var v1WorldX = nodePosition3.x + Global.nWidth / 2;\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                }\r\n                break;\r\n            case \"L\":\r\n                switch (stringRotate) {\r\n                    case \"0\":\r\n                        //获取方块的世界坐标\r\n                        var v2WorldY = nodePosition3.y;\r\n                        var v1WorldX = nodePosition3.x;\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                    case \"180\":\r\n                        //获取方块的世界坐标    \r\n                        var v2WorldY = nodePosition3.y;\r\n                        var v1WorldX = nodePosition3.x + Global.nWidth;\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                }\r\n                break;\r\n            case \"Long\":\r\n                switch (stringRotate) {\r\n                    case \"0\":\r\n                        //获取方块的世界坐标\r\n                        var v2WorldY = nodePosition3.y;\r\n                        var v1WorldX = nodePosition3.x;\r\n                        cc.log(\"000000000000000000000000000000000000\");\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                    case \"180\":\r\n                        //获取方块的世界坐标    \r\n                        var v2WorldY = nodePosition3.y;\r\n                        var v1WorldX = nodePosition3.x + Global.nWidth;\r\n                        cc.log(\"180180180180180180180180180180180180180180180180180\");\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                }\r\n                //    return cc.p(v1WorldX,v2WorldY);\r\n                break;\r\n            case \"Z\":\r\n                switch (stringRotate) {\r\n                    case \"0\":\r\n                        //获取方块的世界坐标\r\n                        var v2WorldY = nodePosition3.y;\r\n                        var v1WorldX = nodePosition3.x;\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                    case \"180\":\r\n                        //获取方块的世界坐标    \r\n                        var v2WorldY = nodePosition3.y;\r\n                        var v1WorldX = nodePosition3.x;\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                }\r\n                break;\r\n        }\r\n    },\r\n    //根据俄罗斯方块类型设置位置\r\n    setBlockPosition: function (stringShape1, stringRotate) {\r\n        switch (stringShape1) {\r\n            case \"Square\":\r\n                //获取方块的世界坐标\r\n                var v2WorldY = this.groundParent.y + 20 * Global.nWidth + Global.nWidth / 2;\r\n                //    var nRandom=Global.nWidth*3+Math.floor(cc.random0To1()*6)*Global.nWidth;\r\n                //    var v1WorldX=(nRandom+nRandom+Global.nWidth)/2;\r\n                var v1WorldX = this.groundParent.x + Global.nWidth / 2 + 4 * Global.nWidth;\r\n                cc.log(v1WorldX);\r\n                cc.log(v2WorldY);\r\n                return cc.p(v1WorldX, v2WorldY);\r\n                break;\r\n            case \"T\":\r\n                switch (stringRotate) {\r\n                    case \"0\":\r\n                        //获取方块的世界坐标              \r\n                        var v2WorldY = this.groundParent.y + 21 * Global.nWidth;\r\n                        var v1WorldX = this.groundParent.x + 5 * Global.nWidth;\r\n                        cc.log(v1WorldX);\r\n                        cc.log(v2WorldY);\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                    case \"180\":\r\n                        //获取方块的世界坐标    \r\n                        var v2WorldY = this.groundParent.y + 20 * Global.nWidth;\r\n                        var v1WorldX = this.groundParent.x + 5 * Global.nWidth;\r\n                        cc.log(v1WorldX);\r\n                        cc.log(v2WorldY);\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                }\r\n                break;\r\n            case \"L\":\r\n                switch (stringRotate) {\r\n                    case \"0\":\r\n                        //获取方块的世界坐标\r\n                        var v2WorldY = this.groundParent.y + 20 * Global.nWidth;\r\n                        var v1WorldX = this.groundParent.x + 4 * Global.nWidth;\r\n                        cc.log(v1WorldX);\r\n                        cc.log(v2WorldY);\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                    case \"180\":\r\n                        //获取方块的世界坐标    \r\n                        var v2WorldY = this.groundParent.y + 21 * Global.nWidth;\r\n                        var v1WorldX = this.groundParent.x + 6 * Global.nWidth;\r\n                        cc.log(v1WorldX);\r\n                        cc.log(v2WorldY);\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                }\r\n                break;\r\n            case \"Long\":\r\n                switch (stringRotate) {\r\n                    case \"0\":\r\n                        //获取方块的世界坐标\r\n                        var v2WorldY = this.groundParent.y + 20 * Global.nWidth;\r\n                        var v1WorldX = this.groundParent.x + 4 * Global.nWidth;\r\n                        cc.log(v1WorldX);\r\n                        cc.log(v2WorldY);\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                    case \"180\":\r\n                        //获取方块的世界坐标    \r\n                        var v2WorldY = this.groundParent.y + 21 * Global.nWidth;\r\n                        var v1WorldX = this.groundParent.x + 5 * Global.nWidth;\r\n                        cc.log(v1WorldX);\r\n                        cc.log(v2WorldY);\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                }\r\n\r\n                break;\r\n            case \"Z\":\r\n                switch (stringRotate) {\r\n                    case \"0\":\r\n                        //获取方块的世界坐标\r\n                        var v2WorldY = this.groundParent.y + 21 * Global.nWidth;\r\n                        var v1WorldX = this.groundParent.x + 4 * Global.nWidth;\r\n                        cc.log(v1WorldX);\r\n                        cc.log(v2WorldY);\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                    case \"180\":\r\n                        //获取方块的世界坐标    \r\n                        var v2WorldY = this.groundParent.y + 20 * Global.nWidth;\r\n                        var v1WorldX = this.groundParent.x + 4 * Global.nWidth;\r\n                        cc.log(v1WorldX);\r\n                        cc.log(v2WorldY);\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                }\r\n                break;\r\n        }\r\n    },\r\n    //俄罗斯方块旋转\r\n    RotateBlock: function () {\r\n        this.isPressRotate = true;\r\n        if (this.nodeBlock.getComponent(\"OperateBlock\").isStationary == false) {\r\n            if (this.nodeBlock.getComponent(\"OperateBlock\").stringBoloekShape == \"Square\") {\r\n                return;\r\n            }\r\n            else {\r\n                this.TraverseRotate();\r\n            }\r\n            this.playAudio(this.clickAudio);\r\n        }\r\n        this.isPressRotate = false;\r\n\r\n    },\r\n    playAudio : function(audioSource){\r\n        cc.audioEngine.play(audioSource,false,1);\r\n    },\r\n    //判断方块颜色\r\n    IsColor: function (stringShape3, nShape3) {\r\n        switch (stringShape3[nShape3]) {\r\n            case \"Long\":\r\n                this.ChangeColor(\"2\");\r\n                break;\r\n            case \"Square\":\r\n                this.ChangeColor(\"1\");\r\n                break;\r\n            case \"Z\":\r\n                this.ChangeColor(\"3\");\r\n                break;\r\n            case \"T\":\r\n                this.ChangeColor(\"4\");\r\n                break;\r\n            case \"L\":\r\n                this.ChangeColor(\"5\");\r\n                break;\r\n        }\r\n    },\r\n    //初始化每个俄罗斯方块的颜色\r\n    OnloadColor: function (stringColor1, nodeBlock3) {\r\n        switch (stringColor1) {\r\n            case \"1\":\r\n                nodeBlock3.getComponent(\"OperateBlock\").stringColor = \"green\";\r\n                cc.log(\"1111111111111111111111\" + nodeBlock3.getComponent(\"OperateBlock\").stringColor);\r\n                break;\r\n            case \"2\":\r\n                nodeBlock3.getComponent(\"OperateBlock\").stringColor = \"blue\";\r\n                cc.log(\"22222222222222222222\" + nodeBlock3.getComponent(\"OperateBlock\").stringColor);\r\n\r\n                break;\r\n            case \"3\":\r\n                nodeBlock3.getComponent(\"OperateBlock\").stringColor = \"red\";\r\n                cc.log(\"3333333333333333333333\" + nodeBlock3.getComponent(\"OperateBlock\").stringColor);\r\n                break;\r\n            case \"4\":\r\n                nodeBlock3.getComponent(\"OperateBlock\").stringColor = \"yellow\";\r\n                cc.log(\"3333333333333333333333\" + nodeBlock3.getComponent(\"OperateBlock\").stringColor);\r\n                break;\r\n            case \"5\":\r\n                nodeBlock3.getComponent(\"OperateBlock\").stringColor = \"purple\";\r\n                cc.log(\"3333333333333333333333\" + nodeBlock3.getComponent(\"OperateBlock\").stringColor);\r\n                break;\r\n        }\r\n\r\n    },\r\n    //改变方块颜色\r\n    ChangeColor: function (stringColor1) {\r\n        if (this.isFirst == false) {\r\n            switch (this.nCreat) {\r\n                case 0:\r\n                    var nodeBlockChild = this.nodeBlock.getChildren();\r\n                    var self = this;\r\n                    cc.loader.loadRes(\"picture/\" + stringColor1, cc.SpriteFrame, function (err, txt) {\r\n                        for (var i = 0; i <= 3; i++) {\r\n                            nodeBlockChild[i].getComponent(cc.Sprite).spriteFrame = txt;\r\n                            if (i == 3) {\r\n                                //打开下落开关\r\n                                self.nodeBlock.getComponent(\"OperateBlock\").fDownTime = Global.nTimeInteval;\r\n                            }\r\n                        }\r\n                    });\r\n                    self.OnloadColor(stringColor1, self.nodeBlock);\r\n                    break;\r\n                case 1:\r\n                    var nodeBlockChild1 = this.nodeBlock1.getChildren();\r\n                    var self = this;\r\n                    cc.loader.loadRes(\"picture/\" + stringColor1, cc.SpriteFrame, function (err, txt) {\r\n                        for (var i = 0; i <= 3; i++) {\r\n                            nodeBlockChild1[i].getComponent(cc.Sprite).spriteFrame = txt;\r\n                        }\r\n                    });\r\n                    self.OnloadColor(stringColor1, self.nodeBlock1);\r\n                    break;\r\n                case 2:\r\n                    var nodeBlockChild2 = this.nodeBlock2.getChildren();\r\n                    var self = this;\r\n                    cc.loader.loadRes(\"picture/\" + stringColor1, cc.SpriteFrame, function (err, txt) {\r\n                        for (var i = 0; i <= 3; i++) {\r\n                            nodeBlockChild2[i].getComponent(cc.Sprite).spriteFrame = txt;\r\n                        }\r\n                    });\r\n                    self.OnloadColor(stringColor1, self.nodeBlock2);\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            var nodeBlockChild = this.nodeBlock.getChildren();\r\n            // var self=this;\r\n            var stringColor0 = \"\";\r\n            switch (this.nodeBlock.getComponent(\"OperateBlock\").stringColor) {\r\n                case \"red\":\r\n                    stringColor0 = \"3\";\r\n                    break;\r\n                case \"blue\":\r\n                    stringColor0 = \"2\";\r\n                    break;\r\n                case \"green\":\r\n                    stringColor0 = \"1\";\r\n                    break;\r\n                case \"yellow\":\r\n                    stringColor0 = \"4\";\r\n                    break;\r\n                case \"purple\":\r\n                    stringColor0 = \"5\";\r\n                    break;\r\n\r\n            }\r\n            cc.loader.loadRes(\"picture/\" + stringColor0, cc.SpriteFrame, function (err, txt) {\r\n                for (var i = 0; i <= 3; i++) {\r\n                    nodeBlockChild[i].getComponent(cc.Sprite).spriteFrame = txt;\r\n                }\r\n            });\r\n            var nodeBlockChild1 = this.nodeBlock1.getChildren();\r\n            var stringColor2 = \"\";\r\n            cc.log(this.nodeBlock2.getComponent(\"OperateBlock\").stringColor);\r\n            switch (this.nodeBlock1.getComponent(\"OperateBlock\").stringColor) {\r\n                case \"red\":\r\n                    stringColor2 = \"3\";\r\n                    break;\r\n                case \"blue\":\r\n                    stringColor2 = \"2\";\r\n                    break;\r\n                case \"green\":\r\n                    stringColor2 = \"1\";\r\n                    break;\r\n                case \"yellow\":\r\n                    stringColor2 = \"4\";\r\n                    break;\r\n                case \"purple\":\r\n                    stringColor2 = \"5\";\r\n                    break;\r\n\r\n            }\r\n            cc.log(stringColor2);\r\n            for (var i = 0; i <= nodeBlockChild1.length - 1; i++) {\r\n                nodeBlockChild1[i].active = false;\r\n            }\r\n            cc.loader.loadRes(\"picture/\" + stringColor2, cc.SpriteFrame, function (err, txt) {\r\n                for (var i = 0; i <= 3; i++) {\r\n                    nodeBlockChild1[i].getComponent(cc.Sprite).spriteFrame = txt;\r\n                    if (i == 3) {\r\n                        for (var j = 0; j <= nodeBlockChild1.length - 1; j++) {\r\n                            nodeBlockChild1[j].active = true;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            var nodeBlockChild2 = this.nodeBlock2.getChildren();\r\n            for (var i = 0; i <= nodeBlockChild2.length - 1; i++) {\r\n                nodeBlockChild2[i].active = false;\r\n            }\r\n            cc.loader.loadRes(\"picture/\" + stringColor1, cc.SpriteFrame, function (err, txt) {\r\n                for (var i = 0; i <= 3; i++) {\r\n                    nodeBlockChild2[i].getComponent(cc.Sprite).spriteFrame = txt;\r\n                    if (i == 3) {\r\n                        for (var j = 0; j <= nodeBlockChild2.length - 1; j++) {\r\n                            nodeBlockChild2[j].active = true;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n        }\r\n        // var self = this;\r\n        // var promise=new Promise(function(resolve,reject){\r\n        //     cc.loader.loadRes(\"picture/\"+stringColor1, cc.SpriteFrame, callback);\r\n        // })\r\n        // function callback(err, txt) {\r\n        //     if(err){\r\n        //         resolve();\r\n        //     }\r\n        //     for(var i=0;i<=3;i++)\r\n        //     {\r\n        //         nodeBlockChild[i].getComponent(cc.Sprite).spriteFrame =txt;\r\n        //         if(i==3)\r\n        //         {\r\n        //              //打开下落开关\r\n        //                this.nodeBlock.getComponent(\"OperateBlock\").fDownTime=Global.nTimeInteval;\r\n        //         }\r\n        //     }\r\n        // }\r\n    },\r\n    //判断方块形状\r\n    IsShape: function (stringShape, nShape) {\r\n        switch (stringShape[nShape]) {\r\n            case \"T\":\r\n                //生成方块\r\n                this.CopyBlock(this.prefabT, \"T\");\r\n                //判断方块颜色\r\n                this.IsColor(this.shapeBlock, this.nShape);\r\n                this.IsRotate(this.rotateBlock, this.nRotate, \"T\");\r\n                //  this.nRotateAngle   \r\n                break;\r\n            case \"L\":\r\n                this.CopyBlock(this.prefabL, \"L\");\r\n                //判断方块颜色\r\n                this.IsColor(this.shapeBlock, this.nShape);\r\n                this.IsRotate(this.rotateBlock, this.nRotate, \"L\");\r\n                break;\r\n            case \"Long\":\r\n                this.CopyBlock(this.prefabLong, \"Long\");\r\n                //判断方块颜色\r\n                this.IsColor(this.shapeBlock, this.nShape);\r\n\r\n                this.IsRotate(this.rotateBlock, this.nRotate, \"Long\");\r\n                break;\r\n            case \"Z\":\r\n                this.CopyBlock(this.prefabZ, \"Z\");\r\n                //判断方块颜色\r\n                this.IsColor(this.shapeBlock, this.nShape);\r\n                this.IsRotate(this.rotateBlock, this.nRotate, \"Z\");\r\n                break;\r\n            case \"Square\":\r\n                this.CopyBlock(this.prefabSquare, \"Square\");\r\n                //判断方块颜色\r\n                this.IsColor(this.shapeBlock, this.nShape);\r\n                this.IsRotate(this.rotateBlock, this.nRotate, \"Square\");\r\n                break;\r\n        }\r\n    },\r\n    //出生时根据角度改变子块位置\r\n    ChangeRotate: function (nAngle) {\r\n        if (this.isFirst == false) {\r\n            switch (this.nCreat) {\r\n                case 0:\r\n                    //获取此方块的数组\r\n                    var nodeBoxArray = this.nodeBlock.getChildren();\r\n                    if (nAngle == 180) {\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle = 180;\r\n                        for (var i = 0; i <= 3; i++) {\r\n                            nodeBoxArray[i].setPosition(cc.p(nodeBoxArray[i].y, -nodeBoxArray[i].x));\r\n                            if (i == 3) {\r\n                                for (var j = 0; j <= 3; j++) {\r\n                                    nodeBoxArray[j].setPosition(cc.p(nodeBoxArray[j].y, -nodeBoxArray[j].x));\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle = 0;\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    //获取此方块的数组\r\n                    var nodeBoxArray1 = this.nodeBlock1.getChildren();\r\n                    if (nAngle == 180) {\r\n                        cc.log(\"wwwwwwwwwwwwwwwwwwwwwwwwwwwww\" + this.nodeBlock1.getComponent(\"OperateBlock\").stringBoloekShape);\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").nRotateAngle = 180;\r\n                        for (var i = 0; i <= 3; i++) {\r\n                            cc.log(\"ddddddddddddddddddddddddddddddddddd\" + this.nodeBlock1.getComponent(\"OperateBlock\").stringBoloekShape);\r\n                            nodeBoxArray1[i].setPosition(cc.p(nodeBoxArray1[i].y, -nodeBoxArray1[i].x));\r\n                            if (i == 3) {\r\n                                for (var j = 0; j <= 3; j++) {\r\n                                    nodeBoxArray1[j].setPosition(cc.p(nodeBoxArray1[j].y, -nodeBoxArray1[j].x));\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").nRotateAngle = 0;\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    var nodeBoxArray2 = this.nodeBlock2.getChildren();\r\n                    if (nAngle == 180) {\r\n                        this.nodeBlock2.getComponent(\"OperateBlock\").nRotateAngle = 180;\r\n                        for (var i = 0; i <= 3; i++) {\r\n                            nodeBoxArray2[i].setPosition(cc.p(nodeBoxArray2[i].y, -nodeBoxArray2[i].x));\r\n                            if (i == 3) {\r\n                                for (var j = 0; j <= 3; j++) {\r\n                                    nodeBoxArray2[j].setPosition(cc.p(nodeBoxArray2[j].y, -nodeBoxArray2[j].x));\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.nodeBlock2.getComponent(\"OperateBlock\").nRotateAngle = 0;\r\n                    }\r\n                    break;\r\n            }\r\n            this.nCreat++;\r\n            if (this.nCreat == 3) {\r\n                this.nodeBlock.getComponent(\"OperateBlock\").isStartDown = true;\r\n                this.isFirst = true;\r\n            }\r\n        }\r\n        else {\r\n            cc.log(\"ddddddddddddddddddddddddddddddddddddd\");\r\n            cc.log(this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle + \"ccccccccccccccccccccccccccccccccccccc\");\r\n            var nodeBoxArray = this.nodeBlock.getChildren();\r\n            if (this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle == 180) {\r\n                for (var i = 0; i <= 3; i++) {\r\n                    nodeBoxArray[i].setPosition(cc.p(nodeBoxArray[i].y, -nodeBoxArray[i].x));\r\n                    if (i == 3) {\r\n                        for (var j = 0; j <= 3; j++) {\r\n                            nodeBoxArray[j].setPosition(cc.p(nodeBoxArray[j].y, -nodeBoxArray[j].x));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            var nodeBoxArray1 = this.nodeBlock1.getChildren();\r\n            if (this.nodeBlock1.getComponent(\"OperateBlock\").nRotateAngle == 180) {\r\n                //     cc.log(\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\");\r\n                //    this.nodeBlock1.getComponent(\"OperateBlock\").nRotateAngle=180;\r\n                for (var i = 0; i <= 3; i++) {\r\n                    nodeBoxArray1[i].setPosition(cc.p(nodeBoxArray1[i].y, -nodeBoxArray1[i].x));\r\n                    if (i == 3) {\r\n                        for (var j = 0; j <= 3; j++) {\r\n                            nodeBoxArray1[j].setPosition(cc.p(nodeBoxArray1[j].y, -nodeBoxArray1[j].x));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            var nodeBoxArray2 = this.nodeBlock2.getChildren();\r\n            if (nAngle == 180) {\r\n                for (var i = 0; i <= 3; i++) {\r\n                    nodeBoxArray2[i].setPosition(cc.p(nodeBoxArray2[i].y, -nodeBoxArray2[i].x));\r\n                    if (i == 3) {\r\n                        for (var j = 0; j <= 3; j++) {\r\n                            nodeBoxArray2[j].setPosition(cc.p(nodeBoxArray2[j].y, -nodeBoxArray2[j].x));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.nodeBlock.getComponent(\"OperateBlock\").isStartDown = true;\r\n        }\r\n    },\r\n    //遍历俄罗斯方块并旋转\r\n    TraverseRotate: function () {\r\n        //获取此方块的数组\r\n        var nodeBoxArray = this.nodeBlock.getChildren();\r\n        //判断俄罗斯方块旋转之后是否含有方块\r\n        var isHasBox = false;\r\n        //判断俄罗斯方块旋转之后是否超过墙\r\n        var isOutWall = false;\r\n        //判断俄罗斯方块旋转之后是否超过背景的上方或下方、\r\n        var isOutGround = false;\r\n        //存储俄罗斯方块未旋转前的行列\r\n        var nRowY = [];\r\n        var nLineX = [];\r\n        //存入俄罗斯方块旋转后子元素的行和列\r\n        var arrayX = [];\r\n        var arrayY = [];\r\n        //将俄罗斯方块的行数从小到大排列\r\n        for (var j = 0; j <= 3; j++) {\r\n            var nX1 = (nodeBoxArray[j].x + this.nodeBlock.x - this.groundParent.x) / Global.nWidth + 1;\r\n            var nY1 = (nodeBoxArray[j].y + this.nodeBlock.y - this.groundParent.y) / Global.nWidth + 1;\r\n            nLineX.push(nX1);\r\n            nRowY.push(nY1);\r\n            if (j == 3) {\r\n                for (var k = 0; k <= 3; k++) {\r\n                    if (k <= 2) {\r\n                        for (var l = k + 1; l <= 3; l++) {\r\n                            if (nRowY[l] < nRowY[k]) {\r\n                                var oldX = nLineX[k];\r\n                                nLineX[k] = nLineX[l];\r\n                                nLineX[l] = oldX;\r\n                                var oldY = nRowY[k];\r\n                                nRowY[k] = nRowY[l];\r\n                                nRowY[l] = oldY;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (this.nodeBlock.getComponent(\"OperateBlock\").stringBoloekShape == \"Long\") {\r\n            if (nRowY[0] == 21) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            if (nRowY[0] >= 19) {\r\n                return;\r\n            }\r\n        }\r\n        for (var i = 0; i <= 3; i++) {\r\n            //判断旋转的字块是否为原点\r\n            var isZero = false;\r\n            //获取旋转后的坐标 \r\n            var v2RotateX = nodeBoxArray[i].y;\r\n            var v2RotateY = -nodeBoxArray[i].x;\r\n            //当旋转后的坐标与旋转前的坐标相同时\r\n            if (v2RotateX == nodeBoxArray[i].x && v2RotateY == nodeBoxArray[i].y) {\r\n                //将旋转前的方块置为false\r\n                var nX1 = (nodeBoxArray[i].x + this.nodeBlock.x - this.groundParent.x) / Global.nWidth + 1;\r\n                var nY1 = (nodeBoxArray[i].y + this.nodeBlock.y - this.groundParent.y) / Global.nWidth + 1;\r\n                if (nY1 - 1 >= 0 && nY1 - 1 <= 19) {\r\n                    nLineX.push(nX1);\r\n                    nRowY.push(nY1);\r\n                    // this.groundChild[nX1 - 1][nY1 - 1].getComponent(\"PrefabState\").isBox = false;\r\n                }\r\n                isZero = true;\r\n            }\r\n            else {\r\n                //将旋转前的方块置为false\r\n                var nX1 = (nodeBoxArray[i].x + this.nodeBlock.x - this.groundParent.x) / Global.nWidth + 1;\r\n                var nY1 = (nodeBoxArray[i].y + this.nodeBlock.y - this.groundParent.y) / Global.nWidth + 1;\r\n                if (nY1 - 1 >= 0 && nY1 - 1 <= 19) {\r\n                    nLineX.push(nX1);\r\n                    nRowY.push(nY1);\r\n                    // this.groundChild[nX1 - 1][nY1 - 1].getComponent(\"PrefabState\").isBox = false;\r\n                }\r\n            }\r\n            // //旋转坐标\r\n            // nodeBoxArray[i].setPosition(cc.p(nodeBoxArray[i].y,-nodeBoxArray[i].x));\r\n            //获取旋转后组成俄罗斯方块元素的行列\r\n            var nX = (v2RotateX + this.nodeBlock.x - this.groundParent.x) / Global.nWidth + 1;\r\n            var nY = (v2RotateY + this.nodeBlock.y - this.groundParent.y) / Global.nWidth + 1;\r\n            arrayX.push(nX);\r\n            arrayY.push(nY);\r\n            //当俄罗斯方块旋转后超过场景上方或下方时\r\n            if (nY > 20 || nY < 1) {\r\n                isOutGround = true;\r\n            }\r\n            //当超出墙壁时\r\n            if (nX > 10 || nX < 1) {\r\n                isOutWall = true;\r\n            }\r\n            else {\r\n                if (isOutGround == false) {\r\n                    if (this.groundChild[nX - 1][nY - 1].getComponent(\"PrefabState\").isBox && isZero == false) {\r\n                        isHasBox = true;\r\n                    }\r\n                }\r\n            }\r\n            if (i == 3) {\r\n                if (isHasBox == false && isOutWall == false && isOutGround == false) {\r\n                    //旋转俄罗斯方块\r\n                    for (var i = 0; i <= 3; i++) {\r\n                        //  var nX=(nodeBoxArray[i].x+this.nodeBlock.x-cc.find(\"GroundParent\").x)/65+1;\r\n                        //  var nY=(nodeBoxArray[i].y+this.nodeBlock.y-cc.find(\"GroundParent\").y)/65+1; \r\n                        //  this.groundChild[nX-1][nY-1].getComponent(\"PrefabState\").isBox=false;\r\n                        nodeBoxArray[i].setPosition(cc.p(nodeBoxArray[i].y, -nodeBoxArray[i].x));\r\n                        var nX1 = (nodeBoxArray[i].x + this.nodeBlock.x - this.groundParent.x) / Global.nWidth + 1;\r\n                        var nY1 = (nodeBoxArray[i].y + this.nodeBlock.y - this.groundParent.y) / Global.nWidth + 1;\r\n                        // this.groundChild[nX1 - 1][nY1 - 1].getComponent(\"PrefabState\").isBox = true;\r\n                    }\r\n                    //初始化 1s计时器\r\n                    this.nodeBlock.getComponent(\"OperateBlock\").fCollisionTime = 0;\r\n                    this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle += 90;\r\n                    if (this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle == 360) {\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle = 0;\r\n                    }\r\n                }\r\n                if (isHasBox) {\r\n                    // //将置为false的方块还原属性\r\n                    // for (var i = 0; i <= nLineX.length - 1; i++) {\r\n                    //     this.groundChild[nLineX[i] - 1][nRowY[i] - 1].getComponent(\"PrefabState\").isBox = true;\r\n                    // }\r\n                }\r\n                //当旋转以后超过游戏场景上方或下方\r\n                if (isOutGround) {\r\n                    for (var j = 0; j <= 3; j++) {\r\n                        if (j == 3) {\r\n                            //将旋转后的行数从小到大排列\r\n                            for (var k = 0; k <= 3; k++) {\r\n                                if (k <= 2) {\r\n                                    for (var l = k + 1; l <= 3; l++) {\r\n                                        if (arrayY[l] < arrayY[k]) {\r\n                                            var oldX = arrayX[k];\r\n                                            arrayX[k] = arrayX[l];\r\n                                            arrayX[l] = oldX;\r\n\r\n                                            var oldY = arrayY[k];\r\n                                            arrayY[k] = arrayY[l];\r\n                                            arrayY[l] = oldY;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                if (k == 3) {\r\n\r\n                                    if (arrayY[3] > 20) {\r\n                                        //向下移动的单位个数\r\n                                        var nMove = arrayY[3] - 20;\r\n                                        //存取移动后的行 ，列\r\n                                        var nMoveX = [];\r\n                                        var nMoveY = [];\r\n                                        //存取移动过后的位置\r\n                                        var arrayMoveX = [];\r\n                                        var arrayMoveY = [];\r\n                                        //判断旋转移动后是否有方块\r\n                                        var isHasBox = false;\r\n                                        for (var l = 0; l <= 3; l++) {\r\n                                            //  //获取旋转前的行列\r\n                                            //  var nX0=(nodeBoxArray[i].x+this.nodeBlock.x-cc.find(\"GroundParent\").x)/65+1;\r\n                                            //  var nY0=(nodeBoxArray[i].y+this.nodeBlock.y-cc.find(\"GroundParent\").y)/65+1;\r\n                                            //  this.groundChild[nX0-1][nY0-1].getComponent(\"PrefabState\").isBox=false;\r\n                                            //获取旋转后的坐标 \r\n                                            var v2RotateX = nodeBoxArray[l].y;\r\n                                            var v2RotateY = -nodeBoxArray[l].x;\r\n                                            // //获取移动后的坐标\r\n                                            var v2RotateY1 = v2RotateY - Global.nWidth * nMove;\r\n                                            //获取移动后俄罗斯方块元素的行列\r\n                                            var nX1 = (v2RotateX + this.nodeBlock.x - this.groundParent.x) / Global.nWidth + 1;\r\n\r\n                                            var nY1 = (v2RotateY1 + this.nodeBlock.y - this.groundParent.y) / Global.nWidth + 1;\r\n\r\n                                            if (this.groundChild[nX1 - 1][nY1 - 1].getComponent(\"PrefabState\").isBox) {\r\n                                                isHasBox = true;\r\n                                            }\r\n                                            //获取本地坐标\r\n                                            var positionX = v2RotateX;\r\n                                            var positionY = v2RotateY1;\r\n                                            arrayMoveX.push(positionX);\r\n                                            arrayMoveY.push(positionY);\r\n                                            //  nodeBoxArray[i].setPosition(cc.p(positionX,positionY));\r\n                                            nMoveX.push(nX1);\r\n                                            nMoveY.push(nY1);\r\n                                            if (l == 3) {\r\n                                                if (isHasBox) {\r\n\r\n                                                    // //还原未旋转移动前的box的true属性\r\n                                                    // for (var j = 0; j <= 3; j++) {\r\n                                                    //     this.groundChild[nLineX[j] - 1][nRowY[j] - 1].getComponent(\"PrefabState\").isBox = true;\r\n                                                    // }\r\n                                                    return;\r\n                                                }\r\n                                                else {\r\n                                                    //初始化 1s计时器\r\n                                                    this.nodeBlock.getComponent(\"OperateBlock\").fCollisionTime = 0;\r\n                                                    this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle += 90;\r\n                                                    if (this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle == 360) {\r\n                                                        this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle = 0;\r\n                                                    }\r\n                                                    for (var i = 0; i <= 3; i++) {\r\n                                                        //获取旋转后的坐标 \r\n                                                        var v2RotateX = nodeBoxArray[i].y;\r\n                                                        var v2RotateY = -nodeBoxArray[i].x;\r\n                                                        nodeBoxArray[i].setPosition(cc.p(v2RotateX, v2RotateY));\r\n                                                        if (i == 3) {\r\n                                                            this.nodeBlock.y -= Global.nWidth * nMove;\r\n                                                        }\r\n                                                        // //将旋转移动后的方块置为true\r\n                                                        // this.groundChild[nMoveX[i] - 1][nMoveY[i] - 1].getComponent(\"PrefabState\").isBox = true;\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    if (arrayY[0] < 1) {\r\n                                        //向上移动的单位个数\r\n                                        var nMove = 1 - arrayY[0];\r\n                                        //存取移动后的行 ，列\r\n                                        var nMoveX = [];\r\n                                        var nMoveY = [];\r\n                                        //存取移动过后的位置\r\n                                        var arrayMoveX = [];\r\n                                        var arrayMoveY = [];\r\n                                        //判断旋转移动后是否有方块\r\n                                        var isHasBox = false;\r\n                                        for (var l = 0; l <= 3; l++) {\r\n                                            //获取旋转后的坐标 \r\n                                            var v2RotateX = nodeBoxArray[l].y;\r\n                                            var v2RotateY = -nodeBoxArray[l].x;\r\n                                            //获取移动后的坐标\r\n                                            var v2RotateY1 = v2RotateY + Global.nWidth * nMove;\r\n                                            //获取移动后俄罗斯方块元素的行列\r\n                                            var nX1 = (v2RotateX + this.nodeBlock.x - this.groundParent.x) / Global.nWidth + 1;\r\n                                            var nY1 = (v2RotateY1 + this.nodeBlock.y - this.groundParent.y) / Global.nWidth + 1;\r\n\r\n                                            if (this.groundChild[nX1 - 1][nY1 - 1].getComponent(\"PrefabState\").isBox) {\r\n                                                isHasBox = true;\r\n                                            }\r\n                                            //获取本地坐标\r\n                                            var positionX = v2RotateX;\r\n                                            var positionY = v2RotateY1;\r\n                                            arrayMoveX.push(positionX);\r\n                                            arrayMoveY.push(positionY);\r\n                                            //  nodeBoxArray[i].setPosition(cc.p(positionX,positionY));\r\n                                            nMoveX.push(nX1);\r\n                                            nMoveY.push(nY1);\r\n                                            if (l == 3) {\r\n                                                if (isHasBox) {\r\n                                                    // //还原未旋转移动前的box的true属性\r\n                                                    // for (var j = 0; j <= 3; j++) {\r\n                                                    //     this.groundChild[nLineX[j] - 1][nRowY[j] - 1].getComponent(\"PrefabState\").isBox = true;\r\n                                                    // }\r\n                                                    return;\r\n                                                }\r\n                                                else {\r\n                                                    //初始化 1s计时器\r\n                                                    this.nodeBlock.getComponent(\"OperateBlock\").fCollisionTime = 0;\r\n                                                    this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle += 90;\r\n                                                    if (this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle == 360) {\r\n                                                        this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle = 0;\r\n                                                    }\r\n                                                    for (var i = 0; i <= 3; i++) {\r\n                                                        //获取旋转后的坐标 \r\n                                                        var v2RotateX = nodeBoxArray[i].y;\r\n                                                        var v2RotateY = -nodeBoxArray[i].x;\r\n                                                        nodeBoxArray[i].setPosition(cc.p(v2RotateX, v2RotateY));\r\n                                                        if (i == 3) {\r\n                                                            this.nodeBlock.y += Global.nWidth * nMove;\r\n                                                        }\r\n                                                        // //将旋转移动后的方块置为true\r\n                                                        // this.groundChild[nMoveX[i] - 1][nMoveY[i] - 1].getComponent(\"PrefabState\").isBox = true;\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                }\r\n                //当旋转以后超过墙时\r\n                if (isOutWall) {\r\n                    for (var j = 0; j <= 3; j++) {\r\n                        if (j == 3) {\r\n                            //将旋转后的列数从小到大排列\r\n                            for (var k = 0; k <= 3; k++) {\r\n                                if (k <= 2) {\r\n                                    for (var l = k + 1; l <= 3; l++) {\r\n                                        if (arrayX[l] < arrayX[k]) {\r\n                                            var oldX = arrayX[k];\r\n                                            arrayX[k] = arrayX[l];\r\n                                            arrayX[l] = oldX;\r\n                                            var oldY = arrayY[k];\r\n                                            arrayY[k] = arrayY[l];\r\n                                            arrayY[l] = oldY;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                if (k == 3) {\r\n                                    cc.log(arrayX);\r\n                                    if (arrayX[3] > 10) {\r\n                                        cc.log(\"777777777777777777777777\");\r\n                                        //向左移动的单位个数\r\n                                        var nMove = arrayX[3] - 10;\r\n                                        //存取移动后的行 ，列\r\n                                        var nMoveX = [];\r\n                                        var nMoveY = [];\r\n                                        //存取移动过后的位置\r\n                                        var arrayMoveX = [];\r\n                                        var arrayMoveY = [];\r\n                                        //判断旋转移动后是否有方块\r\n                                        var isHasBox = false;\r\n                                        for (var l = 0; l <= 3; l++) {\r\n                                            //  //获取旋转前的行列\r\n                                            //  var nX0=(nodeBoxArray[i].x+this.nodeBlock.x-cc.find(\"GroundParent\").x)/65+1;\r\n                                            //  var nY0=(nodeBoxArray[i].y+this.nodeBlock.y-cc.find(\"GroundParent\").y)/65+1;\r\n                                            //  this.groundChild[nX0-1][nY0-1].getComponent(\"PrefabState\").isBox=false;\r\n                                            //获取旋转后的坐标 \r\n                                            var v2RotateX = nodeBoxArray[l].y;\r\n                                            var v2RotateY = -nodeBoxArray[l].x;\r\n                                            //获取移动后的坐标\r\n                                            var v2RotateX1 = v2RotateX - Global.nWidth * nMove;\r\n                                            //获取移动后俄罗斯方块元素的行列\r\n                                            var nX1 = (v2RotateX1 + this.nodeBlock.x - this.groundParent.x) / Global.nWidth + 1;\r\n\r\n                                            var nY1 = (v2RotateY + this.nodeBlock.y - this.groundParent.y) / Global.nWidth + 1;\r\n                                            if (this.groundChild[nX1 - 1][nY1 - 1].getComponent(\"PrefabState\").isBox) {\r\n                                                cc.log(\"666666666666\");\r\n                                                isHasBox = true;\r\n                                            }\r\n                                            //获取本地坐标\r\n                                            var positionX = v2RotateX1;\r\n                                            var positionY = v2RotateY;\r\n                                            arrayMoveX.push(positionX);\r\n                                            arrayMoveY.push(positionY);\r\n                                            //  nodeBoxArray[i].setPosition(cc.p(positionX,positionY));\r\n                                            nMoveX.push(nX1);\r\n                                            nMoveY.push(nY1);\r\n                                            if (l == 3) {\r\n                                                if (isHasBox) {\r\n                                                    // //还原未旋转移动前的box的true属性\r\n                                                    // for (var j = 0; j <= 3; j++) {\r\n                                                    //     this.groundChild[nLineX[j] - 1][nRowY[j] - 1].getComponent(\"PrefabState\").isBox = true;\r\n                                                    // }\r\n                                                    return;\r\n                                                }\r\n                                                else {\r\n                                                    cc.log(\"55555555555\");\r\n                                                    //初始化 1s计时器\r\n                                                    this.nodeBlock.getComponent(\"OperateBlock\").fCollisionTime = 0;\r\n                                                    this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle += 90;\r\n                                                    if (this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle == 360) {\r\n                                                        this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle = 0;\r\n                                                    }\r\n                                                    for (var i = 0; i <= 3; i++) {\r\n                                                        //获取旋转后的坐标 \r\n                                                        var v2RotateX = nodeBoxArray[i].y;\r\n                                                        var v2RotateY = -nodeBoxArray[i].x;\r\n                                                        nodeBoxArray[i].setPosition(cc.p(v2RotateX, v2RotateY));\r\n                                                        if (i == 3) {\r\n                                                            this.nodeBlock.x -= Global.nWidth * nMove;\r\n                                                        }\r\n                                                        // //将旋转移动后的方块置为true\r\n                                                        // this.groundChild[nMoveX[i] - 1][nMoveY[i] - 1].getComponent(\"PrefabState\").isBox = true;\r\n                                                    }\r\n\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    if (arrayX[0] < 1) {\r\n                                        //向右移动的单位个数\r\n                                        var nMove = 1 - arrayX[0];\r\n                                        //存取移动后的行 ，列\r\n                                        var nMoveX = [];\r\n                                        var nMoveY = [];\r\n                                        //存取移动过后的位置\r\n                                        var arrayMoveX = [];\r\n                                        var arrayMoveY = [];\r\n                                        //判断旋转移动后是否有方块\r\n                                        var isHasBox = false;\r\n                                        for (var l = 0; l <= 3; l++) {\r\n                                            //获取旋转后的坐标 \r\n                                            var v2RotateX = nodeBoxArray[l].y;\r\n                                            var v2RotateY = -nodeBoxArray[l].x;\r\n                                            //获取移动后的坐标\r\n                                            var v2RotateX1 = v2RotateX + Global.nWidth * nMove;\r\n\r\n                                            //获取移动后俄罗斯方块元素的行列\r\n                                            var nX1 = (v2RotateX1 + this.nodeBlock.x - this.groundParent.x) / Global.nWidth + 1;\r\n\r\n                                            var nY1 = (v2RotateY + this.nodeBlock.y - this.groundParent.y) / Global.nWidth + 1;\r\n                                            if (this.groundChild[nX1 - 1][nY1 - 1].getComponent(\"PrefabState\").isBox) {\r\n                                                isHasBox = true;\r\n                                            }\r\n                                            //获取本地坐标\r\n                                            var positionX = v2RotateX1;\r\n                                            var positionY = v2RotateY;\r\n                                            arrayMoveX.push(positionX);\r\n                                            arrayMoveY.push(positionY);\r\n                                            //  nodeBoxArray[i].setPosition(cc.p(positionX,positionY));\r\n                                            nMoveX.push(nX1);\r\n                                            nMoveY.push(nY1);\r\n                                            if (l == 3) {\r\n                                                if (isHasBox) {\r\n                                                    // //还原未旋转移动前的box的true属性\r\n                                                    // for (var j = 0; j <= 3; j++) {\r\n                                                    //     this.groundChild[nLineX[j] - 1][nRowY[j] - 1].getComponent(\"PrefabState\").isBox = true;\r\n                                                    // }\r\n                                                    return;\r\n                                                }\r\n                                                else {\r\n                                                    //初始化 1s计时器\r\n                                                    this.nodeBlock.getComponent(\"OperateBlock\").fCollisionTime = 0;\r\n                                                    this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle += 90;\r\n                                                    if (this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle == 360) {\r\n                                                        this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle = 0;\r\n                                                    }\r\n                                                    for (var i = 0; i <= 3; i++) {\r\n                                                        //获取旋转后的坐标 \r\n                                                        var v2RotateX = nodeBoxArray[i].y;\r\n                                                        var v2RotateY = -nodeBoxArray[i].x;\r\n                                                        nodeBoxArray[i].setPosition(cc.p(v2RotateX, v2RotateY));\r\n                                                        if (i == 3) {\r\n                                                            this.nodeBlock.x += Global.nWidth * nMove;\r\n                                                        }\r\n                                                        // //将旋转移动后的方块置为true\r\n                                                        // this.groundChild[nMoveX[i] - 1][nMoveY[i] - 1].getComponent(\"PrefabState\").isBox = true;\r\n                                                    }\r\n\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    // //初始化俄罗斯方块旋转角度\r\n    // OnloadRotate:function(stringRotate,nRotate){\r\n    // },\r\n    //判断方块角度\r\n    IsRotate: function (stringRotate, nRotate, stringShape2) {\r\n        if (stringShape2 != \"Square\") {\r\n            switch (stringRotate[nRotate]) {\r\n                case \"0\":\r\n                    this.ChangeRotate(0);\r\n                    break;\r\n                case \"180\":\r\n                    this.ChangeRotate(180);\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            //  this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle=0;\r\n            switch (this.nCreat) {\r\n                case 0:\r\n                    this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle = 0;\r\n                    break;\r\n                case 1:\r\n                    this.nodeBlock1.getComponent(\"OperateBlock\").nRotateAngle = 0;\r\n                    break;\r\n                case 2:\r\n                    this.nodeBlock2.getComponent(\"OperateBlock\").nRotateAngle = 0;\r\n                    break;\r\n            }\r\n            if (this.isFirst) {\r\n                var nodeBoxArray = this.nodeBlock.getChildren();\r\n                cc.log(\"ppppppppppppppppppppppppppppppppppppppp\" + this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle);\r\n                if (this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle == 180) {\r\n                    cc.log(\"qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\" + this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle);\r\n                    for (var i = 0; i <= 3; i++) {\r\n                        nodeBoxArray[i].setPosition(cc.p(nodeBoxArray[i].y, -nodeBoxArray[i].x));\r\n                        if (i == 3) {\r\n                            for (var j = 0; j <= 3; j++) {\r\n                                nodeBoxArray[j].setPosition(cc.p(nodeBoxArray[j].y, -nodeBoxArray[j].x));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                var nodeBoxArray1 = this.nodeBlock1.getChildren();\r\n                if (this.nodeBlock1.getComponent(\"OperateBlock\").nRotateAngle == 180) {\r\n                    //     cc.log(\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\");\r\n                    //    this.nodeBlock1.getComponent(\"OperateBlock\").nRotateAngle=180;\r\n                    for (var i = 0; i <= 3; i++) {\r\n                        nodeBoxArray1[i].setPosition(cc.p(nodeBoxArray1[i].y, -nodeBoxArray1[i].x));\r\n                        if (i == 3) {\r\n                            for (var j = 0; j <= 3; j++) {\r\n                                nodeBoxArray1[j].setPosition(cc.p(nodeBoxArray1[j].y, -nodeBoxArray1[j].x));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                var nodeBoxArray2 = this.nodeBlock2.getChildren();\r\n                if (parseInt(stringRotate[nRotate]) == 180) {\r\n                    for (var i = 0; i <= 3; i++) {\r\n                        nodeBoxArray2[i].setPosition(cc.p(nodeBoxArray2[i].y, -nodeBoxArray2[i].x));\r\n                        if (i == 3) {\r\n                            for (var j = 0; j <= 3; j++) {\r\n                                nodeBoxArray2[j].setPosition(cc.p(nodeBoxArray2[j].y, -nodeBoxArray2[j].x));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                this.nodeBlock.getComponent(\"OperateBlock\").isStartDown = true;\r\n            }\r\n            this.nCreat++;\r\n            if (this.nCreat == 3) {\r\n                this.nodeBlock.getComponent(\"OperateBlock\").isStartDown = true;\r\n                this.isFirst = true;\r\n            }\r\n        }\r\n    },\r\n    //随机生成俄罗斯方块\r\n    GetBlock: function () {\r\n        //声明颜色数组\r\n        this.colorBlock = [\"blue\", \"green\", \"red\"];\r\n        //声明形状数组\r\n        this.shapeBlock = [\"T\", \"L\", \"Long\", \"Z\", \"Square\"];\r\n        //声明角度数组\r\n        this.rotateBlock = [\"0\", \"180\"];\r\n        this.nColor = Math.floor(cc.random0To1() * 3);\r\n        this.nShape = Math.floor(cc.random0To1() * 5);\r\n        this.nRotate = Math.floor(cc.random0To1() * 2);\r\n        //初始化声称俄罗斯方块的个数\r\n        if (this.isFirst == false) {\r\n            //根据俄罗斯方块形状生成\r\n            this.IsShape(this.shapeBlock, this.nShape);\r\n            this.nRotate = Math.floor(cc.random0To1() * 2);\r\n            this.nColor = Math.floor(cc.random0To1() * 3);\r\n            this.nShape = Math.floor(cc.random0To1() * 5);\r\n            // this.nShape = 1;\r\n            // this.nRotate = 1;\r\n            //根据俄罗斯方块形状生成下一个\r\n            this.IsShape(this.shapeBlock, this.nShape);\r\n            this.nRotate = Math.floor(cc.random0To1() * 2);\r\n            this.nColor = Math.floor(cc.random0To1() * 3);\r\n            this.nShape = Math.floor(cc.random0To1() * 5);\r\n            //根据俄罗斯方块形状生成\r\n            this.IsShape(this.shapeBlock, this.nShape);\r\n        }\r\n        else {\r\n            //根据俄罗斯方块形状生成\r\n            this.IsShape(this.shapeBlock, this.nShape);\r\n        }\r\n    },\r\n    //获取子块在地板父体下的坐标\r\n    GetBoxNode: function (childBox) {\r\n        //获取子块在地板附体下的行列\r\n        var nX = (childBox.x + this.nodeBlock.x - this.groundParent.x) / Global.nWidth + 1;\r\n        var nY = (childBox.y + this.nodeBlock.y - this.groundParent.y) / Global.nWidth + 1;\r\n        cc.log(nX);\r\n        cc.log(nY);\r\n        var x = this.groundChild[nX - 1][nY - 1].x;\r\n        var y = this.groundChild[nX - 1][nY - 1].y;\r\n        return cc.p(x, y);\r\n    },\r\n    //遍历全局字块数组并消除整行方块isBox都为true的节点\r\n    TraversalNodeBox: function (nPositionY) {\r\n        // var boxParent1=this.boxParent.getChildren();\r\n        var nLength = this.boxParent1.length;\r\n        //存储被销毁的俄罗斯方块数组的下标\r\n        var nDestroy = [];\r\n        cc.log(nPositionY + \"nPositionY\");\r\n        for (var j = 0; j <= nLength - 1; j++) {\r\n            cc.log(this.boxParent1[j].y);\r\n        }\r\n        //    cc.log(boxParent1[0].y);\r\n        //    cc.log(nPositionY);\r\n        for (var i = 0; i <= nLength - 1; i++) {\r\n            // var boxParent1=this.boxParent.getChildren();\r\n            if (this.boxParent1[i].y == nPositionY) {\r\n                //销毁该俄罗斯方块自方块\r\n                this.boxParent1[i].destroy();\r\n            }\r\n        }\r\n    },\r\n    //快速下落\r\n    DownQuick: function () {\r\n        if (this.nodeBlock.getComponent(\"OperateBlock\").isCollision == false) {\r\n\r\n            this.nodeBlock.getComponent(\"OperateBlock\").fDownTime = Global.nTimeInteval;\r\n        }\r\n        else {\r\n            this.nodeBlock.getComponent(\"OperateBlock\").bCollisionOne = true;\r\n        }\r\n    },\r\n    //遍历全局字块数组并将最高消层数以上的方块下落\r\n    /**\r\n     * @param  {Number} nMaxDisappea 最大的消行行数\r\n     * @param  {Number} nDisappearAll 上面方块的下落层数\r\n     */\r\n    BoxDown: function (nMaxDisappea, nDisappearAll) {\r\n        for (var i = nMaxDisappea + 1; i <= 19; i++) {\r\n            for (var j = 0; j <= 9; j++) {\r\n                if (this.groundChild[j][i].getComponent(\"PrefabState\").isBox) {\r\n                    for (var l = 0; l <= this.boxParent1.length - 1; l++) {\r\n                        if (this.boxParent1[l].y == this.groundChild[j][i].y && this.boxParent1[l].x == this.groundChild[j][i].x) {\r\n                            this.boxParent1[l].setPosition(cc.p(this.groundChild[j][i].x, this.groundChild[j][i].y - Global.nWidth * nDisappearAll));\r\n                        }\r\n                    }\r\n                    //下落过的方块对应的背景方格的状态改为未被占用\r\n                    this.groundChild[j][i].getComponent(\"PrefabState\").isBox = false;\r\n                    //下面的方块对应的背景方格的状态改为true\r\n                    this.groundChild[j][i - nDisappearAll].getComponent(\"PrefabState\").isBox = true;\r\n                }\r\n            }\r\n        }\r\n    },\r\n    //遍历游戏场景的字块中的isBox属性是否为true,并消除代码\r\n    DisappearBox: function () {\r\n        //初始化消行行数\r\n        var nDisappear = [];\r\n        for (var i = 0; i <= 19; i++) {\r\n            var nTrue = 0;\r\n            for (var j = 0; j <= 9; j++) {\r\n                // if (j == 0) {\r\n                //     //判断i行有多少个true\r\n                //     nTrue = 0;\r\n                // }\r\n                if (this.groundChild[j][i].getComponent(\"PrefabState\").isBox) {\r\n                    nTrue++;\r\n                }\r\n                if (j == 9) {\r\n                    for (var a = 0; a <= 9; a++) {\r\n                        console.log(this.groundChild[a][i].getComponent(\"PrefabState\").isBox);\r\n                    }\r\n                    if (nTrue == 10) {\r\n                        console.log(\"ppppppppppppppppppppppppppppppppppppp\");\r\n                        this.playAudio(this.removeAudio);\r\n                        //遍历全局字块数组并消除整行方块isBox都为true的节点\r\n                        this.TraversalNodeBox(this.groundChild[j][i].y);\r\n                        //将消除的方块的isBox重置false\r\n                        for (var k = 0; k <= 9; k++) {\r\n                            this.groundChild[k][i].getComponent(\"PrefabState\").isBox = false;\r\n                        }\r\n                        nDisappear.push(i);\r\n                    }\r\n                    if (i == 19 && nDisappear.length != 0) {\r\n                        console.log(\"消行个数是：\",nDisappear.length);\r\n                        //当消行层总数为1行是\r\n                        if (nDisappear.length == 1) {\r\n                            //下落方法\r\n                            this.BoxDown(nDisappear[0], nDisappear.length);\r\n                        }\r\n                        else {\r\n                            // 从小到大排序行数获得最大的消行行数\r\n                            for (var k = 0; k <= nDisappear.length - 1; k++) {\r\n                                for (var l = k + 1; l <= nDisappear.length - 1; l++) {\r\n                                    if (k <= 2) {\r\n                                        if (nDisappear[l] < nDisappear[k]) {\r\n                                            var nMin = nDisappear[k];\r\n                                            nDisappear[k] = nDisappear[l];\r\n                                            nDisappear[l] = nMin;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            console.log(\"消行个数是：\",nDisappear.length);\r\n                            // let disappearLength = nDisappear.length;\r\n                            // nDisappear.forEach(element=>{\r\n                            //     this.BoxDown(element,nDisappear);\r\n                            // })\r\n                            //参数：消行层数大于最大的行，以及上面方块的下落层数\r\n                            this.BoxDown(nDisappear[nDisappear.length - 1], nDisappear.length);\r\n                        }\r\n                        this.ShowScore(nDisappear.length, this.nodeScore1); \r\n                        console.log(nDisappear.length + \"DisappearBox\");\r\n                        this.disappearAll += nDisappear.length;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    //获取俄罗斯方块的列数\r\n    GetBlockLine: function () {\r\n        var nLine = (this.nodeBlock.x - this.groundParent.x) / Global.nWidth + 1;\r\n        return nLine;\r\n    },\r\n    getTouchLine : function(buttonNode,worldPosition){\r\n        console.log(\"进入我的方法了\");\r\n        //将触点的x坐标转化为本地坐标系\r\n        var localX = buttonNode.convertToNodeSpaceAR(cc.v2(worldPosition.x,worldPosition.y)).x;\r\n        cc.log(\"local is \" + localX);\r\n        if(localX > 0){\r\n             var n1 = Math.floor(localX/(buttonNode.width/10));\r\n             if(n1 >= 0 && n1 < 1){\r\n                this.nCol = 6;\r\n             }else if(n1 >= 1 && n1 < 2){\r\n                 this.nCol = 7;\r\n             }else if(n1 >= 2 && n1 < 3){\r\n                 this.nCol = 8;\r\n             }else if(n1 >= 3 && n1 < 4){\r\n                 this.nCol = 9;\r\n             }else if(n1 >= 4 && n1 < 5){\r\n                 this.nCol = 10;\r\n             }\r\n        }else if(localX < 0){\r\n            var n2 = Math.floor(-localX/(buttonNode.width/10));\r\n            if(n2 >= 0 && n2 < 1){\r\n               this.nCol = 5;\r\n           }else if(n2 >= 1 && n2 < 2){\r\n               this.nCol = 4;\r\n           }else if(n2 >= 2 && n2 < 3){\r\n               this.nCol = 3;\r\n           }else if(n2 >= 3 && n2 < 4){\r\n               this.nCol = 2;\r\n           }else if(n2 >= 4 && n2 < 5){\r\n               this.nCol = 1;\r\n           }\r\n        }\r\n        if(this.nCol >= 10){\r\n            this.nCol = 10;\r\n        }\r\n        if(this.nCol <= 1){\r\n            this.nCol = 1;\r\n        }\r\n        return this.nCol;\r\n   },\r\n    //返回触摸点对应的俄罗斯方块的列数\r\n    GetTouchLine: function (worldPosition) {\r\n        //将触摸点的横坐标转化为本地坐标\r\n        var nodePosition = worldPosition - (this.nodeMove1.x + this.nodeCanvas.x);\r\n        if (nodePosition > 0) {\r\n            var nWidth1 = Math.floor(nodePosition / (this.nodeMove1.width / 20));\r\n            if (nWidth1 == 0 || nWidth1 == 1) {\r\n                this.nLine = 6;\r\n            }\r\n            else if (nWidth1 == 2 || nWidth1 == 3) {\r\n                this.nLine = 7;\r\n            }\r\n            else if (nWidth1 == 4 || nWidth1 == 5) {\r\n                this.nLine = 8;\r\n            }\r\n            else if (nWidth1 == 6 || nWidth1 == 7) {\r\n                this.nLine = 9;\r\n            }\r\n            else {\r\n                this.nLine = 10;\r\n            }\r\n\r\n            return this.nLine;\r\n        }\r\n        if (nodePosition < 0) {\r\n            var nWidth1 = Math.floor((-nodePosition) / (this.nodeMove1.width / 20));\r\n           \r\n            if (nWidth1 == 0 || nWidth1 == 1) {\r\n                this.nLine = 5;\r\n\r\n            }\r\n            else if (nWidth1 == 2 || nWidth1 == 3) {\r\n                this.nLine = 4;\r\n\r\n            }\r\n            else if (nWidth1 == 4 || nWidth1 == 5) {\r\n                this.nLine = 3;\r\n\r\n            }\r\n            else if (nWidth1 == 6 || nWidth1 == 7) {\r\n                this.nLine = 2;\r\n            }\r\n            else {\r\n                this.nLine = 1;\r\n            }\r\n            return this.nLine;\r\n        }\r\n    },\r\n    shareButton : function(){\r\n        if(CC_WECHATGAME){\r\n            console.log(\"首页share\");\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").shareFriends();\r\n        }else if(cc.sys.isNative){\r\n            //原生平台分享\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nativeShare();\r\n        }\r\n    },\r\n    //看视频复活\r\n    // relive : function(event){\r\n    //     var self = this;\r\n    //     console.log(\"正在看视频\");\r\n    //     // Global.videoAdIsClick = true;\r\n    //     let videoIdArr = [\"adunit-3838817899a6fb0d\",\"adunit-4b3b25878ef47139\",\"adunit-821fcb6e0d0793d1\",\"adunit-1dc7d6d90f7f49bf\"];\r\n    //     let choosedId = Math.floor(Math.random(0,1)*4);\r\n    //     console.log(\"广告id是：\",choosedId);\r\n    //     self.nodeBlock.getComponent(\"OperateBlock\").isGameOver = false;\r\n    //     // cc.director.resume();\r\n    //     //将现有的俄罗斯方块\r\n    //     self.darkNode.active = false;\r\n    //     self.overBackGround.active = false;\r\n    //     // if (self.isShowScore == false) {\r\n    //     //     //显示结束fenshu\r\n    //     //     self.gameOverScoreNode.getComponent(cc.Label).string += self.nodeScore1.getComponent(cc.Label).string;\r\n    //     //     self.isShowScore = true;\r\n    //     // }\r\n    //     self.stopNode.getComponent(cc.Button).interactable=true;\r\n        \r\n    //     //正常播放结束可以下发游戏奖励\r\n    //     console.log(\"广告已经看完，下发游戏奖励\");\r\n    //     let p = new Promise(function(resolve,reject){\r\n    //         for(var i = 19;i > 9;i--){\r\n    //             for(var j = 0;j < 10;j++){\r\n    //                 //将该行该列的背景方格的状态修改为false\r\n    //                 self.groundChild[j][i].getComponent(\"PrefabState\").isBox = false;\r\n    //                 self.groundChild[j][i].getComponent(\"PrefabState\").isFilled = 0;\r\n    //                 self.groundChild[j][i].getComponent(\"PrefabState\").type = -1;\r\n    //                 self.groundChild[j][i].getComponent(\"PrefabState\").innerNode = null;\r\n    //                 let hasDownNodeLength = self.boxParent1.length;\r\n    //                 for(let m = 0;m < hasDownNodeLength;m++){\r\n    //                     if(self.groundChild[j][i].x === self.boxParent1[m].x && self.groundChild[j][i].y === self.boxParent1[m].y){\r\n    //                         //销毁该节点\r\n    //                         self.boxParent1[m].destroy();\r\n    //                     }\r\n    //                     console.log(\"广告。。。。\");\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //         if(i === 9 && j === 10){\r\n    //             resolve();\r\n    //         }\r\n    //     });\r\n    //     p.then(function(){\r\n    //         // Global.videoAdIsClick = false;\r\n    //         Global.videoAdIsClick = true;\r\n    //         cc.director.resume();\r\n    //     });\r\n    //     //将累积的方块删除10行\r\n    //     // let p = new Promise(function(resolve,reject){\r\n    //     //     for(let i = 19;i > 9;i--){\r\n    //     //         for(let j = 0;j < 10;j++){\r\n    //     //             //将该行该列的背景方格的状态修改为false\r\n    //     //             self.groundChild[j][i].getComponent(\"PrefabState\").isBox = false;\r\n    //     //             self.groundChild[j][i].getComponent(\"PrefabState\").isFilled = 0;\r\n    //     //             self.groundChild[j][i].getComponent(\"PrefabState\").type = -1;\r\n    //     //             self.groundChild[j][i].getComponent(\"PrefabState\").innerNode = null;\r\n    //     //             let hasDownNodeLength = self.boxParent1.length;\r\n    //     //             for(let m = 0;m < hasDownNodeLength;m++){\r\n    //     //                 if(self.groundChild[j][i].x === self.boxParent1[m].x && self.groundChild[j][i].y === self.boxParent1[m].y){\r\n    //     //                     //销毁该节点\r\n    //     //                     self.boxParent1[m].destroy();\r\n    //     //                 }\r\n    //     //                 console.log(\"广告。。。。\");\r\n    //     //             }\r\n    //     //         }\r\n    //     //     }\r\n    //     //     resolve();\r\n    //     // });\r\n    //     // p.then(()=>{\r\n    //     //     self.nodeBlock.getComponent(\"OperateBlock\").isGameOver = false;\r\n    //     //     console.log(\"广告。。promise 已经完成了\");\r\n    //     //     self.isClickAd = false;\r\n    //     // })\r\n    //     // cc.director.loadScene(\"Game1Main\");\r\n    //     if(CC_WECHATGAME){\r\n    //         let videoAd = wx.createRewardedVideoAd({\r\n    //             adUnitId : videoIdArr[choosedId]\r\n    //         })\r\n    //         videoAd.load()\r\n    //         .then(() => videoAd.show())\r\n    //         .catch(err => console.log(err.errMsg))\r\n    //         videoAd.onClose(res=>{\r\n    //             if(res && res.isEnded || res === undefined){\r\n    //                 self.nodeBlock.getComponent(\"OperateBlock\").isGameOver = false;\r\n    //                 // cc.director.resume();\r\n    //                 //将现有的俄罗斯方块\r\n    //                 self.isClickAd = false;\r\n    //                 self.darkNode.active = false;\r\n    //                 self.overBackGround.active = false;\r\n    //                 // if (self.isShowScore == false) {\r\n    //                 //     //显示结束fenshu\r\n    //                 //     self.gameOverScoreNode.getComponent(cc.Label).string += self.nodeScore1.getComponent(cc.Label).string;\r\n    //                 //     self.isShowScore = true;\r\n    //                 // }\r\n    //                 self.stopNode.getComponent(cc.Button).interactable=true;\r\n    //                 //正常播放结束可以下发游戏奖励\r\n    //                 console.log(\"广告已经看完，下发游戏奖励\");\r\n    //                 //将累积的方块删除10行\r\n    //                 // new Promise(function(resolve,reject){\r\n\r\n    //                 // });\r\n    //                 for(let i = 19;i > 9;i--){\r\n    //                     for(let j = 0;j < 10;j++){\r\n    //                         //将该行该列的背景方格的状态修改为false\r\n    //                         self.groundChild[j][i].getComponent(\"PrefabState\").isBox = false;\r\n    //                         self.groundChild[j][i].getComponent(\"PrefabState\").isFilled = 0;\r\n    //                         self.groundChild[j][i].getComponent(\"PrefabState\").type = -1;\r\n    //                         self.groundChild[j][i].getComponent(\"PrefabState\").innerNode = null;\r\n    //                         let hasDownNodeLength = self.boxParent1.length;\r\n    //                         for(let m = 0;m < hasDownNodeLength;m++){\r\n    //                             if(self.groundChild[j][i].x === self.boxParent1[m].x && self.groundChild[j][i].y === self.boxParent1[m].y){\r\n    //                                 //销毁该节点\r\n    //                                 self.boxParent1[m].destroy();\r\n    //                             }\r\n    //                         }\r\n    //                     }\r\n    //                 }\r\n    //             }else{\r\n    //                 //播放中途退出，不下发游戏奖励\r\n    //                 console.log(\"广告没有看完，不下发游戏奖励\");\r\n    //             }\r\n    //         })\r\n    //     }\r\n        \r\n    // },\r\n    //直接退出游戏\r\n    directBack : function(){\r\n        //加载单机游戏选择界面\r\n        cc.director.loadScene(\"OneChoose\");\r\n    },\r\n    update(dt) {\r\n        if(Global.advertisement !== null){\r\n            //隐藏广告\r\n            Global.advertisement.hide();\r\n        }\r\n        // if(!this.nodeBlock.getComponent(\"OperateBlock\").isGameOver){\r\n\r\n        // }\r\n        // console.log(\"!this.showNoticeHelp is \",!this.showNoticeHelp);\r\n        console.log(\"游戏结束了吗？  \",this.nodeBlock.getComponent(\"OperateBlock\").isGameOver);\r\n        if(!this.showNoticeHelp){\r\n            this.invalidRemoveTime += dt;\r\n            //告诉服务器不要断开连接\r\n            if(this.invalidRemoveTime >= 60){\r\n                // console.log(\"发送给服务器消息防止自己不被踢出\");\r\n                // var url = 'https://m5.ykplay.com/KeepLink';\r\n                // var xhr = new XMLHttpRequest();\r\n                // xhr.onreadystatechange = function () {\r\n                //     if (xhr.readyState == 4 && (xhr.status >= 200 && xhr.status < 400)) {\r\n                //         var response = xhr.responseText;\r\n                //         console.log(response);\r\n                //     }\r\n                // };\r\n                // xhr.open(\"GET\", url, true);\r\n                // xhr.send();\r\n                //发送长连接请求\r\n                if(cc.sys.isNative || (CC_WECHATGAME)){\r\n                    var sendData = {\r\n                        tag1 : 0,\r\n                        score :  \"\",\r\n                        type : \"1\"\r\n                    }\r\n                    // var dataString = JSON.stringify(sendData);\r\n                    // console.log(\"dataString is \",dataString);\r\n                    cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(sendData);\r\n                }\r\n                this.invalidRemoveTime = 0;\r\n            }\r\n            if (this.nodeBlock.getComponent(\"OperateBlock\").isGameOver) {\r\n                cc.log(\"=======================================================\");\r\n                this.darkNode.active = true;\r\n                this.overBackGround.active = true;\r\n                if (this.isShowScore == false) {\r\n                    //显示结束fenshu\r\n                    this.gameOverScoreNode.getComponent(cc.Label).string += this.nodeScore1.getComponent(cc.Label).string;\r\n                    this.isShowScore = true;\r\n                }\r\n               this.stopNode.getComponent(cc.Button).interactable=false;\r\n                this.nTime +=dt;\r\n                if(CC_WECHATGAME){\r\n                    //显示广告\r\n                    cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").showAdvice(\"adunit-74bb1afec52241a9\");\r\n                }\r\n                // if(this.nTime>=4)\r\n                // {\r\n                //     cc.director.loadScene(\"OneChoose\");\r\n                // }\r\n                if(cc.sys.localStorage.getItem('maxScoreTetris') === null){\r\n                    //设置值\r\n                    cc.sys.localStorage.setItem('maxScoreTetris',this.score);\r\n                }else{\r\n                    let currentBestScore = cc.sys.localStorage.getItem('maxScoreTetris');\r\n                    if(typeof(currentBestScore) === \"string\"){\r\n                        currentBestScore = Number(currentBestScore);\r\n                    }\r\n                    if(this.score > currentBestScore){\r\n                        console.log(\"即将保存到微信托管平台。。。\");\r\n                        //设置值\r\n                        cc.sys.localStorage.setItem('maxScoreTetris',this.score.toString());\r\n                        //将最高分数保存起来\r\n                        cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").tetrisTopScore = this.score.toString();\r\n                        // let username = cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser;\r\n                        //将最高分上传到微信托管平台\r\n                        cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").postMessage(\"SaveScore\",\"tetrisRankScore\",this.score.toString());\r\n                    }\r\n                    console.log(\"俄罗斯方块的最高分是: \",cc.sys.localStorage.getItem('maxScoreTetris'));\r\n                }\r\n                cc.director.pause();\r\n            }else{\r\n                if (this.isOutSlide == false) {\r\n                  cc.log(\"isOutSlide\");\r\n                  this.SlideAcrossNode.getChildByName(\"43\").opacity = 120;\r\n                }\r\n                else {\r\n                    this.SlideAcrossNode.getChildByName(\"43\").opacity = 0;\r\n                }\r\n                if (this.isOutDown == false) {\r\n                    this.downNode.getChildByName(\"44\").opacity = 120;\r\n                }\r\n                else {\r\n                    this.downNode.getChildByName(\"44\").opacity = 0;\r\n                }\r\n                if (this.isPressRotate) {\r\n                    this.RotateBlock();\r\n                    this.rotateNode.getChildByName(\"44\").opacity = 120;\r\n                }\r\n                else {\r\n                    this.rotateNode.getChildByName(\"44\").opacity = 0;\r\n                }\r\n        \r\n                if (cc.sys.isNative) {\r\n                    if ((this.isOutSlide == false || this.gameSlide == false) && this.nodeBlock.getComponent(\"OperateBlock\").isGameOver == false) {\r\n                        console.log(\"44444444444444444444444444444444444444\");\r\n                        //当触摸点的列大于俄罗斯方块的列数\r\n                        if(!this.isOutSlide){\r\n                            if (this.getTouchLine(this.nodeMove1,this.positionTouchX) > this.GetBlockLine()) {\r\n                                //执行向右移动代码\r\n                                this.MoveRight(this.getTouchLine(this.nodeMove1,this.positionTouchX), this.GetBlockLine());\r\n                                this.isOutSlide = true;\r\n                            }\r\n                            if (this.getTouchLine(this.nodeMove1,this.positionTouchX) < this.GetBlockLine()) {\r\n                                //执行向左移动代码\r\n                                this.MoveLeft(this.getTouchLine(this.nodeMove1,this.positionTouchX), this.GetBlockLine());\r\n                                this.isOutSlide = true;\r\n                            }\r\n                        }else if(!this.gameSlide){\r\n                            if (this.getTouchLine(this.slideNode,this.slidePosition) > this.GetBlockLine()) {\r\n                                //执行向右移动代码\r\n                                this.MoveRight(this.getTouchLine(this.slideNode,this.slidePosition), this.GetBlockLine());\r\n                                this.gameSlide = true;\r\n                            }\r\n                            if (this.getTouchLine(this.slideNode,this.slidePosition) < this.GetBlockLine()) {\r\n                                //执行向左移动代码\r\n                                this.MoveLeft(this.getTouchLine(this.slideNode,this.slidePosition), this.GetBlockLine());\r\n                                this.gameSlide = true;\r\n                            }\r\n                        }\r\n                    }\r\n                    //快速下落\r\n                    if (this.isOutDown == false && this.nodeBlock.getComponent(\"OperateBlock\").isGameOver == false) {\r\n                        this.DownQuick();\r\n                    }\r\n                }\r\n                else {\r\n                    if ((this.isOutSlide == false || this.gameSlide == false) && this.nodeBlock.getComponent(\"OperateBlock\").isGameOver == false) {\r\n                        //当触摸点的列大于俄罗斯方块的列数\r\n                        if(!this.isOutSlide){\r\n                            if (this.getTouchLine(this.nodeMove1,this.positionTouchX) > this.GetBlockLine()) {\r\n                                //执行向右移动代码\r\n                                this.MoveRight(this.getTouchLine(this.nodeMove1,this.positionTouchX), this.GetBlockLine());\r\n                                this.isOutSlide = true;\r\n                            }\r\n                            if (this.getTouchLine(this.nodeMove1,this.positionTouchX) < this.GetBlockLine()) {\r\n                                //执行向左移动代码\r\n                                this.MoveLeft(this.getTouchLine(this.nodeMove1,this.positionTouchX), this.GetBlockLine());\r\n                                this.isOutSlide = true;\r\n                            }\r\n                        }else if(!this.gameSlide){\r\n                            if (this.getTouchLine(this.slideNode,this.slidePosition) > this.GetBlockLine()) {\r\n                                //执行向右移动代码\r\n                                this.MoveRight(this.getTouchLine(this.slideNode,this.slidePosition), this.GetBlockLine());\r\n                                this.gameSlide = true;\r\n                            }\r\n                            if (this.getTouchLine(this.slideNode,this.slidePosition) < this.GetBlockLine()) {\r\n                                //执行向左移动代码\r\n                                this.MoveLeft(this.getTouchLine(this.slideNode,this.slidePosition), this.GetBlockLine());\r\n                                this.gameSlide = true;\r\n                            }\r\n                        }\r\n                    }\r\n                    //快速下落\r\n                    if (this.isOutDown == false && this.nodeBlock.getComponent(\"OperateBlock\").isGameOver == false) {\r\n                        this.DownQuick();\r\n                    }\r\n                }\r\n                if (this.nodeBlock.getComponent(\"OperateBlock\").isStationary && this.nodeBlock.getComponent(\"OperateBlock\").isGameOver == false) {\r\n                    // this.boxParent1=this.boxParent.getChildren();\r\n                    //获取此方块的数组\r\n                    var nodeBoxArray = this.nodeBlock.getChildren();\r\n                    if(nodeBoxArray.length !== 0){\r\n                        for (var i = 0; i <= 3; i++) {\r\n                            nodeBoxArray[0].setPosition(this.GetBoxNode(nodeBoxArray[0]));\r\n                            nodeBoxArray[0].parent = this.boxParent;\r\n                            if (i == 3) {\r\n                                this.nodeBlock.getComponent(\"OperateBlock\").isChangeParent = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (this.nodeBlock.getComponent(\"OperateBlock\").isChangeParent && this.nodeBlock.getComponent(\"OperateBlock\").isGameOver == false) {\r\n                    //消除以后落下俄罗斯方块\r\n                    this.DisappearBox();\r\n                    var nodeBoxArray1 = this.boxParent.getChildren();\r\n                    //生成新的俄罗斯方块\r\n                    this.GetBlock();\r\n                    this.isOutDown = true;\r\n                    this.isPressRotate = false;\r\n                    this.isOutSlide = true;\r\n                    if (this.disappearAll >= 10) {\r\n                        cc.log(\"sss1111111111111111111111111111111111111\");\r\n                        cc.log(Global.nTimeInteval+\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\r\n                        if(Global.nTimeInteval==0.3)\r\n                        {\r\n                          \r\n                            Global.nTimeInteval=0.3;\r\n                            rerurn;\r\n                        }\r\n                        Global.nTimeInteval -= 0.2;\r\n                        Global.nTimeInteval=Number(Global.nTimeInteval.toFixed(1));\r\n                        this.disappearAll = 0;\r\n                    }\r\n                    this.nodeBlock.getComponent(\"OperateBlock\").isStationary = false;\r\n                    this.nodeBlock.getComponent(\"OperateBlock\").isChangeParent = false;\r\n                }\r\n            }\r\n        }\r\n    },\r\n});\r\n","// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        groundPrefab: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        groundParent: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        //获取下落噗呦块的父节点\r\n        downBoxParent: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        //获取 竖条预制体\r\n        prefabLong: {\r\n            default: null,\r\n            type: cc.Prefab\r\n\r\n        },\r\n        //获取颜色不一样田型预制体\r\n        prefabSquare: {\r\n            default: null,\r\n            type: cc.Prefab\r\n\r\n        },\r\n        //获取l型预制体\r\n        prefabL: {\r\n            default: null,\r\n            type: cc.Prefab\r\n\r\n        },\r\n        //获取颜色一样田预制体\r\n        prefabSquare1: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        //获取背景狂节点\r\n        nodeBackgroundBox: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        //获取噗呦小块父节点\r\n        boxParent: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        prefab1: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        prefab22: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        prefab2: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        prefab3: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        prefab4: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        nodeDownButton: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        //初始化方块压缩变形移动的时间\r\n        fChangeShape: 0,\r\n        //初始化变形缩放大小\r\n        fScaleChange: 0.5,\r\n        //可下落噗呦块下落时间\r\n        fActionDown: 0,\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n    onLoad() {\r\n        Global.game1Main = this;\r\n        Global.SetBackground(this.nodeBackgroundBox, this.groundParent, Global.nWidthPuYo, 12);\r\n        this.boxParent.setPosition(this.groundParent.getPositionX(), this.groundParent.getPositionY());\r\n        //初始化背景子节点\r\n        this.userGroundChild = [];\r\n        //显示自己的游戏背景\r\n        Global.CreatBackGround(this.userGroundChild, 12, 6, this.groundPrefab, this.groundParent, Global.nWidthPuYo);\r\n        //   cc.log(this.userGroundChild);\r\n        this.GetBlock();\r\n        //初始化long型噗呦块的旋转次数\r\n        this.nRotateLong = 0;\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        //判断噗呦块是否正在旋转\r\n        this.isRotate = false;\r\n        //存取使用贝塞尔曲线选装后的坐标\r\n        this.positionRotateX = 0;\r\n        this.positionRotateY = 0;\r\n        //初始化实际坐标\r\n        this.nPositionX = 0;\r\n        this.nPositionY = 0;\r\n        //判断形变动作是否完成开关\r\n        this.isActionShape = false;\r\n        //  //判断固定后可向下移动的噗呦块是否完成下落动作\r\n        this.isActionDown = false;\r\n        //初始化形变次数\r\n        this.nChangeShape = 0;\r\n        //判断手指是否离开下落节点\r\n        this.isOutDown = true;\r\n        var self = this;\r\n        //当手指落在下落节点上时\r\n        this.nodeDownButton.on(cc.Node.EventType.TOUCH_START, function (event) {\r\n            self.nodeBlock.getComponent(\"PuyoDown\").nDownSpeed = 4;\r\n        }, this);\r\n        //当手指离开下落节点上时\r\n        this.nodeDownButton.on(cc.Node.EventType.TOUCH_END, function (event) {\r\n            self.nodeBlock.getComponent(\"PuyoDown\").nDownSpeed = 24;\r\n\r\n        }, this);\r\n        //   //初始化下落数组\r\n        //   this.arrayDown=[];\r\n        //  for(var i=0;i<=11;i++)\r\n        //  {\r\n        //      for(var j=0;j<=5;j++)\r\n        //      {\r\n        //          cc.log( this.userGroundChild[j][i].getPosition());\r\n        //      }\r\n        //  }\r\n    },\r\n    //执行贝塞尔动作后初始化动作位置\r\n    RotateLoadPosition: function () {\r\n        var child = this.nodeBlock.getChildren();\r\n        child[1].setPosition(this.positionRotateX, this.positionRotateY);\r\n        // cc.log();\r\n    },\r\n    onKeyDown: function (event) {\r\n        var self = this;\r\n        switch (event.keyCode) {\r\n            case cc.KEY.a:\r\n                self.MoveLeft();\r\n                break;\r\n            case cc.KEY.d:\r\n                self.MoveRight();\r\n                break;\r\n            case cc.KEY.s:\r\n                self.DownQuick();\r\n                break;\r\n            case cc.KEY.l:\r\n                self.RotatePuYo();\r\n                break;\r\n        }\r\n    },\r\n\r\n    //旋转噗呦块\r\n    RotatePuYo: function () {\r\n        cc.log(this.nodeBlock.getComponent(\"PuyoDown\").stringBoloekShape + \"9999999999999999999999\");\r\n        switch (this.nodeBlock.getComponent(\"PuyoDown\").stringBoloekShape) {\r\n            case \"Long\":\r\n                if (this.nodeBlock.getComponent(\"PuyoDown\").nColor == 1) {\r\n                    this.RotateActioin();\r\n                }\r\n                else {\r\n                    this.RotateLongShape();\r\n                }\r\n                break;\r\n            case \"L\":\r\n                this.RotateActioin();\r\n                break;\r\n            case \"Square\":\r\n                if (this.nodeBlock.getComponent(\"PuyoDown\").nColor == 1) {\r\n                    this.ChangePuyoColor();\r\n                }\r\n                else {\r\n                    this.RotateActioin();\r\n                }\r\n                break;\r\n        }\r\n    },\r\n    //快速下落\r\n    DownQuick: function () {\r\n        this.nodeBlock.getComponent(\"PuyoDown\").isDown = true;\r\n    },\r\n    LoadPosition: function (target, jsonMsg) {\r\n        jsonMsg.node.setPosition(jsonMsg.positionX, jsonMsg.positionY);\r\n    },\r\n    //初始化旋转开关\r\n    OnloadRotate: function () {\r\n        this.isRotate = false;\r\n    },\r\n    //根据噗呦块在父体中的坐标转化成背景的本地坐标\r\n    ChangeNodePositionY: function (positionY) {\r\n        var nodePositionGroundY = positionY + this.nodeBlock.getPositionY() - cc.find(\"GroundParent\").getPositionY();\r\n        return nodePositionGroundY;\r\n    },\r\n    ChangeNodePositionX: function (positionX) {\r\n        var nodePositionGroundX = positionX + this.nodeBlock.getPositionY() - cc.find(\"GroundParent\").getPositionX();\r\n        return nodePositionGroundX;\r\n    },\r\n    //执行旋转动作后初始化噗呦块角度\r\n    LodaRotation: function (nAngle) {\r\n        this.nodeBlock.rotation = nAngle;\r\n    },\r\n    //改变四个颜色一样的噗呦快的颜色\r\n    ChangePuyoColor: function () {\r\n        var nodeBlockChild = this.nodeBlock.getChildren();\r\n        switch (nodeBlockChild[0].getComponent(\"InitPrefabState\").stringColor) {\r\n            case \"red\":\r\n                for (var i = 0; i <= 3; i++) {\r\n                    nodeBlockChild[i].getComponent(cc.Animation).play(\"ChangeGreen\");\r\n                    nodeBlockChild[i].getComponent(\"InitPrefabState\").stringColor = \"green\";\r\n                }\r\n                break;\r\n            case \"blue\":\r\n                for (var i = 0; i <= 3; i++) {\r\n                    nodeBlockChild[i].getComponent(cc.Animation).play(\"ChangeRed\");\r\n                    nodeBlockChild[i].getComponent(\"InitPrefabState\").stringColor = \"red\";\r\n                }\r\n                break;\r\n            case \"green\":\r\n                for (var i = 0; i <= 3; i++) {\r\n                    nodeBlockChild[i].getComponent(cc.Animation).play(\"ChangeBlue\");\r\n                    nodeBlockChild[i].getComponent(\"InitPrefabState\").stringColor = \"blue\";\r\n                }\r\n                break;\r\n        }\r\n\r\n    },\r\n    //根据旋转动作旋转\r\n    RotateActioin: function () {\r\n        if (this.isRotate == false) {\r\n            this.isRotate = true;\r\n            this.nodeBlock.getComponent(\"PuyoDown\").nRotateAngle += 90;\r\n            if (this.nodeBlock.getComponent(\"PuyoDown\").nRotateAngle == 360) {\r\n                this.nodeBlock.getComponent(\"PuyoDown\").nRotateAngle = 0;\r\n            }\r\n            //初始化旋转动作\r\n            var actionRotate = cc.rotateTo(0.05, this.nodeBlock.getComponent(\"PuyoDown\").nRotateAngle);\r\n            //初始化旋转开关动作\r\n            var callRotate = cc.callFunc(this.OnloadRotate, this);\r\n            //执行旋转动作\r\n            this.nodeBlock.runAction(cc.sequence(actionRotate, callRotate));\r\n        }\r\n    },\r\n    //根据诶塞尔旋转噗呦块\r\n    RotateLong: function () {\r\n        var child = this.nodeBlock.getChildren();\r\n        var bezier = [cc.p(child[1].getPositionX(), child[1].getPositionY()), cc.p(Global.nWidthPuYo * Math.cos(Math.PI / 4 - Math.PI / 2 * this.nRotateLong), Global.nWidthPuYo * Math.sin(Math.PI / 4 - Math.PI / 2 * this.nRotateLong)), cc.p(child[1].getPositionY(), -child[1].getPositionX())];\r\n        this.nRotateLong++;\r\n        var bezierAction = cc.bezierTo(0.06, bezier);\r\n        var loadPositionAction = cc.callFunc(this.RotateLoadPosition, this);\r\n        //初始化旋转开关动作\r\n        var callRotate = cc.callFunc(this.OnloadRotate, this);\r\n        child[1].runAction(cc.sequence(bezierAction, loadPositionAction, callRotate));\r\n        this.nodeBlock.getComponent(\"PuyoDown\").nRotateAngle += 90;\r\n        if (this.nodeBlock.getComponent(\"PuyoDown\").nRotateAngle == 360) {\r\n            this.nodeBlock.getComponent(\"PuyoDown\").nRotateAngle = 0;\r\n        }\r\n\r\n    },\r\n    //根据贝塞尔曲线旋转long型\r\n    RotateLongShape: function () {\r\n        if (this.isRotate == false) {\r\n            this.isRotate = true;\r\n            var child = this.nodeBlock.getChildren();\r\n            //计算旋转后噗呦块的行数\r\n            // child[1].setPosition(Number(child[1].getPositionX().toFixed(0)),Number(child[1].getPositionY().toFixed(0)));\r\n\r\n            this.positionRotateX = child[1].getPositionY();\r\n            this.positionRotateY = -child[1].getPositionX();\r\n            //根据坐标计算出行列\r\n            var nLine = (this.positionRotateX + this.nodeBlock.getPositionX() - cc.find(\"GroundParent\").getPositionX()) / Global.nWidthPuYo + 1;\r\n            var nRow = (this.positionRotateY + this.nodeBlock.getPositionY() - cc.find(\"GroundParent\").getPositionY()) / Global.nWidthPuYo + 1;\r\n            if (nLine > 6) {\r\n                cc.log(\"RotateLongShape\");\r\n                var actionMoveLeft = cc.moveBy(0.06, cc.p(-Global.nWidthPuYo, child[1].getPositionY()));\r\n                //初始化位置i\r\n                var loadPosition1 = cc.callFunc(this.LoadPosition, this, { \"node\": child[1], \"positionX\": child[1].getPositionX() - Global.nWidthPuYo, \"positionY\": child[1].getPositionY() });\r\n                var loadPosition0 = cc.callFunc(this.LoadPosition, this, { \"node\": child[0], \"positionX\": child[0].getPositionX() - Global.nWidthPuYo, \"positionY\": child[0].getPositionY() });\r\n                var actionRotate1 = cc.callFunc(this.RotateLong, this);\r\n                child[1].runAction(cc.spawn(cc.sequence(actionMoveLeft, loadPosition1), actionRotate1));\r\n                child[0].runAction(cc.sequence(actionMoveLeft, loadPosition0));\r\n            }\r\n            if (nLine < 0) {\r\n                var actionMoveLeft = cc.moveBy(0.06, cc.p(Global.nWidthPuYo, this.nodeBlock.getPositionY()));\r\n                //初始化位置i\r\n                var loadPosition1 = cc.callFunc(this.LoadPosition, this, { \"node\": this.nodeBlock, \"positionX\": this.nodeBlock.getPositionX() + Global.nWidthPuYo, \"positionY\": this.nodeBlock.getPositionY() });\r\n                this.nodeBlock.runAction(cc.sequence(actionMoveLeft, loadPosition1));\r\n            }\r\n            this.RotateLong();\r\n        }\r\n    },\r\n    //遍历待下落数组,并判断是否可销毁\r\n    IsDestroy: function () {\r\n        var arrayBox = this.boxParent.getChildren();\r\n        //初始化销毁数组\r\n        this.arrayDestroy = [];\r\n      \r\n        for (var i = 0; i <= this.arrayPositionX.length - 1; i++) {\r\n            //初始化待销毁数组\r\n            this.arrayDestroyWait = [];\r\n            for (var j = 0; j <= arrayBox.length - 1; j++) {\r\n                if (arrayBox[j].getPositionX() == this.arrayPositionX[i] && arrayBox[j].getPositionY() == this.arrayPositionY[i]) {\r\n                    this.DestroyNode(this.CountRow(this.arrayPositionY[i]), this.CountLine(this.arrayPositionX[i]), j);\r\n                    break;\r\n                }\r\n            }\r\n            if (i == this.arrayPositionX.length - 1) {\r\n                if (this.arrayDestroy.length != 0) {\r\n                    cc.log(this.arrayDestroy.length+\"IsDestroy\");\r\n                    for (var j = 0; j <= this.arrayDestroy.length - 1; j++) {  \r\n                        cc.log(this.arrayDestroy[j].getPositionX() + \"IsDestroy\");\r\n                        cc.log(this.arrayDestroy[j].getPositionY() + \"IsDestroy\");\r\n                        this.userGroundChild[this.CountLine(this.arrayDestroy[j].getPositionX())][this.CountRow(this.arrayDestroy[j].getPositionY())].getComponent(\"BoxState\").stringColor = \"\";\r\n                        this.userGroundChild[this.CountLine(this.arrayDestroy[j].getPositionX())][this.CountRow(this.arrayDestroy[j].getPositionY())].getComponent(\"BoxState\").isBox = false;\r\n                        this.arrayDestroy[j].setPosition(-1000, -1000);\r\n                        this.arrayDestroy[j].destroy();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    //把铺有块加入待消数组\r\n    //根据普邮快的行列向上，下，左，右遍历，并销毁节点\r\n    DestroyNode: function (nRow, nLine, nSign) {\r\n        //存取此普邮块的颜色\r\n        var stringColor = this.userGroundChild[nLine][nRow].getComponent(\"BoxState\").stringColor;\r\n        var arrayBox = this.boxParent.getChildren();\r\n        var isFind=false;\r\n        //向上遍历\r\n        for (var i = nRow + 1; i <= 11; i++) {\r\n            if(isFind)\r\n            {\r\n                break;\r\n            }\r\n            if (stringColor == this.userGroundChild[nLine][i].getComponent(\"BoxState\").stringColor) {\r\n                if (this.arrayDestroyWait.length == 0) {\r\n                    this.arrayDestroyWait.push(arrayBox[nSign]);\r\n                    for (var j = 0; j <= arrayBox.length - 1; j++) {\r\n                        if (arrayBox[j].getPositionX() == this.userGroundChild[nLine][i].getPositionX() && arrayBox[j].getPositionY() == this.userGroundChild[nLine][i].getPositionY()) {\r\n                            // cc.log(j+\"DestroyNode\");\r\n                            this.arrayDestroyWait.push(arrayBox[j]);\r\n                            this.DestroyNode(i, nLine, j);\r\n                            isFind=true;\r\n                            break;\r\n                            // continue signdown;\r\n                            // return;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    //判断待消数列中是否含有此铺有块\r\n                    var isHas = false;\r\n                    for (var j = 0; j <= this.arrayDestroyWait.length - 1; j++) {\r\n                        if (this.arrayDestroyWait[j].getPositionX() == this.userGroundChild[nLine][i].getPositionX() && this.arrayDestroyWait[j].getPositionY() == this.userGroundChild[nLine][i].getPositionY()) {\r\n                            isHas = true;\r\n                        }\r\n                    }\r\n                    if (isHas) {\r\n                        break;\r\n                    }\r\n                    else {\r\n                        for (var j = 0; j <= arrayBox.length - 1; j++) {\r\n                            if (arrayBox[j].getPositionX() == this.userGroundChild[nLine][i].getPositionX() && arrayBox[j].getPositionY() == this.userGroundChild[nLine][i].getPositionY()) {\r\n                                this.arrayDestroyWait.push(arrayBox[j]);\r\n                                this.DestroyNode(i, nLine, j);\r\n                                isFind=true;\r\n                                break;\r\n                                // return;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        var isFind=false;\r\n        //向下遍历\r\n        for (var i = nRow - 1; i >= 0; i--) {\r\n            if(isFind)\r\n            {\r\n                break;\r\n            }\r\n            if (stringColor == this.userGroundChild[nLine][i].getComponent(\"BoxState\").stringColor) {\r\n                if (this.arrayDestroyWait.length == 0) {\r\n                    this.arrayDestroyWait.push(arrayBox[nSign]);\r\n                    for (var j = 0; j <= arrayBox.length - 1; j++) {\r\n                        if (arrayBox[j].getPositionX() == this.userGroundChild[nLine][i].getPositionX() && arrayBox[j].getPositionY() == this.userGroundChild[nLine][i].getPositionY()) {\r\n                            this.arrayDestroyWait.push(arrayBox[j]);\r\n                            this.DestroyNode(i, nLine, j);\r\n                            isFind=true;\r\n                                break;\r\n                            // return;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    //判断待消数列中是否含有此铺有块\r\n                    var isHas = false;\r\n                    for (var j = 0; j <= this.arrayDestroyWait.length - 1; j++) {\r\n                        if (this.arrayDestroyWait[j].getPositionX() == this.userGroundChild[nLine][i].getPositionX() && this.arrayDestroyWait[j].getPositionY() == this.userGroundChild[nLine][i].getPositionY()) {\r\n                            isHas = true;\r\n                        }\r\n                    }\r\n                    if (isHas) {\r\n                        break;\r\n                    }\r\n                    else {\r\n                        for (var j = 0; j <= arrayBox.length - 1; j++) {\r\n                            if (arrayBox[j].getPositionX() == this.userGroundChild[nLine][i].getPositionX() && arrayBox[j].getPositionY() == this.userGroundChild[nLine][i].getPositionY()) {\r\n                                this.arrayDestroyWait.push(arrayBox[j]);\r\n                                this.DestroyNode(i, nLine, j);\r\n                                isFind=true;\r\n                                break;\r\n                                // return;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        var isFind=false;\r\n        //向左遍历 \r\n        for (var i = nLine - 1; i >= 0; i--) {\r\n            if(isFind)\r\n            {\r\n                break;\r\n            }\r\n            if (stringColor == this.userGroundChild[i][nRow].getComponent(\"BoxState\").stringColor) {\r\n                if (this.arrayDestroyWait.length == 0) {\r\n                    this.arrayDestroyWait.push(arrayBox[nSign]);\r\n                    for (var j = 0; j <= arrayBox.length - 1; j++) {\r\n                        if (arrayBox[j].getPositionX() == this.userGroundChild[i][nRow].getPositionX() && arrayBox[j].getPositionY() == this.userGroundChild[i][nRow].getPositionY()) {\r\n                            this.arrayDestroyWait.push(arrayBox[j]);\r\n                            this.DestroyNode(nRow, i, j);\r\n                            isFind=true;\r\n                                break;\r\n                            // return;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    //判断待消数列中是否含有此铺有块\r\n                    var isHas = false;\r\n                    for (var j = 0; j <= this.arrayDestroyWait.length - 1; j++) {\r\n                        if (this.arrayDestroyWait[j].getPositionX() == this.userGroundChild[i][nRow].getPositionX() && this.arrayDestroyWait[j].getPositionY() == this.userGroundChild[i][nRow].getPositionY()) {\r\n                            isHas = true;\r\n                        }\r\n                    }\r\n                    if (isHas) {\r\n                        break;\r\n                    }\r\n                    else {\r\n                        for (var j = 0; j <= arrayBox.length - 1; j++) {\r\n                            if (arrayBox[j].getPositionX() == this.userGroundChild[i][nRow].getPositionX() && arrayBox[j].getPositionY() == this.userGroundChild[i][nRow].getPositionY()) {\r\n                                this.arrayDestroyWait.push(arrayBox[j]);\r\n                                this.DestroyNode(nRow, i, j);\r\n                                isFind=true;\r\n                                break;\r\n                                // return;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        //向右遍历\r\n        for (var i = nLine + 1; i <= 5; i++) {\r\n            if (stringColor == this.userGroundChild[i][nRow].getComponent(\"BoxState\").stringColor) {\r\n                if (this.arrayDestroyWait.length == 0) {\r\n                    this.arrayDestroyWait.push(arrayBox[nSign]);\r\n                    for (var j = 0; j <= arrayBox.length - 1; j++) {\r\n                        if (arrayBox[j].getPositionX() == this.userGroundChild[i][nRow].getPositionX() && arrayBox[j].getPositionY() == this.userGroundChild[i][nRow].getPositionY()) {\r\n                            this.arrayDestroyWait.push(arrayBox[j]);\r\n                            this.DestroyNode(nRow, i, j);\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    //判断待消数列中是否含有此铺有块\r\n                    var isHas = false;\r\n                    for (var j = 0; j <= this.arrayDestroyWait.length - 1; j++) {\r\n                        if (this.arrayDestroyWait[j].getPositionX() == this.userGroundChild[i][nRow].getPositionX() && this.arrayDestroyWait[j].getPositionY() == this.userGroundChild[i][nRow].getPositionY()) {\r\n                            isHas = true;\r\n                        }\r\n                    }\r\n                    if (isHas) {\r\n                        break;\r\n                    }\r\n                    else {\r\n                        for (var j = 0; j <= arrayBox.length - 1; j++) {\r\n                            if (arrayBox[j].getPositionX() == this.userGroundChild[i][nRow].getPositionX() && arrayBox[j].getPositionY() == this.userGroundChild[i][nRow].getPositionY()) {\r\n                                this.arrayDestroyWait.push(arrayBox[j]);\r\n                                this.DestroyNode(nRow, i, j);\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        cc.log(\"DestroyNode\" + this.arrayDestroyWait.length);\r\n        if (this.arrayDestroyWait.length >= 4) {\r\n            if(this.arrayDestroy.length!=0)\r\n            {\r\n                for(var j=0;j<=this.arrayDestroy.length-1;j++)\r\n                {\r\n                    var isHas=false;\r\n                    for (var i = 0; i <= this.arrayDestroyWait.length - 1; i++) {\r\n                        if(this.arrayDestroy[j].getPositionX()==this.arrayDestroyWait[i].getPositionX()&&this.arrayDestroy[j].getPositionY()==this.arrayDestroyWait[i].getPositionY())\r\n                        {\r\n                            isHas=true;\r\n                        }\r\n                        if(i== this.arrayDestroyWait.length - 1&&isHas==false)\r\n                        {\r\n                            this.arrayDestroy.push(this.arrayDestroyWait[i]);\r\n                        }\r\n                        // cc.log(this.arrayDestroy[i].getPositionX()+\"DestroyNode\");\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                for (var i = 0; i <= this.arrayDestroyWait.length - 1; i++) {\r\n                    this.arrayDestroy.push(this.arrayDestroyWait[i]);\r\n                    // cc.log(this.arrayDestroy[i].getPositionX()+\"DestroyNode\");\r\n                }\r\n            }\r\n        }\r\n    },\r\n    // //打开下落动作执行完成开关\r\n    // StartActionDown:function(){\r\n    //     this.isActionDown=true;\r\n    // },\r\n    //执行压缩变形移动动作\r\n    ActionChangeShape: function (arrayChangeShape, fScale) {\r\n        cc.log(arrayChangeShape.length + \"arrayChangeShape\");\r\n        //初始化压缩形变动作\r\n        var actionChangeShape = cc.scaleTo(this.fChangeShape, 1, fScale);\r\n        //初始化恢复形变\r\n        var actionResumeShape = cc.scaleTo(this.fChangeShape, 1, 1);\r\n        //初始化存取噗呦块横坐标数组\r\n        var arrayX = [];\r\n        //初始化存取噗呦块纵坐标数组\r\n        var arrayY = [];\r\n        for (var i = 0; i <= arrayChangeShape.length - 1; i++) {\r\n            arrayX.push(arrayChangeShape[i].getPositionX());\r\n            arrayY.push(arrayChangeShape[i].getPositionY());\r\n        }\r\n        //遍历数组存取初始位置\r\n        for (var i = 0; i <= arrayChangeShape.length - 1; i++) {\r\n            //初始化该块向下移动的距离\r\n            var nDownDistance = (1 + 2 * (arrayChangeShape.length - (i + 1))) * Global.nWidthPuYo * (1 - fScale) / 2;\r\n            //初始化向下移动动作\r\n            var actionMoveDown = cc.moveBy(this.fChangeShape, cc.p(0, -nDownDistance));\r\n            //初始化向上移动动作\r\n            var actionMoveUp = cc.moveBy(this.fChangeShape, cc.p(0, nDownDistance));\r\n            //完成动作后初始化位置\r\n            // var onloadPosition = cc.callFunc(this.LoadPosition(arrayChangeShape[i], arrayX[i], arrayY[i]));\r\n            var onloadPosition = cc.callFunc(this.LoadPosition, this, { \"node\": arrayChangeShape[i], \"positionX\": arrayX[i], \"positionY\": arrayY[i] });\r\n            if (i == arrayChangeShape.length - 1) {\r\n                var actionStartShape = cc.callFunc(this.StartActionShape, this);\r\n                //执行动作\r\n                arrayChangeShape[i].runAction(cc.sequence(cc.spawn(actionChangeShape, actionMoveDown), cc.spawn(actionResumeShape, actionMoveUp), onloadPosition, actionStartShape));\r\n            }\r\n            else {\r\n                // var actionStartShape = cc.callFunc(this.StartActionShape, this);\r\n                //执行动作\r\n                arrayChangeShape[i].runAction(cc.sequence(cc.spawn(actionChangeShape, actionMoveDown), cc.spawn(actionResumeShape, actionMoveUp), onloadPosition));\r\n            }\r\n            //   arrayChangeShape[i].runAction(cc.sequence(cc.spawn(actionChangeShape, actionMoveDown), onloadPosition));\r\n        }\r\n    },\r\n    //打开形变动作完成开管\r\n    StartActionShape: function () {\r\n        this.nChangeShape++\r\n    },\r\n    //从该噗呦块向下遍历并移动压缩变形\r\n    ChangeShape: function (target, msgJson) {\r\n        cc.log(\"ChangeShape\" + msgJson.nRow);\r\n        var boxParent1 = this.boxParent.getChildren();\r\n        //初始化待变形数组\r\n        this.arrayChangeShape = [];\r\n        for (var i = msgJson.nRow; i >= 0; i--) {\r\n            if (this.userGroundChild[msgJson.nLine][i].getComponent(\"BoxState\").isBox) {\r\n                for (var l = 0; l <= boxParent1.length - 1; l++) {\r\n                    if (boxParent1[l].getPositionY() == this.userGroundChild[msgJson.nLine][i].getPositionY() && boxParent1[l].getPositionX() == this.userGroundChild[msgJson.nLine][i].getPositionX()) {\r\n                        this.arrayChangeShape.push(boxParent1[l]);\r\n                    }\r\n                }\r\n            }\r\n            if (i == 0) {\r\n                this.ActionChangeShape(this.arrayChangeShape, this.fScaleChange);\r\n            }\r\n        }\r\n    },\r\n    //打开下落动完成开关\r\n    StartActionDown: function () {\r\n        this.isActionDown = true;\r\n    },\r\n    //消除噗呦块后，上边的噗呦块下落\r\n    DestroyDown:function(nRow,nLine){\r\n        cc.log(nRow + \"BoxDown\");\r\n        var boxParent1 = this.boxParent.getChildren();\r\n        //存取该噗呦块的行\r\n        var nRow1 = nRow;\r\n        for (var i = nRow - 1; i >= 0; i--) {\r\n            if (this.userGroundChild[nLine][i].getComponent(\"BoxState\").isBox) {\r\n                 //初始化下落动作\r\n                 var actionDown = cc.moveTo(this.fActionDown, cc.p(this.userGroundChild[nLine][i + 1].getPositionX(), this.userGroundChild[nLine][i + 1].getPositionY()));\r\n                 //执行变换图片动画，下落到最低点移动压缩变形\r\n                 //从方块数组中找到噗呦块\r\n                 for (var l = 0; l <= boxParent1.length - 1; l++) {\r\n                     //执行变换图片动画，并移动压缩变形sssssssssssssss\r\n                     if (boxParent1[l].getPositionY() == this.userGroundChild[nLine][nRow1].getPositionY() && boxParent1[l].getPositionX() == this.userGroundChild[nLine][nRow1].getPositionX()) {\r\n                         boxParent1[l].rotation = 0;\r\n                         // //播放变换噗呦小块动画\r\n                         // boxParent1[l].getComponent(cc.Animation).play(\"1\");\r\n                         //初始位置回调\r\n                         // var loadPosition = cc.callFunc(this.LoadPosition(boxParent1[l], this.userGroundChild[nLine][i + 1], this.userGroundChild[nLine][i + 1].getPositionY()));\r\n                         var loadPosition = cc.callFunc(this.LoadPosition, this, { \"node\": boxParent1[l], \"positionX\": this.userGroundChild[nLine][i + 1].getPositionX(), \"positionY\": this.userGroundChild[nLine][i + 1].getPositionY() });\r\n                         //下落变形回调函数\r\n                         var changeShape1 = cc.callFunc(this.changeShape, this, { \"nRow\": i + 1, \"nLine\": nLine });\r\n                         var isChangeShape = false;\r\n                         for (var p = 0; p <= this.arrayChange.length - 1; p++) {\r\n                             if (this.arrayDown[this.arrayChange[p]].getPositionX() == boxParent1[l].getPositionX() && this.arrayDown[this.arrayChange[p]].getPositionY() == boxParent1[l].getPositionY()) {\r\n                                 isChangeShape = true;\r\n\r\n                             }\r\n                         }\r\n                         this.userGroundChild[nLine][nRow1].getComponent(\"BoxState\").isBox = false;\r\n                         this.userGroundChild[nLine][i + 1].getComponent(\"BoxState\").isBox = true;\r\n                         this.userGroundChild[nLine][i + 1].getComponent(\"BoxState\").stringColor = boxParent1[l].getComponent(\"InitPrefabState\").stringColor;\r\n                         this.userGroundChild[nLine][nRow1].getComponent(\"BoxState\").stringColor = \"\";\r\n                         if (isChangeShape) {\r\n                             var startChange = cc.callFunc(this.StartActionDown, this);\r\n                             boxParent1[l].runAction(cc.sequence(actionDown, loadPosition, startChange));\r\n                             //存取下落后待压缩噗呦块的行,列\r\n                             this.nRow2 = i + 1;\r\n                             this.nLine2 = nLine;\r\n                         }\r\n                         else {\r\n                             boxParent1[l].runAction(cc.sequence(actionDown, loadPosition));\r\n                         }\r\n                     }\r\n                 }\r\n                break;\r\n            }\r\n            if (i == 0 && this.userGroundChild[nLine][0].getComponent(\"BoxState\").isBox == false) {\r\n                //初始化下落动作\r\n                var actionDown = cc.moveTo(this.fActionDown, cc.p(this.userGroundChild[nLine][0].getPositionX(), this.userGroundChild[nLine][0].getPositionY()));\r\n                //执行变换图片动画，下落到最低点移动压缩变形\r\n                //从方块数组中找到噗呦块\r\n                for (var l = 0; l <= boxParent1.length - 1; l++) {\r\n                    //执行变换图片动画，并移动压缩变形sssssssssssssss\r\n                    if (boxParent1[l].getPositionY() == this.userGroundChild[nLine][nRow1].getPositionY() && boxParent1[l].getPositionX() == this.userGroundChild[nLine][nRow1].getPositionX()) {\r\n                        boxParent1[l].rotation = 0;\r\n                        // //播放变换噗呦小块动画\r\n                        // boxParent1[l].getComponent(cc.Animation).play(\"1\");\r\n                        //初始位置回调\r\n                        // var loadPosition = cc.callFunc(this.LoadPosition(boxParent1[l], this.userGroundChild[nLine][i + 1], this.userGroundChild[nLine][i + 1].getPositionY()));\r\n                        var loadPosition = cc.callFunc(this.LoadPosition, this, { \"node\": boxParent1[l], \"positionX\": this.userGroundChild[nLine][0].getPositionX(), \"positionY\": this.userGroundChild[nLine][0].getPositionY() });\r\n                        //下落变形回调函数\r\n                        var changeShape1 = cc.callFunc(this.changeShape, this, { \"nRow\": 0, \"nLine\": nLine });\r\n                        var isChangeShape = false;\r\n                        for (var p = 0; p <= this.arrayChange.length - 1; p++) {\r\n                            if (this.arrayDown[this.arrayChange[p]].getPositionX() == boxParent1[l].getPositionX() && this.arrayDown[this.arrayChange[p]].getPositionY() == boxParent1[l].getPositionY()) {\r\n                                isChangeShape = true;\r\n                            }\r\n                        }\r\n                        this.userGroundChild[nLine][nRow1].getComponent(\"BoxState\").isBox = false;\r\n                        this.userGroundChild[nLine][0].getComponent(\"BoxState\").isBox = true;\r\n                        this.userGroundChild[nLine][0].getComponent(\"BoxState\").stringColor = boxParent1[l].getComponent(\"InitPrefabState\").stringColor;\r\n                        this.userGroundChild[nLine][nRow1].getComponent(\"BoxState\").stringColor = \"\";\r\n                        // boxParent1[l].runAction(cc.sequence(actionDown, loadPosition));\r\n                        if (isChangeShape) {\r\n                            var startChange = cc.callFunc(this.StartActionDown, this);\r\n                            boxParent1[l].runAction(cc.sequence(actionDown, loadPosition, startChange));\r\n                            //存取下落后待压缩噗呦块的行,列\r\n                            this.nRow2 = 0;\r\n                            this.nLine2 = nLine;\r\n                        }\r\n                        else {\r\n                            boxParent1[l].runAction(cc.sequence(actionDown, loadPosition));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    },\r\n    //从该方块向下便利并下落\r\n    BoxDown: function (nRow, nLine) {\r\n        cc.log(nRow + \"BoxDown\");\r\n        var boxParent1 = this.boxParent.getChildren();\r\n        //存取该噗呦块的行\r\n        var nRow1 = nRow;\r\n        if (nRow == 0) {\r\n            //从方块数组中找到噗呦块\r\n            for (var l = 0; l <= boxParent1.length - 1; l++) {\r\n                //执行变换图片动画，并移动压缩变形\r\n                if (boxParent1[l].getPositionY() == this.userGroundChild[nLine][0].getPositionY() && boxParent1[l].getPositionX() == this.userGroundChild[nLine][0].getPositionX()) {\r\n                    this.userGroundChild[nLine][0].getComponent(\"BoxState\").isBox = true;\r\n                    this.userGroundChild[nLine][0].getComponent(\"BoxState\").stringColor = boxParent1[l].getComponent(\"InitPrefabState\").stringColor;\r\n                    //初始化噗呦块角度\r\n                    boxParent1[l].rotation = 0;\r\n                    // //播放变换噗呦小块动画\r\n                    // boxParent1[l].getComponent(cc.Animation).play(\"1\");\r\n                    var isChangeShape = false;  //是否变形判断\r\n                    for (var p = 0; p <= this.arrayChange.length - 1; p++) {\r\n                        if (this.arrayDown[this.arrayChange[p]].getPositionX() == boxParent1[l].getPositionX() && this.arrayDown[this.arrayChange[p]].getPositionY() == boxParent1[l].getPositionY()) {\r\n                            isChangeShape = true;\r\n                        }\r\n                    }\r\n                    if (isChangeShape) {\r\n                        //执行压缩变形\r\n                        this.ChangeShape(this, { \"nRow\": 0, \"nLine\": nLine });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (var i = nRow - 1; i >= 0; i--) {\r\n                if (this.userGroundChild[nLine][i].getComponent(\"BoxState\").isBox) {\r\n                    if (nRow1 - i <= 1) {\r\n                        //从方块数组中找到噗呦块\r\n                        for (var l = 0; l <= boxParent1.length - 1; l++) {\r\n                            //执行变换图片动画，并移动压缩变形\r\n                            if (boxParent1[l].getPositionY() == this.userGroundChild[nLine][nRow1].getPositionY() && boxParent1[l].getPositionX() == this.userGroundChild[nLine][nRow1].getPositionX()) {\r\n                                this.userGroundChild[nLine][nRow1].getComponent(\"BoxState\").isBox = true;\r\n                                this.userGroundChild[nLine][nRow1].getComponent(\"BoxState\").stringColor = boxParent1[l].getComponent(\"InitPrefabState\").stringColor;\r\n                                boxParent1[l].rotation = 0;\r\n                                // //播放变换噗呦小块动画\r\n                                // boxParent1[l].getComponent(cc.Animation).play(\"1\");\r\n                                var isChangeShape = false;\r\n                                for (var p = 0; p <= this.arrayChange.length - 1; p++) {\r\n                                    if (this.arrayDown[this.arrayChange[p]].getPositionX() == boxParent1[l].getPositionX() && this.arrayDown[this.arrayChange[p]].getPositionY() == boxParent1[l].getPositionY()) {\r\n                                        isChangeShape = true;\r\n                                    }\r\n                                }\r\n                                if (isChangeShape) {\r\n                                    cc.log(\"===================1111111111111111111111111111\");\r\n                                    //执行压缩变形\r\n                                    this.ChangeShape(this, { \"nRow\": nRow1, \"nLine\": nLine });\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        cc.log(\"////////////////////////\");\r\n                        //初始化下落动作\r\n                        var actionDown = cc.moveTo(this.fActionDown, cc.p(this.userGroundChild[nLine][i + 1].getPositionX(), this.userGroundChild[nLine][i + 1].getPositionY()));\r\n                        //执行变换图片动画，下落到最低点移动压缩变形\r\n                        //从方块数组中找到噗呦块\r\n                        for (var l = 0; l <= boxParent1.length - 1; l++) {\r\n                            //执行变换图片动画，并移动压缩变形sssssssssssssss\r\n                            if (boxParent1[l].getPositionY() == this.userGroundChild[nLine][nRow1].getPositionY() && boxParent1[l].getPositionX() == this.userGroundChild[nLine][nRow1].getPositionX()) {\r\n                                boxParent1[l].rotation = 0;\r\n                                // //播放变换噗呦小块动画\r\n                                // boxParent1[l].getComponent(cc.Animation).play(\"1\");\r\n                                //初始位置回调\r\n                                // var loadPosition = cc.callFunc(this.LoadPosition(boxParent1[l], this.userGroundChild[nLine][i + 1], this.userGroundChild[nLine][i + 1].getPositionY()));\r\n                                var loadPosition = cc.callFunc(this.LoadPosition, this, { \"node\": boxParent1[l], \"positionX\": this.userGroundChild[nLine][i + 1].getPositionX(), \"positionY\": this.userGroundChild[nLine][i + 1].getPositionY() });\r\n                                //下落变形回调函数\r\n                                var changeShape1 = cc.callFunc(this.changeShape, this, { \"nRow\": i + 1, \"nLine\": nLine });\r\n                                var isChangeShape = false;\r\n                                for (var p = 0; p <= this.arrayChange.length - 1; p++) {\r\n                                    if (this.arrayDown[this.arrayChange[p]].getPositionX() == boxParent1[l].getPositionX() && this.arrayDown[this.arrayChange[p]].getPositionY() == boxParent1[l].getPositionY()) {\r\n                                        isChangeShape = true;\r\n\r\n                                    }\r\n                                }\r\n                                this.userGroundChild[nLine][nRow1].getComponent(\"BoxState\").isBox = false;\r\n                                this.userGroundChild[nLine][i + 1].getComponent(\"BoxState\").isBox = true;\r\n                                this.userGroundChild[nLine][i + 1].getComponent(\"BoxState\").stringColor = boxParent1[l].getComponent(\"InitPrefabState\").stringColor;\r\n                                this.userGroundChild[nLine][nRow1].getComponent(\"BoxState\").stringColor = \"\";\r\n                                if (isChangeShape) {\r\n                                    var startChange = cc.callFunc(this.StartActionDown, this);\r\n                                    boxParent1[l].runAction(cc.sequence(actionDown, loadPosition, startChange));\r\n                                    //存取下落后待压缩噗呦块的行,列\r\n                                    this.nRow2 = i + 1;\r\n                                    this.nLine2 = nLine;\r\n                                }\r\n                                else {\r\n                                    boxParent1[l].runAction(cc.sequence(actionDown, loadPosition));\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                if (i == 0 && this.userGroundChild[nLine][0].getComponent(\"BoxState\").isBox == false) {\r\n                    //初始化下落动作\r\n                    var actionDown = cc.moveTo(this.fActionDown, cc.p(this.userGroundChild[nLine][0].getPositionX(), this.userGroundChild[nLine][0].getPositionY()));\r\n                    //执行变换图片动画，下落到最低点移动压缩变形\r\n                    //从方块数组中找到噗呦块\r\n                    for (var l = 0; l <= boxParent1.length - 1; l++) {\r\n                        //执行变换图片动画，并移动压缩变形sssssssssssssss\r\n                        if (boxParent1[l].getPositionY() == this.userGroundChild[nLine][nRow1].getPositionY() && boxParent1[l].getPositionX() == this.userGroundChild[nLine][nRow1].getPositionX()) {\r\n                            boxParent1[l].rotation = 0;\r\n                            // //播放变换噗呦小块动画\r\n                            // boxParent1[l].getComponent(cc.Animation).play(\"1\");\r\n                            //初始位置回调\r\n                            // var loadPosition = cc.callFunc(this.LoadPosition(boxParent1[l], this.userGroundChild[nLine][i + 1], this.userGroundChild[nLine][i + 1].getPositionY()));\r\n                            var loadPosition = cc.callFunc(this.LoadPosition, this, { \"node\": boxParent1[l], \"positionX\": this.userGroundChild[nLine][0].getPositionX(), \"positionY\": this.userGroundChild[nLine][0].getPositionY() });\r\n                            //下落变形回调函数\r\n                            var changeShape1 = cc.callFunc(this.changeShape, this, { \"nRow\": 0, \"nLine\": nLine });\r\n                            var isChangeShape = false;\r\n                            for (var p = 0; p <= this.arrayChange.length - 1; p++) {\r\n                                if (this.arrayDown[this.arrayChange[p]].getPositionX() == boxParent1[l].getPositionX() && this.arrayDown[this.arrayChange[p]].getPositionY() == boxParent1[l].getPositionY()) {\r\n                                    isChangeShape = true;\r\n                                }\r\n                            }\r\n                            this.userGroundChild[nLine][nRow1].getComponent(\"BoxState\").isBox = false;\r\n                            this.userGroundChild[nLine][0].getComponent(\"BoxState\").isBox = true;\r\n                            this.userGroundChild[nLine][0].getComponent(\"BoxState\").stringColor = boxParent1[l].getComponent(\"InitPrefabState\").stringColor;\r\n                            this.userGroundChild[nLine][nRow1].getComponent(\"BoxState\").stringColor = \"\";\r\n                            // boxParent1[l].runAction(cc.sequence(actionDown, loadPosition));\r\n                            if (isChangeShape) {\r\n                                var startChange = cc.callFunc(this.StartActionDown, this);\r\n                                boxParent1[l].runAction(cc.sequence(actionDown, loadPosition, startChange));\r\n                                //存取下落后待压缩噗呦块的行,列\r\n                                this.nRow2 = 0;\r\n                                this.nLine2 = nLine;\r\n                            }\r\n                            else {\r\n                                boxParent1[l].runAction(cc.sequence(actionDown, loadPosition));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n    },\r\n    //根据行列遍历背景方格的颜色,并消除\r\n    DisappearBox: function () {\r\n    },\r\n    //根据下落噗呦行列判断可消除噗呦块的行列\r\n    GetDisappearBox: function () {\r\n    },\r\n    //随机生成噗呦噗呦方块\r\n    GetBlock: function () {\r\n        //根据随机数随机设置方块的颜色数量\r\n        var nRandomNum = Math.floor(cc.random0To1() * 2);\r\n        this.nColor = 0;\r\n        this.stringColor = \"\";\r\n        this.stringColor1 = \"\";\r\n       \r\n        if (nRandomNum == 1) {\r\n            //颜色数量\r\n            this.nColor1 = 1;\r\n            //随机颜色\r\n            var stringRandom = Math.floor(cc.random0To1() * 3);\r\n            switch (stringRandom) {\r\n                //随机颜色为红色\r\n                case 0:\r\n                    this.stringColor = \"red\";\r\n                    break;\r\n                //随机颜色为蓝色\r\n                case 1:\r\n                    this.stringColor = \"blue\";\r\n                    break;\r\n                //随机颜色为绿色\r\n                case 2:\r\n                    this.stringColor = \"green\";\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            this.nColor1 = 2;\r\n            //随机颜色\r\n            var stringRandom = Math.floor(cc.random0To1() * 3);\r\n            cc.log(stringRandom);\r\n            switch (stringRandom) {\r\n                case 0:\r\n                    this.stringColor = \"blue\";\r\n                    this.stringColor1 = \"green\";\r\n                    break;\r\n                case 1:\r\n                    this.stringColor = \"red\";\r\n                    this.stringColor1 = \"green\";\r\n                    break;\r\n                case 2:\r\n                    this.stringColor = \"red\";\r\n                    this.stringColor1 = \"blue\";\r\n                    break;\r\n            }\r\n        }\r\n        //声明颜色数组s\r\n        //   this.colorBlock=[\"blue\",\"green\",\"red\"];\r\n        //声明形状数组\r\n        this.shapeBlock = [\"L\", \"Long\", \"Square\"];\r\n        this.nColor = Math.floor(cc.random0To1() * 3);\r\n        this.nShape = Math.floor(cc.random0To1() * 3);\r\n        this.nRotate = Math.floor(cc.random0To1() * 2);\r\n       \r\n        //根据浦友浦友形状生成\r\n        this.IsShape(this.shapeBlock, this.nShape);\r\n    },\r\n    //根据噗呦方块类型设置位置\r\n    setBlockPosition: function (stringShape1) {\r\n        switch (stringShape1) {\r\n            case \"Square\":\r\n                var v2WorldY = this.groundParent.getPositionY() + 12 * Global.nWidthPuYo + Global.nWidthPuYo / 2;\r\n                var v1WorldX = this.groundParent.getPositionX() + 2 * Global.nWidthPuYo + Global.nWidthPuYo / 2;\r\n                return cc.p(v1WorldX, v2WorldY);\r\n                break;\r\n            case \"L\":\r\n                var v2WorldY = this.groundParent.getPositionY() + 12 * Global.nWidthPuYo;\r\n                var v1WorldX = this.groundParent.getPositionX() + 2 * Global.nWidthPuYo;\r\n                return cc.p(v1WorldX, v2WorldY);\r\n                break;\r\n            case \"Long\":\r\n                var v2WorldY = this.groundParent.getPositionY() + 12 * Global.nWidthPuYo;\r\n                var v1WorldX = this.groundParent.getPositionX() + 2 * Global.nWidthPuYo;\r\n                return cc.p(v1WorldX, v2WorldY);\r\n                break;\r\n        }\r\n    },\r\n    //判断方块形状\r\n    IsShape: function (stringShape, nShape) {\r\n        switch (stringShape[nShape]) {\r\n            case \"L\":\r\n                //生成方块\r\n                this.CopyBlock(this.prefabL, \"L\");\r\n                var nodeBlockChild = this.nodeBlock.getChildren();\r\n                cc.log(this.nodeBlock.getPosition());\r\n                var self = this;\r\n                // var self = this;\r\n                if (this.nColor1 == 1) {\r\n                    self.nodeBlock.getComponent(\"PuyoDown\").nColor = 1;\r\n                    // nodeBlockChild[0].rotation=90;\r\n                    cc.loader.loadRes(\"Game2/\" + self.stringColor, cc.SpriteFrame, function (err, txt) {\r\n                        nodeBlockChild[0].getComponent(cc.Sprite).spriteFrame = txt;\r\n                        nodeBlockChild[0].getComponent(\"InitPrefabState\").stringColor = self.stringColor;\r\n                    });\r\n                    var nRandom = Math.floor(cc.random0To1() * 2);\r\n                    if (nRandom == 0) {\r\n                        cc.loader.loadRes(\"Game2/\" + self.stringColor, cc.SpriteFrame, function (err, txt) {\r\n                            nodeBlockChild[1].getComponent(cc.Sprite).spriteFrame = txt;\r\n                            nodeBlockChild[1].getComponent(\"InitPrefabState\").stringColor = self.stringColor;\r\n                        });\r\n                        cc.loader.loadRes(\"Game2/\" + self.stringColor, cc.SpriteFrame, function (err, txt) {\r\n                            nodeBlockChild[2].getComponent(cc.Sprite).spriteFrame = txt;\r\n                            nodeBlockChild[2].getComponent(\"InitPrefabState\").stringColor = self.stringColor;\r\n                        });\r\n                    }\r\n                    else {\r\n                        cc.loader.loadRes(\"Game2/\" + self.stringColor, cc.SpriteFrame, function (err, txt) {\r\n                            nodeBlockChild[1].getComponent(cc.Sprite).spriteFrame = txt;\r\n                            nodeBlockChild[1].getComponent(\"InitPrefabState\").stringColor = self.stringColor;\r\n                        });\r\n                        cc.loader.loadRes(\"Game2/\" + self.stringColor, cc.SpriteFrame, function (err, txt) {\r\n                            nodeBlockChild[2].getComponent(cc.Sprite).spriteFrame = txt;\r\n                            nodeBlockChild[2].getComponent(\"InitPrefabState\").stringColor = self.stringColor;\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    self.nodeBlock.getComponent(\"PuyoDown\").nColor = 2;\r\n                    cc.loader.loadRes(\"Game2/\" + self.stringColor, cc.SpriteFrame, function (err, txt) {\r\n                        nodeBlockChild[0].getComponent(cc.Sprite).spriteFrame = txt;\r\n                        nodeBlockChild[0].getComponent(\"InitPrefabState\").stringColor = self.stringColor;\r\n                    });\r\n                    var nRandom = Math.floor(cc.random0To1() * 2);\r\n                    if (nRandom == 0) {\r\n                        cc.loader.loadRes(\"Game2/\" + self.stringColor, cc.SpriteFrame, function (err, txt) {\r\n                            nodeBlockChild[1].getComponent(cc.Sprite).spriteFrame = txt;\r\n                            nodeBlockChild[1].getComponent(\"InitPrefabState\").stringColor = self.stringColor;\r\n                        });\r\n                        cc.loader.loadRes(\"Game2/\" + self.stringColor1, cc.SpriteFrame, function (err, txt) {\r\n                            nodeBlockChild[2].getComponent(cc.Sprite).spriteFrame = txt;\r\n                            nodeBlockChild[2].getComponent(\"InitPrefabState\").stringColor = self.stringColor1;\r\n                        });\r\n                    }\r\n                    else {\r\n                        nodeBlockChild[0].rotation = 90;\r\n                        cc.loader.loadRes(\"Game2/\" + self.stringColor1, cc.SpriteFrame, function (err, txt) {\r\n                            nodeBlockChild[1].getComponent(cc.Sprite).spriteFrame = txt;\r\n                            nodeBlockChild[1].getComponent(\"InitPrefabState\").stringColor = self.stringColor1;\r\n                        });\r\n                        cc.loader.loadRes(\"Game2/\" + self.stringColor, cc.SpriteFrame, function (err, txt) {\r\n                            nodeBlockChild[2].getComponent(cc.Sprite).spriteFrame = txt;\r\n                            nodeBlockChild[2].getComponent(\"InitPrefabState\").stringColor = self.stringColor;\r\n                        });\r\n                    }\r\n                }\r\n                //  //判断方块颜色\r\n                //  this.IsColor(this.colorBlock,this.nColor);\r\n                //  this.IsRotate(this.rotateBlock,this.nRotate,\"T\");     \r\n                //  this.nRotateAngle   \r\n                break;\r\n            case \"Long\":\r\n                this.CopyBlock(this.prefabLong, \"Long\");\r\n                var self = this;\r\n                var nodeBlockChild = this.nodeBlock.getChildren();\r\n                cc.log(this.nodeBlock.getPosition());\r\n                if (this.nColor1 == 1) {\r\n                    self.nodeBlock.getComponent(\"PuyoDown\").nColor = 1;\r\n                    cc.loader.loadRes(\"Game2/\" + self.stringColor, cc.SpriteFrame, function (err, txt) {\r\n                        nodeBlockChild[0].getComponent(cc.Sprite).spriteFrame = txt;\r\n                        nodeBlockChild[0].getComponent(\"InitPrefabState\").stringColor = self.stringColor;\r\n                    });\r\n                    cc.loader.loadRes(\"Game2/\" + self.stringColor, cc.SpriteFrame, function (err, txt) {\r\n                        nodeBlockChild[1].getComponent(cc.Sprite).spriteFrame = txt;\r\n                        nodeBlockChild[1].getComponent(\"InitPrefabState\").stringColor = self.stringColor;\r\n                    });\r\n                }\r\n                else {\r\n                    self.nodeBlock.getComponent(\"PuyoDown\").nColor = 2;\r\n                    cc.loader.loadRes(\"Game2/\" + self.stringColor, cc.SpriteFrame, function (err, txt) {\r\n                        nodeBlockChild[0].getComponent(cc.Sprite).spriteFrame = txt;\r\n                        nodeBlockChild[0].getComponent(\"InitPrefabState\").stringColor = self.stringColor;\r\n                    });\r\n                    cc.log(\"Long\" + this.stringColor1);\r\n                    cc.loader.loadRes(\"Game2/\" + self.stringColor1, cc.SpriteFrame, function (err, txt) {\r\n                        nodeBlockChild[1].getComponent(cc.Sprite).spriteFrame = txt;\r\n                        cc.log(\"Long\" + nodeBlockChild[1].getComponent(cc.Sprite).spriteFrame);\r\n                        nodeBlockChild[1].getComponent(\"InitPrefabState\").stringColor = self.stringColor1;\r\n                    });\r\n                }\r\n                //  this.CopyBlock(this.prefabLong,\"Long\");\r\n                //  //判断方块颜色\r\n                //  this.IsColor(this.colorBlock,this.nColor);   \r\n                //  this.IsRotate(this.rotateBlock,this.nRotate,\"Long\");     \r\n                break;\r\n            case \"Square\":\r\n                var self = this;\r\n                if (this.nColor1 == 1) {\r\n                    this.CopyBlock(this.prefabSquare1, \"Square\");\r\n                    var nodeBlockChild = this.nodeBlock.getChildren();\r\n                    switch (this.stringColor) {\r\n                        case \"red\":\r\n                            for (var i = 0; i <= 3; i++) {\r\n                                nodeBlockChild[i].getComponent(cc.Animation).play(\"ChangeRed\");\r\n                                nodeBlockChild[i].getComponent(\"InitPrefabState\").stringColor = \"red\";\r\n                            }\r\n                            this.nodeBlock.getComponent(\"PuyoDown\").nColor = 1;\r\n                            break;\r\n                        case \"green\":\r\n                            for (var i = 0; i <= 3; i++) {\r\n                                nodeBlockChild[i].getComponent(cc.Animation).play(\"ChangeGreen\");\r\n                                nodeBlockChild[i].getComponent(\"InitPrefabState\").stringColor = \"green\";\r\n                            }\r\n                            this.nodeBlock.getComponent(\"PuyoDown\").nColor = 1;\r\n                            break;\r\n                        case \"blue\":\r\n                            for (var i = 0; i <= 3; i++) {\r\n                                nodeBlockChild[i].getComponent(\"InitPrefabState\").stringColor = \"blue\";\r\n                            }\r\n                            this.nodeBlock.getComponent(\"PuyoDown\").nColor = 1;\r\n                            break;\r\n                    }\r\n                    cc.log(this.nodeBlock.getPosition());\r\n                    // cc.log(self.stringColor);\r\n                    // cc.log(self.nodeBlock);\r\n                    // cc.loader.loadRes(\"Game2/1\" + self.stringColor, cc.SpriteFrame, function (err, txt) {\r\n                    //     self.nodeBlock.getComponent(cc.Sprite).spriteFrame = txt;\r\n                    //     self.nodeBlock.getComponent(\"InitPrefabState\").stringColor = self.stringColor;\r\n                    //     self.nodeBlock.getComponent(\"PuyoDown\").nColor = 1;\r\n                    // });\r\n                }\r\n                else {\r\n                    this.CopyBlock(this.prefabSquare, \"Square\");\r\n                    cc.log(this.nodeBlock.getPosition());\r\n                    var nodeBlockChild = this.nodeBlock.getChildren();\r\n                    var nRandom = Math.floor(cc.random0To1() * 2);\r\n                    if (nRandom == 0) {\r\n                        switch (this.stringColor) {\r\n                            case \"red\":\r\n                                nodeBlockChild[0].getComponent(\"InitPrefabState\").stringColor = \"red\";\r\n                                nodeBlockChild[2].getComponent(\"InitPrefabState\").stringColor = \"red\";\r\n                                break;\r\n                            case \"green\":\r\n                                nodeBlockChild[0].getComponent(\"InitPrefabState\").stringColor = \"green\";\r\n                                nodeBlockChild[2].getComponent(\"InitPrefabState\").stringColor = \"green\";\r\n                                nodeBlockChild[0].getComponent(cc.Animation).play(\"ChangeGreen1\");\r\n                                nodeBlockChild[2].getComponent(cc.Animation).play(\"ChangeGreen1\");\r\n                                break;\r\n                            case \"blue\":\r\n                                nodeBlockChild[0].getComponent(\"InitPrefabState\").stringColor = \"blue\";\r\n                                nodeBlockChild[2].getComponent(\"InitPrefabState\").stringColor = \"blue\";\r\n                                nodeBlockChild[0].getComponent(cc.Animation).play(\"ChangeBlue1\");\r\n                                nodeBlockChild[2].getComponent(cc.Animation).play(\"ChangeBlue1\");\r\n                                break;\r\n                        }\r\n                        switch (this.stringColor1) {\r\n                            case \"red\":\r\n                                nodeBlockChild[1].getComponent(\"InitPrefabState\").stringColor = \"red\";\r\n                                nodeBlockChild[3].getComponent(\"InitPrefabState\").stringColor = \"red\";\r\n                                nodeBlockChild[1].getComponent(cc.Animation).play(\"ChangeRed1\");\r\n                                nodeBlockChild[3].getComponent(cc.Animation).play(\"ChangeRed1\");\r\n                                break;\r\n                            case \"green\":\r\n                                nodeBlockChild[1].getComponent(\"InitPrefabState\").stringColor = \"green\";\r\n                                nodeBlockChild[3].getComponent(\"InitPrefabState\").stringColor = \"green\";\r\n                                nodeBlockChild[1].getComponent(cc.Animation).play(\"ChangeGreen1\");\r\n                                nodeBlockChild[3].getComponent(cc.Animation).play(\"ChangeGreen1\");\r\n                                break;\r\n                            case \"blue\":\r\n                                nodeBlockChild[1].getComponent(\"InitPrefabState\").stringColor = \"blue\";\r\n                                nodeBlockChild[3].getComponent(\"InitPrefabState\").stringColor = \"blue\";\r\n                                // nodeBlockChild[1].getComponent(cc.Animation).play(\"ChangeBlue1\");\r\n                                // nodeBlockChild[3].getComponent(cc.Animation).play(\"ChangeBlue1\");\r\n                                break;\r\n                        }\r\n                        this.nodeBlock.getComponent(\"PuyoDown\").nColor = 2;\r\n                    }\r\n                    else {\r\n                        switch (this.stringColor1) {\r\n                            case \"red\":\r\n                                nodeBlockChild[0].getComponent(\"InitPrefabState\").stringColor = \"red\";\r\n                                nodeBlockChild[2].getComponent(\"InitPrefabState\").stringColor = \"red\";\r\n                                break;\r\n                            case \"green\":\r\n                                nodeBlockChild[0].getComponent(\"InitPrefabState\").stringColor = \"green\";\r\n                                nodeBlockChild[2].getComponent(\"InitPrefabState\").stringColor = \"green\";\r\n                                nodeBlockChild[0].getComponent(cc.Animation).play(\"ChangeGreen1\");\r\n                                nodeBlockChild[2].getComponent(cc.Animation).play(\"ChangeGreen1\");\r\n                                break;\r\n                            case \"blue\":\r\n                                nodeBlockChild[0].getComponent(\"InitPrefabState\").stringColor = \"blue\";\r\n                                nodeBlockChild[2].getComponent(\"InitPrefabState\").stringColor = \"blue\";\r\n                                nodeBlockChild[0].getComponent(cc.Animation).play(\"ChangeBlue1\");\r\n                                nodeBlockChild[2].getComponent(cc.Animation).play(\"ChangeBlue1\");\r\n                                break;\r\n                        }\r\n                        switch (this.stringColor) {\r\n                            case \"red\":\r\n                                nodeBlockChild[1].getComponent(\"InitPrefabState\").stringColor = \"red\";\r\n                                nodeBlockChild[3].getComponent(\"InitPrefabState\").stringColor = \"red\";\r\n                                nodeBlockChild[1].getComponent(cc.Animation).play(\"ChangeRed1\");\r\n                                nodeBlockChild[3].getComponent(cc.Animation).play(\"ChangeRed1\");\r\n                                break;\r\n                            case \"green\":\r\n                                nodeBlockChild[1].getComponent(\"InitPrefabState\").stringColor = \"green\";\r\n                                nodeBlockChild[3].getComponent(\"InitPrefabState\").stringColor = \"green\";\r\n                                nodeBlockChild[1].getComponent(cc.Animation).play(\"ChangeGreen1\");\r\n                                nodeBlockChild[3].getComponent(cc.Animation).play(\"ChangeGreen1\");\r\n                                break;\r\n                            case \"blue\":\r\n                                nodeBlockChild[1].getComponent(\"InitPrefabState\").stringColor = \"blue\";\r\n                                nodeBlockChild[3].getComponent(\"InitPrefabState\").stringColor = \"blue\";\r\n                                // nodeBlockChild[1].getComponent(cc.Animation).play(\"ChangeBlue1\");\r\n                                // nodeBlockChild[3].getComponent(cc.Animation).play(\"ChangeBlue1\");\r\n                                break;\r\n                        }\r\n                        this.nodeBlock.getComponent(\"PuyoDown\").nColor = 2;\r\n                    }\r\n                    // if (nRandom == 0) {\r\n\r\n                    //     // cc.loader.loadRes(\"Game2/1\" + self.stringColor, cc.SpriteFrame, function (err, txt) {\r\n                    //     //     nodeBlockChild[0].getComponent(cc.Sprite).spriteFrame = txt;\r\n                    //     //     nodeBlockChild[0].getComponent(\"InitPrefabState\").stringColor = self.stringColor;\r\n                    //     //     nodeBlockChild[0].getComponent(\"InitPrefabState\").nColor = 2;\r\n                    //     // });\r\n                    //     // cc.loader.loadRes(\"Game2/1\" + self.stringColor1, cc.SpriteFrame, function (err, txt) {\r\n                    //     //     nodeBlockChild[1].getComponent(cc.Sprite).spriteFrame = txt;\r\n                    //     //     nodeBlockChild[1].getComponent(\"InitPrefabState\").stringColor = self.stringColor1;\r\n\r\n                    //     // });\r\n                    //     // this.nodeBlock.getComponent(\"PuyoDown\").nColor = 2;\r\n                    // }\r\n                    // else {\r\n                    //     switch (this.stringColor1) {\r\n                    //         case \"red\":\r\n                    //             nodeBlockChild[0].getComponent(\"InitPrefabState\").stringColor = \"red\";\r\n                    //             nodeBlockChild[2].getComponent(\"InitPrefabState\").stringColor = \"red\";   \r\n                    //             break;\r\n                    //         case \"green\":\r\n                    //             nodeBlockChild[0].getComponent(\"InitPrefabState\").stringColor = \"green\";\r\n                    //             nodeBlockChild[2].getComponent(\"InitPrefabState\").stringColor = \"green\";\r\n                    //             nodeBlockChild[0].getComponent(cc.Animation).play(\"ChangeGreen1\");\r\n                    //             nodeBlockChild[2].getComponent(cc.Animation).play(\"ChangeGreen1\");      \r\n                    //             break;\r\n                    //         case \"blue\":\r\n                    //             nodeBlockChild[0].getComponent(\"InitPrefabState\").stringColor = \"blue\";\r\n                    //             nodeBlockChild[2].getComponent(\"InitPrefabState\").stringColor = \"blue\";\r\n                    //             nodeBlockChild[0].getComponent(cc.Animation).play(\"ChangeBlue1\");\r\n                    //             nodeBlockChild[2].getComponent(cc.Animation).play(\"ChangeBlue1\");\r\n                    //             break;\r\n                    //     }\r\n                    //     switch (this.stringColor) {\r\n                    //         case \"red\":\r\n                    //             nodeBlockChild[1].getComponent(\"InitPrefabState\").stringColor = \"red\";\r\n                    //             nodeBlockChild[3].getComponent(\"InitPrefabState\").stringColor = \"red\";\r\n                    //             nodeBlockChild[1].getComponent(cc.Animation).play(\"ChangeRed1\");\r\n                    //             nodeBlockChild[3].getComponent(cc.Animation).play(\"ChangeRed1\");    \r\n                    //             break;\r\n                    //         case \"green\":\r\n                    //             nodeBlockChild[1].getComponent(\"InitPrefabState\").stringColor = \"green\";\r\n                    //             nodeBlockChild[3].getComponent(\"InitPrefabState\").stringColor = \"green\";\r\n                    //             nodeBlockChild[1].getComponent(cc.Animation).play(\"ChangeGreen1\");\r\n                    //             nodeBlockChild[3].getComponent(cc.Animation).play(\"ChangeGreen1\");  \r\n                    //             break;\r\n                    //         case \"blue\":\r\n                    //             nodeBlockChild[1].getComponent(\"InitPrefabState\").stringColor = \"blue\";\r\n                    //             nodeBlockChild[3].getComponent(\"InitPrefabState\").stringColor = \"blue\";\r\n                    //             // nodeBlockChild[1].getComponent(cc.Animation).play(\"ChangeBlue1\");\r\n                    //             // nodeBlockChild[3].getComponent(cc.Animation).play(\"ChangeBlue1\");\r\n                    //             break;\r\n                    //     }\r\n                    //     this.nodeBlock.getComponent(\"PuyoDown\").nColor = 2;\r\n                    // }\r\n                }\r\n                break;\r\n        }\r\n    },\r\n    //遍历噗呦方块并随机赋值位置\r\n    CreatPosition: function () {\r\n        //存取方块的 固定行列数组\r\n        this.nodeBlock.setPosition(this.setBlockPosition(this.shapeBlock[this.nShape]));\r\n    },\r\n    //生成方块\r\n    CopyBlock: function (prefabLBlock, stringShape1) {\r\n        //生成噗呦方块\r\n        this.nodeBlock = cc.instantiate(prefabLBlock);\r\n        //设置方块的父体\r\n        this.nodeBlock.parent = this.downBoxParent;\r\n        //获取此时方块的形状\r\n        this.nodeBlock.getComponent(\"PuyoDown\").stringBoloekShape = stringShape1;\r\n        //存取方块的 固定行列数组\r\n        this.nodeBlock.setPosition(this.setBlockPosition(this.shapeBlock[this.nShape]));\r\n        // this.nodeBlock.setPosition(0,0);\r\n    },\r\n    //获取子块在地板父体下的坐标\r\n    GetBoxNode: function (childBox) {\r\n        if (this.nodeBlock.getComponent(\"PuyoDown\").stringBoloekShape == \"Long\" && this.nodeBlock.getComponent(\"PuyoDown\").nColor == 2) {\r\n            this.nPositionX = childBox.getPositionX();\r\n            this.nPositionY = childBox.getPositionY();\r\n        }\r\n        else {\r\n            switch (this.nodeBlock.getComponent(\"PuyoDown\").nRotateAngle) {\r\n                case 0:\r\n                    //赋值实际坐标\r\n                    this.nPositionX = childBox.getPositionX();\r\n                    this.nPositionY = childBox.getPositionY();\r\n                    break;\r\n                case 90:\r\n                    this.nPositionX = childBox.getPositionY();\r\n                    this.nPositionY = -childBox.getPositionX();\r\n                    break;\r\n                case 180:\r\n                    this.nPositionX = -childBox.getPositionX();\r\n                    this.nPositionY = -childBox.getPositionY();\r\n                    break;\r\n                case 270:\r\n                    this.nPositionX = -childBox.getPositionY();\r\n                    this.nPositionY = childBox.getPositionX();\r\n                    break;\r\n            }\r\n        }\r\n        //获取子块在地板附体下的行列\r\n        var nX = (this.nPositionX + this.nodeBlock.getPositionX() - this.groundParent.getPositionX()) / Global.nWidthPuYo + 1;\r\n        var nY = (this.nPositionY + this.nodeBlock.getPositionY() - this.groundParent.getPositionY()) / Global.nWidthPuYo + 1;\r\n        cc.log(nX);\r\n        cc.log(nY);\r\n        var x = this.userGroundChild[nX - 1][nY - 1].getPositionX();\r\n        var y = this.userGroundChild[nX - 1][nY - 1].getPositionY();\r\n        return cc.p(x, y);\r\n    },\r\n    start() {\r\n    },\r\n    //遍历带下落数组并判断可执行压缩噗呦块的下标\r\n    GetShapeSign: function (array) {\r\n        //初始化可压缩噗呦块数组\r\n        this.arrayChange = [];\r\n        var arrayLine = [];\r\n        for (var i = 0; i <= array.length - 1; i++) {\r\n            inner:\r\n            for (var j = 0; j <= array.length - 1; j++) {\r\n                if (array[i].getPositionX() == array[j].getPositionX() && array[i].getPositionY() == array[j].getPositionY()) {\r\n                    continue inner;\r\n                }\r\n                else {\r\n                    if (array[i].getPositionX() == array[j].getPositionX()) {\r\n                        if (array[i].getPositionY() > array[j].getPositionY()) {\r\n                            if (this.arrayChange.includes(i)) {\r\n                                continue inner;\r\n                            }\r\n                            else {\r\n                                arrayLine.push(array[i].getPositionX());\r\n                                this.arrayChange.push(i);\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        if (this.arrayChange.includes(i)) {\r\n                            continue inner;\r\n                        }\r\n                        else {\r\n                            //判断此噗呦块是否是一列中最高的\r\n                            var isTall = false;\r\n                            for (var k = 0; k <= array.length - 1; k++) {\r\n                                if (array[i].getPositionY() < array[k].getPositionY()) {\r\n                                    if (array[i].getPositionX() == array[k].getPositionX()) {\r\n                                        isTall = true;\r\n                                    }\r\n                                }\r\n                                if (k == array.length - 1 && isTall == false) {\r\n                                    this.arrayChange.push(i);\r\n                                }\r\n                            }\r\n                            // if (array[i].getPositionY() > array[j].getPositionY()) {\r\n                            //     if (this.arrayChange.includes(i)) {\r\n                            //         continue inner;\r\n\r\n                            //     }\r\n                            //     else {\r\n                            //         if (arrayLine.includes(array[i].getPositionX())) {\r\n                            //             continue inner;\r\n                            //         }\r\n                            //         else {\r\n                            //             arrayLine.push(array[i].getPositionX());\r\n                            //             this.arrayChange.push(i);\r\n                            //         }\r\n                            //     }\r\n                            // }\r\n                            // else {\r\n                            //     if (this.arrayChange.includes(j)) {\r\n                            //         continue inner;\r\n                            //     }\r\n                            //     else {\r\n                            //         if (arrayLine.includes(array[j].getPositionX())) {\r\n                            //             continue inner;\r\n                            //         }\r\n                            //         else {\r\n                            //             arrayLine.push(array[j].getPositionX());\r\n                            //             this.arrayChange.push(j);\r\n                            //         }\r\n                            //     }\r\n                            // }\r\n                        }\r\n                        //                   \r\n                        // if (arrayLine.includes(array[i].getPositionX())) {\r\n                        //     continue inner;\r\n                        // }\r\n                        // else {\r\n                        //     arrayLine.push(array[i].getPositionX());\r\n                        //     this.arrayChange.push(i);\r\n                        // }\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    //根据坐标计算噗呦块的行数\r\n    CountRow: function (fPositinoY) {\r\n        var nRow = fPositinoY / Global.nWidthPuYo;\r\n        return nRow;\r\n    },\r\n    //根据坐标计算噗呦块的列数\r\n    CountLine: function (fPositinoX) {\r\n        var nLine = fPositinoX / Global.nWidthPuYo;\r\n        return nLine;\r\n    },\r\n    //根据不同的方向确定要改变的形状\r\n    SureShape: function (nArratLength, row, line, arraySign) {\r\n        cc.log();\r\n        var arrayBox = this.boxParent.getChildren();\r\n        switch (nArratLength) {\r\n            case 0:\r\n                for (var i = 0; i <= this.arrayDown.length-1-1; i++) {\r\n                    if (this.arrayDown[i].getPositionX() == arrayBox[arraySign].getPositionX() && this.arrayDown[i].getPositionY() == arrayBox[arraySign].getPositionY()) {\r\n                        //判断此噗呦块是否是本次下落数组中的噗呦块\r\n                        this.arrayPositionX.push(arrayBox[arraySign].getPositionX());\r\n                        this.arrayPositionY.push(arrayBox[arraySign].getPositionY());\r\n                    }\r\n                }\r\n                break;\r\n            case 1:\r\n                switch (this.stringConnectDirection) {\r\n                    case \"1\":\r\n                        for (var i = 0; i <= this.arrayDown.length-1; i++) {\r\n                            if (this.arrayDown[i].getPositionX() == arrayBox[arraySign].getPositionX() && this.arrayDown[i].getPositionY() == arrayBox[arraySign].getPositionY()) {\r\n                                //判断此噗呦块是否是本次下落数组中的噗呦块\r\n                                this.arrayPositionX.push(arrayBox[arraySign].getPositionX());\r\n                                this.arrayPositionY.push(arrayBox[arraySign].getPositionY());\r\n                            }\r\n                        }\r\n                        arrayBox[arraySign].destroy();\r\n                        arrayBox[arraySign].setPosition(-1000, -1000);\r\n                        //生成新噗呦块\r\n                        var nodePuyo = cc.instantiate(this.prefab1);\r\n                        var nodeChild = nodePuyo.getChildren();\r\n                        nodePuyo.parent = this.boxParent;\r\n                        nodePuyo.setPosition(this.userGroundChild[line][row].getPositionX(), this.userGroundChild[line][row].getPositionY());\r\n\r\n                        switch (this.userGroundChild[line][row].getComponent(\"BoxState\").stringColor) {\r\n                            case \"blue\":\r\n                                nodeChild[0].rotation = 180;\r\n                                break;\r\n                            case \"red\":\r\n                                nodeChild[0].getComponent(cc.Animation).play(\"Change2B_1Red\");\r\n                                nodeChild[0].rotation = 180;\r\n                                break;\r\n                            case \"green\":\r\n                                nodeChild[0].getComponent(cc.Animation).play(\"Change2B_1Green\");\r\n                                nodeChild[0].rotation = 180;\r\n                                break;\r\n                        }\r\n                        break;\r\n                    case \"2\":\r\n                        for (var i = 0; i <= this.arrayDown.length-1; i++) {\r\n                            if (this.arrayDown[i].getPositionX() == arrayBox[arraySign].getPositionX() && this.arrayDown[i].getPositionY() == arrayBox[arraySign].getPositionY()) {\r\n                                //判断此噗呦块是否是本次下落数组中的噗呦块\r\n                                this.arrayPositionX.push(arrayBox[arraySign].getPositionX());\r\n                                this.arrayPositionY.push(arrayBox[arraySign].getPositionY());\r\n                            }\r\n                        }\r\n                        arrayBox[arraySign].destroy();\r\n                        arrayBox[arraySign].setPosition(-1000, -1000);\r\n                        //生成新噗呦块\r\n                        var nodePuyo = cc.instantiate(this.prefab1);\r\n                        var nodeChild = nodePuyo.getChildren();\r\n                        nodePuyo.parent = this.boxParent;\r\n                        nodePuyo.setPosition(this.userGroundChild[line][row].getPositionX(), this.userGroundChild[line][row].getPositionY());\r\n\r\n                        switch (this.userGroundChild[line][row].getComponent(\"BoxState\").stringColor) {\r\n                            case \"blue\":\r\n                                break;\r\n                            case \"red\":\r\n                                nodeChild[0].getComponent(cc.Animation).play(\"Change2B_1Red\");\r\n                                break;\r\n                            case \"green\":\r\n                                nodeChild[0].getComponent(cc.Animation).play(\"Change2B_1Green\");\r\n                                break;\r\n                        }\r\n                        break;\r\n                    case \"3\":\r\n                        for (var i = 0; i <= this.arrayDown.length-1; i++) {\r\n                            if (this.arrayDown[i].getPositionX() == arrayBox[arraySign].getPositionX() && this.arrayDown[i].getPositionY() == arrayBox[arraySign].getPositionY()) {\r\n                                //判断此噗呦块是否是本次下落数组中的噗呦块\r\n                                this.arrayPositionX.push(arrayBox[arraySign].getPositionX());\r\n                                this.arrayPositionY.push(arrayBox[arraySign].getPositionY());\r\n                            }\r\n                        }\r\n                        arrayBox[arraySign].destroy();\r\n                        arrayBox[arraySign].setPosition(-1000, -1000);\r\n                        //生成新噗呦块\r\n                        var nodePuyo = cc.instantiate(this.prefab1);\r\n                        var nodeChild = nodePuyo.getChildren();\r\n                        nodePuyo.parent = this.boxParent;\r\n                        nodePuyo.setPosition(this.userGroundChild[line][row].getPositionX(), this.userGroundChild[line][row].getPositionY());\r\n\r\n                        switch (this.userGroundChild[line][row].getComponent(\"BoxState\").stringColor) {\r\n                            case \"blue\":\r\n                                nodeChild[0].rotation = 90;\r\n                                break;\r\n                            case \"red\":\r\n                                nodeChild[0].getComponent(cc.Animation).play(\"Change2B_1Red\");\r\n                                nodeChild[0].rotation = 90;\r\n                                break;\r\n                            case \"green\":\r\n                                nodeChild[0].getComponent(cc.Animation).play(\"Change2B_1Green\");\r\n                                nodeChild[0].rotation = 90;\r\n                                break;\r\n                        }\r\n                        break;\r\n                    case \"4\":\r\n                        for (var i = 0; i <= this.arrayDown.length-1; i++) {\r\n                            if (this.arrayDown[i].getPositionX() == arrayBox[arraySign].getPositionX() && this.arrayDown[i].getPositionY() == arrayBox[arraySign].getPositionY()) {\r\n                                //判断此噗呦块是否是本次下落数组中的噗呦块\r\n                                this.arrayPositionX.push(arrayBox[arraySign].getPositionX());\r\n                                this.arrayPositionY.push(arrayBox[arraySign].getPositionY());\r\n                            }\r\n                        }\r\n                        arrayBox[arraySign].destroy();\r\n                        arrayBox[arraySign].setPosition(-1000, -1000);\r\n                        //生成新噗呦块\r\n                        var nodePuyo = cc.instantiate(this.prefab1);\r\n                        var nodeChild = nodePuyo.getChildren();\r\n                        nodePuyo.parent = this.boxParent;\r\n                        nodePuyo.setPosition(this.userGroundChild[line][row].getPositionX(), this.userGroundChild[line][row].getPositionY());\r\n\r\n                        switch (this.userGroundChild[line][row].getComponent(\"BoxState\").stringColor) {\r\n                            case \"blue\":\r\n                                nodeChild[0].rotation = 270;\r\n                                break;\r\n                            case \"red\":\r\n                                nodeChild[0].getComponent(cc.Animation).play(\"Change2B_1Red\");\r\n                                nodeChild[0].rotation = 270;\r\n                                break;\r\n                            case \"green\":\r\n                                nodeChild[0].getComponent(cc.Animation).play(\"Change2B_1Green\");\r\n                                nodeChild[0].rotation = 270;\r\n                                break;\r\n                        }\r\n                        break;\r\n                }\r\n                break;\r\n            case 2:\r\n                switch (this.stringConnectDirection) {\r\n                    case \"12\":\r\n                        for (var i = 0; i <= this.arrayDown.length-1; i++) {\r\n                            if (this.arrayDown[i].getPositionX() == arrayBox[arraySign].getPositionX() && this.arrayDown[i].getPositionY() == arrayBox[arraySign].getPositionY()) {\r\n                                //判断此噗呦块是否是本次下落数组中的噗呦块\r\n                                this.arrayPositionX.push(arrayBox[arraySign].getPositionX());\r\n                                this.arrayPositionY.push(arrayBox[arraySign].getPositionY());\r\n                            }\r\n                        }\r\n                        arrayBox[arraySign].destroy();\r\n                        arrayBox[arraySign].setPosition(-1000, -1000);\r\n                        //生成新噗呦块\r\n                        var nodePuyo = cc.instantiate(this.prefab22);\r\n                        var nodeChild = nodePuyo.getChildren();\r\n                        nodePuyo.parent = this.boxParent;\r\n                        nodePuyo.setPosition(this.userGroundChild[line][row].getPositionX(), this.userGroundChild[line][row].getPositionY());\r\n\r\n                        switch (this.userGroundChild[line][row].getComponent(\"BoxState\").stringColor) {\r\n                            case \"blue\":\r\n                                break;\r\n                            case \"red\":\r\n                                nodeChild[0].getComponent(cc.Animation).play(\"Change2B_22Red\");\r\n                                break;\r\n                            case \"green\":\r\n                                nodeChild[0].getComponent(cc.Animation).play(\"Change2B_22Green\");\r\n                                break;\r\n                        }\r\n                        break;\r\n                    case \"13\":\r\n                        for (var i = 0; i <= this.arrayDown.length-1; i++) {\r\n                            if (this.arrayDown[i].getPositionX() == arrayBox[arraySign].getPositionX() && this.arrayDown[i].getPositionY() == arrayBox[arraySign].getPositionY()) {\r\n                                //判断此噗呦块是否是本次下落数组中的噗呦块\r\n                                this.arrayPositionX.push(arrayBox[arraySign].getPositionX());\r\n                                this.arrayPositionY.push(arrayBox[arraySign].getPositionY());\r\n                            }\r\n                        }\r\n                        arrayBox[arraySign].destroy();\r\n                        arrayBox[arraySign].setPosition(-1000, -1000);\r\n                        //生成新噗呦块\r\n                        var nodePuyo = cc.instantiate(this.prefab2);\r\n                        var nodeChild = nodePuyo.getChildren();\r\n                        nodePuyo.parent = this.boxParent;\r\n                        nodePuyo.setPosition(this.userGroundChild[line][row].getPositionX(), this.userGroundChild[line][row].getPositionY());\r\n\r\n                        switch (this.userGroundChild[line][row].getComponent(\"BoxState\").stringColor) {\r\n                            case \"blue\":\r\n                                nodeChild[0].rotation = 270;\r\n                                break;\r\n                            case \"red\":\r\n                                nodeChild[0].getComponent(cc.Animation).play(\"Change2B_2Red\");\r\n                                nodeChild[0].rotation = 270;\r\n                                break;\r\n                            case \"green\":\r\n                                nodeChild[0].getComponent(cc.Animation).play(\"Change2B_2Green\");\r\n                                nodeChild[0].rotation = 270;\r\n                                break;\r\n                        }\r\n\r\n                        break;\r\n                    case \"14\":\r\n                        for (var i = 0; i <= this.arrayDown.length-1; i++) {\r\n                            if (this.arrayDown[i].getPositionX() == arrayBox[arraySign].getPositionX() && this.arrayDown[i].getPositionY() == arrayBox[arraySign].getPositionY()) {\r\n                                //判断此噗呦块是否是本次下落数组中的噗呦块\r\n                                this.arrayPositionX.push(arrayBox[arraySign].getPositionX());\r\n                                this.arrayPositionY.push(arrayBox[arraySign].getPositionY());\r\n                            }\r\n                        }\r\n                        arrayBox[arraySign].destroy();\r\n                        arrayBox[arraySign].setPosition(-1000, -1000);\r\n                        //生成新噗呦块\r\n                        var nodePuyo = cc.instantiate(this.prefab2);\r\n                        var nodeChild = nodePuyo.getChildren();\r\n                        nodePuyo.parent = this.boxParent;\r\n                        nodePuyo.setPosition(this.userGroundChild[line][row].getPositionX(), this.userGroundChild[line][row].getPositionY());\r\n\r\n                        switch (this.userGroundChild[line][row].getComponent(\"BoxState\").stringColor) {\r\n                            case \"blue\":\r\n                                break;\r\n                            case \"red\":\r\n                                nodeChild[0].getComponent(cc.Animation).play(\"Change2B_2Red\");\r\n                                break;\r\n                            case \"green\":\r\n                                nodeChild[0].getComponent(cc.Animation).play(\"Change2B_2Green\");\r\n                                break;\r\n                        }\r\n\r\n                        break;\r\n                    case \"23\":\r\n                        for (var i = 0; i <= this.arrayDown.length-1; i++) {\r\n                            if (this.arrayDown[i].getPositionX() == arrayBox[arraySign].getPositionX() && this.arrayDown[i].getPositionY() == arrayBox[arraySign].getPositionY()) {\r\n                                //判断此噗呦块是否是本次下落数组中的噗呦块\r\n                                this.arrayPositionX.push(arrayBox[arraySign].getPositionX());\r\n                                this.arrayPositionY.push(arrayBox[arraySign].getPositionY());\r\n                            }\r\n                        }\r\n                        arrayBox[arraySign].destroy();\r\n                        arrayBox[arraySign].setPosition(-1000, -1000);\r\n                        //生成新噗呦块\r\n                        var nodePuyo = cc.instantiate(this.prefab2);\r\n                        var nodeChild = nodePuyo.getChildren();\r\n                        nodePuyo.parent = this.boxParent;\r\n                        nodePuyo.setPosition(this.userGroundChild[line][row].getPositionX(), this.userGroundChild[line][row].getPositionY());\r\n\r\n                        switch (this.userGroundChild[line][row].getComponent(\"BoxState\").stringColor) {\r\n                            case \"blue\":\r\n                                nodeChild[0].rotation = 180;\r\n                                break;\r\n                            case \"red\":\r\n                                nodeChild[0].getComponent(cc.Animation).play(\"Change2B_2Red\");\r\n                                nodeChild[0].rotation = 180;\r\n                                break;\r\n                            case \"green\":\r\n                                nodeChild[0].getComponent(cc.Animation).play(\"Change2B_2Green\");\r\n                                nodeChild[0].rotation = 180;\r\n                                break;\r\n                        }\r\n\r\n                        break;\r\n                    case \"24\":\r\n                        for (var i = 0; i <= this.arrayDown.length-1; i++) {\r\n                            if (this.arrayDown[i].getPositionX() == arrayBox[arraySign].getPositionX() && this.arrayDown[i].getPositionY() == arrayBox[arraySign].getPositionY()) {\r\n                                //判断此噗呦块是否是本次下落数组中的噗呦块\r\n                                this.arrayPositionX.push(arrayBox[arraySign].getPositionX());\r\n                                this.arrayPositionY.push(arrayBox[arraySign].getPositionY());\r\n                            }\r\n                        }\r\n                        arrayBox[arraySign].destroy();\r\n                        arrayBox[arraySign].setPosition(-1000, -1000);\r\n                        //生成新噗呦块\r\n                        var nodePuyo = cc.instantiate(this.prefab2);\r\n                        var nodeChild = nodePuyo.getChildren();\r\n                        nodePuyo.parent = this.boxParent;\r\n                        nodePuyo.setPosition(this.userGroundChild[line][row].getPositionX(), this.userGroundChild[line][row].getPositionY());\r\n\r\n                        switch (this.userGroundChild[line][row].getComponent(\"BoxState\").stringColor) {\r\n                            case \"blue\":\r\n                                nodeChild[0].rotation = 90;\r\n                                break;\r\n                            case \"red\":\r\n                                nodeChild[0].getComponent(cc.Animation).play(\"Change2B_2Red\");\r\n                                nodeChild[0].rotation = 90;\r\n                                break;\r\n                            case \"green\":\r\n                                nodeChild[0].getComponent(cc.Animation).play(\"Change2B_2Green\");\r\n                                nodeChild[0].rotation = 90;\r\n                                break;\r\n                        }\r\n                        break;\r\n                    case \"34\":\r\n                        for (var i = 0; i <= this.arrayDown.length-1; i++) {\r\n                            if (this.arrayDown[i].getPositionX() == arrayBox[arraySign].getPositionX() && this.arrayDown[i].getPositionY() == arrayBox[arraySign].getPositionY()) {\r\n                                //判断此噗呦块是否是本次下落数组中的噗呦块\r\n                                this.arrayPositionX.push(arrayBox[arraySign].getPositionX());\r\n                                this.arrayPositionY.push(arrayBox[arraySign].getPositionY());\r\n                            }\r\n                        }\r\n                        arrayBox[arraySign].destroy();\r\n                        arrayBox[arraySign].setPosition(-1000, -1000);\r\n                        //生成新噗呦块\r\n                        var nodePuyo = cc.instantiate(this.prefab22);\r\n                        var nodeChild = nodePuyo.getChildren();\r\n                        nodePuyo.parent = this.boxParent;\r\n                        nodePuyo.setPosition(this.userGroundChild[line][row].getPositionX(), this.userGroundChild[line][row].getPositionY());\r\n\r\n                        switch (this.userGroundChild[line][row].getComponent(\"BoxState\").stringColor) {\r\n                            case \"blue\":\r\n                                nodeChild[0].rotation = 90;\r\n                                break;\r\n                            case \"red\":\r\n                                nodeChild[0].getComponent(cc.Animation).play(\"Change2B_22Red\");\r\n                                nodeChild[0].rotation = 90;\r\n                                break;\r\n                            case \"green\":\r\n                                nodeChild[0].getComponent(cc.Animation).play(\"Change2B_22Green\");\r\n                                nodeChild[0].rotation = 90;\r\n                                break;\r\n                        }\r\n                        break;\r\n                }\r\n                break;\r\n            case 3:\r\n                switch (this.stringConnectDirection) {\r\n                    case \"123\":\r\n                        for (var i = 0; i <= this.arrayDown.length-1; i++) {\r\n                            if (this.arrayDown[i].getPositionX() == arrayBox[arraySign].getPositionX() && this.arrayDown[i].getPositionY() == arrayBox[arraySign].getPositionY()) {\r\n                                //判断此噗呦块是否是本次下落数组中的噗呦块\r\n                                this.arrayPositionX.push(arrayBox[arraySign].getPositionX());\r\n                                this.arrayPositionY.push(arrayBox[arraySign].getPositionY());\r\n                            }\r\n                        }\r\n                        arrayBox[arraySign].destroy();\r\n                        arrayBox[arraySign].setPosition(-1000, -1000);\r\n                        //生成新噗呦块\r\n                        var nodePuyo = cc.instantiate(this.prefab3);\r\n                        var nodeChild = nodePuyo.getChildren();\r\n                        nodePuyo.parent = this.boxParent;\r\n                        nodePuyo.setPosition(this.userGroundChild[line][row].getPositionX(), this.userGroundChild[line][row].getPositionY());\r\n\r\n                        switch (this.userGroundChild[line][row].getComponent(\"BoxState\").stringColor) {\r\n                            case \"blue\":\r\n                                nodeChild[0].rotation = 180;\r\n                                break;\r\n                            case \"red\":\r\n                                nodeChild[0].getComponent(cc.Animation).play(\"Change2B_3Red\");\r\n                                nodeChild[0].rotation = 180;\r\n                                break;\r\n                            case \"green\":\r\n                                nodeChild[0].getComponent(cc.Animation).play(\"Change2B_3Green\");\r\n                                nodeChild[0].rotation = 180;\r\n                                break;\r\n                        }\r\n                        break;\r\n                    case \"124\":\r\n                        for (var i = 0; i <= this.arrayDown.length-1; i++) {\r\n                            if (this.arrayDown[i].getPositionX() == arrayBox[arraySign].getPositionX() && this.arrayDown[i].getPositionY() == arrayBox[arraySign].getPositionY()) {\r\n                                //判断此噗呦块是否是本次下落数组中的噗呦块\r\n                                this.arrayPositionX.push(arrayBox[arraySign].getPositionX());\r\n                                this.arrayPositionY.push(arrayBox[arraySign].getPositionY());\r\n                            }\r\n                        }\r\n                        arrayBox[arraySign].destroy();\r\n                        arrayBox[arraySign].setPosition(-1000, -1000);\r\n                        //生成新噗呦块\r\n                        var nodePuyo = cc.instantiate(this.prefab3);\r\n                        var nodeChild = nodePuyo.getChildren();\r\n                        nodePuyo.parent = this.boxParent;\r\n                        nodePuyo.setPosition(this.userGroundChild[line][row].getPositionX(), this.userGroundChild[line][row].getPositionY());\r\n\r\n                        switch (this.userGroundChild[line][row].getComponent(\"BoxState\").stringColor) {\r\n                            case \"blue\":\r\n                                break;\r\n                            case \"red\":\r\n                                nodeChild[0].getComponent(cc.Animation).play(\"Change2B_3Red\");\r\n                                break;\r\n                            case \"green\":\r\n                                nodeChild[0].getComponent(cc.Animation).play(\"Change2B_3Green\");\r\n                                break;\r\n                        }\r\n\r\n                        break;\r\n                    case \"134\":\r\n                        for (var i = 0; i <= this.arrayDown.length-1; i++) {\r\n                            if (this.arrayDown[i].getPositionX() == arrayBox[arraySign].getPositionX() && this.arrayDown[i].getPositionY() == arrayBox[arraySign].getPositionY()) {\r\n                                //判断此噗呦块是否是本次下落数组中的噗呦块\r\n                                this.arrayPositionX.push(arrayBox[arraySign].getPositionX());\r\n                                this.arrayPositionY.push(arrayBox[arraySign].getPositionY());\r\n                            }\r\n                        }\r\n                        arrayBox[arraySign].destroy();\r\n                        arrayBox[arraySign].setPosition(-1000, -1000);\r\n                        //生成新噗呦块\r\n                        var nodePuyo = cc.instantiate(this.prefab3);\r\n                        var nodeChild = nodePuyo.getChildren();\r\n                        nodePuyo.parent = this.boxParent;\r\n                        nodePuyo.setPosition(this.userGroundChild[line][row].getPositionX(), this.userGroundChild[line][row].getPositionY());\r\n                        switch (this.userGroundChild[line][row].getComponent(\"BoxState\").stringColor) {\r\n                            case \"blue\":\r\n                                nodeChild[0].rotation = 270;\r\n                                break;\r\n                            case \"red\":\r\n                                nodeChild[0].getComponent(cc.Animation).play(\"Change2B_3Red\");\r\n                                nodeChild[0].rotation = 270;\r\n                                break;\r\n                            case \"green\":\r\n                                nodeChild[0].getComponent(cc.Animation).play(\"Change2B_3Green\");\r\n                                nodeChild[0].rotation = 270;\r\n                                break;\r\n                        }\r\n\r\n                        break;\r\n                    case \"234\":\r\n                        for (var i = 0; i <= this.arrayDown.length-1; i++) {\r\n                            if (this.arrayDown[i].getPositionX() == arrayBox[arraySign].getPositionX() && this.arrayDown[i].getPositionY() == arrayBox[arraySign].getPositionY()) {\r\n                                //判断此噗呦块是否是本次下落数组中的噗呦块\r\n                                this.arrayPositionX.push(arrayBox[arraySign].getPositionX());\r\n                                this.arrayPositionY.push(arrayBox[arraySign].getPositionY());\r\n                            }\r\n                        }\r\n                        arrayBox[arraySign].destroy();\r\n                        arrayBox[arraySign].setPosition(-1000, -1000);\r\n                        //生成新噗呦块\r\n                        var nodePuyo = cc.instantiate(this.prefab3);\r\n                        var nodeChild = nodePuyo.getChildren();\r\n                        nodePuyo.parent = this.boxParent;\r\n                        nodePuyo.setPosition(this.userGroundChild[line][row].getPositionX(), this.userGroundChild[line][row].getPositionY());\r\n                        switch (this.userGroundChild[line][row].getComponent(\"BoxState\").stringColor) {\r\n                            case \"blue\":\r\n                                nodeChild[0].rotation = 90;\r\n                                break;\r\n                            case \"red\":\r\n                                nodeChild[0].getComponent(cc.Animation).play(\"Change2B_3Red\");\r\n                                nodeChild[0].rotation = 90;\r\n                                break;\r\n                            case \"green\":\r\n                                nodeChild[0].getComponent(cc.Animation).play(\"Change2B_3Green\");\r\n                                nodeChild[0].rotation = 90;\r\n                                break;\r\n                        }\r\n                        break;\r\n                }\r\n                break;\r\n            case 4:\r\n                for (var i = 0; i <= this.arrayDown.length-1; i++) {\r\n                    if (this.arrayDown[i].getPositionX() == arrayBox[arraySign].getPositionX() && this.arrayDown[i].getPositionY() == arrayBox[arraySign].getPositionY()) {\r\n                        //判断此噗呦块是否是本次下落数组中的噗呦块\r\n                        this.arrayPositionX.push(arrayBox[arraySign].getPositionX());\r\n                        this.arrayPositionY.push(arrayBox[arraySign].getPositionY());\r\n                    }\r\n                }\r\n                arrayBox[arraySign].destroy();\r\n                arrayBox[arraySign].setPosition(-1000, -1000);\r\n                //生成新噗呦块\r\n                var nodePuyo = cc.instantiate(this.prefab4);\r\n                var nodeChild = nodePuyo.getChildren();\r\n                nodePuyo.parent = this.boxParent;\r\n                nodePuyo.setPosition(this.userGroundChild[line][row].getPositionX(), this.userGroundChild[line][row].getPositionY());\r\n                switch (this.userGroundChild[line][row].getComponent(\"BoxState\").stringColor) {\r\n                    case \"blue\":\r\n                        break;\r\n                    case \"red\":\r\n                        nodeChild[0].getComponent(cc.Animation).play(\"Change2B_4Red\");\r\n                        break;\r\n                    case \"green\":\r\n                        nodeChild[0].getComponent(cc.Animation).play(\"Change2B_4Green\");\r\n                        break;\r\n                }\r\n                break;\r\n        }\r\n    },\r\n\r\n    MoveLeft: function () {\r\n\r\n        // if (nLine == nLine1) {\r\n        //     return;\r\n        // }\r\n        //存取俄罗斯方块的行数\r\n        var nArrayRow = [];\r\n        //存取俄罗斯方块的列数\r\n        var nArrayList = [];\r\n        //获取节点子节点数组\r\n        var blockChild = this.nodeBlock.getChildren();\r\n\r\n        //将俄罗斯方块的行列存入数组中\r\n        for (var i = 0; i <= blockChild.length - 1; i++) {\r\n            //计算噗呦块的实际坐标\r\n            this.nodeBlock.getComponent(\"PuyoDown\").CountPosition(blockChild[i]);\r\n            //存储噗呦块的实际坐标.\r\n            var positionX = this.nodeBlock.getComponent(\"PuyoDown\").nPositionX;\r\n            var positionY = this.nodeBlock.getComponent(\"PuyoDown\").nPositionY;\r\n            //获取此时组成俄罗斯方块元素的行列\r\n            var nX = (positionX + this.nodeBlock.getPositionX() - cc.find(\"GroundParent\").getPositionX()) / Global.nWidthPuYo + 1;\r\n            var nY = (positionY + this.nodeBlock.getPositionY() - cc.find(\"GroundParent\").getPositionY()) / Global.nWidthPuYo + 1;\r\n            nArrayList.push(nX);\r\n            nArrayRow.push(Math.floor(nY));\r\n        }\r\n        //从小到大排序行数\r\n        for (var j = 0; j <= blockChild.length - 1; j++) {\r\n            if (j <= blockChild.length - 2) {\r\n                for (var k = j + 1; k <= blockChild.length - 1; k++) {\r\n                    if (nArrayRow[k] < nArrayRow[j]) {\r\n                        var nOldY = nArrayRow[j];\r\n                        nArrayRow[j] = nArrayRow[k];\r\n                        nArrayRow[k] = nOldY;\r\n                        var nOldX = nArrayList[j];\r\n                        nArrayList[j] = nArrayList[k];\r\n                        nArrayList[k] = nOldX;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (nArrayRow[0] == 12) {\r\n            //从小到大排序列数\r\n            for (var j = 0; j <= blockChild.length - 1; j++) {\r\n                if (j <= blockChild.length - 2) {\r\n                    for (var k = j + 1; k <= blockChild.length - 1; k++) {\r\n                        if (nArrayList[k] < nArrayList[j]) {\r\n                            var nOldY = nArrayRow[j];\r\n                            nArrayRow[j] = nArrayRow[k];\r\n                            nArrayRow[k] = nOldY;\r\n                            var nOldX = nArrayList[j];\r\n                            nArrayList[j] = nArrayList[k];\r\n                            nArrayList[k] = nOldX;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (nArrayList[0] == 1) {\r\n                return;\r\n            }\r\n            //判断方块的前一列是否有方块\r\n            var isHas = false;\r\n            for (var i = 0; i <= blockChild.length - 1; i++) {\r\n                if (nArrayRow[i] == 12) {\r\n                    //判断方块的前一列的方块属性是否为true\r\n                    if (this.userGroundChild[nArrayList[i] - 2][nArrayRow[i] - 1].getComponent(\"BoxState\").isBox) {\r\n                        isHas = true;\r\n                    }\r\n                }\r\n                if (i == blockChild.length - 1) {\r\n                    if (isHas) {\r\n                        return;\r\n                    }\r\n                    else {\r\n                        for (var k = 0; k <= blockChild.length - 1; k++) {\r\n                            if (k == blockChild.length - 1) {\r\n                                //俄罗斯方块向左移动\r\n                                this.nodeBlock.x -= Global.nWidthPuYo;\r\n                                if (this.nodeBlock.getComponent(\"PuyoDown\").isCollision) {\r\n                                    // //初始化 1s计时器\r\n                                    // this.nodeBlock.getComponent(\"OperateBlock\").fDownTime = 0;\r\n                                    // this.nodeBlock.getComponent(\"OperateBlock\").fCollisionTime = 0;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        else {\r\n            //从小到大排序列数\r\n            for (var j = 0; j <= blockChild.length - 1; j++) {\r\n                if (j <= blockChild.length - 2) {\r\n                    for (var k = j + 1; k <= blockChild.length - 1; k++) {\r\n                        if (nArrayList[k] < nArrayList[j]) {\r\n                            var nOldY = nArrayRow[j];\r\n                            nArrayRow[j] = nArrayRow[k];\r\n                            nArrayRow[k] = nOldY;\r\n                            var nOldX = nArrayList[j];\r\n                            nArrayList[j] = nArrayList[k];\r\n                            nArrayList[k] = nOldX;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            cc.log(nArrayList + \"MoveLeft\");\r\n            if (nArrayList[0] == 1) {\r\n\r\n                return;\r\n            }\r\n            else {\r\n                //判断方块的前一列是否有方块\r\n                var isHas = false;\r\n                for (var i = 0; i <= blockChild.length - 1; i++) {\r\n                    //判断方块的前一列的方块属性是否为true\r\n                    if (this.userGroundChild[nArrayList[i] - 2][nArrayRow[i] - 1].getComponent(\"BoxState\").isBox) {\r\n                        isHas = true;\r\n                    }\r\n                    if (i == blockChild.length - 1) {\r\n                        if (isHas) {\r\n                            return;\r\n                        }\r\n                        else {\r\n                            for (var k = 0; k <= blockChild.length - 1; k++) {\r\n\r\n                                if (k == blockChild.length - 1) {\r\n                                    //俄罗斯方块向左移动\r\n                                    this.nodeBlock.x -= Global.nWidthPuYo;\r\n                                    if (this.nodeBlock.getComponent(\"PuyoDown\").isCollision) {\r\n                                        // //初始化 1s计时器\r\n                                        // this.nodeBlock.getComponent(\"OperateBlock\").fDownTime = 0;\r\n                                        // this.nodeBlock.getComponent(\"OperateBlock\").fCollisionTime = 0;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    //俄罗斯方块向右移动\r\n    MoveRight: function () {\r\n        // if (nLine == nLine1) {\r\n        //     return;\r\n        // }\r\n        //存取俄罗斯方块的行数\r\n        var nArrayRow = [];\r\n        //存取俄罗斯方块的列数\r\n        var nArrayList = [];\r\n        //获取节点子节点数组\r\n        var blockChild = this.nodeBlock.getChildren();\r\n        //将俄罗斯方块的行列存入数组中\r\n        for (var i = 0; i <= blockChild.length - 1; i++) {\r\n            //计算噗呦块的实际坐标\r\n            this.nodeBlock.getComponent(\"PuyoDown\").CountPosition(blockChild[i]);\r\n            //存储噗呦块的实际坐标.\r\n            var positionX = this.nodeBlock.getComponent(\"PuyoDown\").nPositionX;\r\n            var positionY = this.nodeBlock.getComponent(\"PuyoDown\").nPositionY;\r\n            //获取此时组成俄罗斯方块元素的行列\r\n            var nX = (positionX + this.nodeBlock.getPositionX() - cc.find(\"GroundParent\").getPositionX()) / Global.nWidthPuYo + 1;\r\n            var nY = (positionY + this.nodeBlock.getPositionY() - cc.find(\"GroundParent\").getPositionY()) / Global.nWidthPuYo + 1;\r\n            //    cc.log(nX);\r\n            //    cc.log(nY);\r\n            nArrayList.push(nX);\r\n            nArrayRow.push(Math.floor(nY));\r\n        }\r\n        //从小到大排序行数\r\n        for (var j = 0; j <= blockChild.length - 1; j++) {\r\n            if (j <= blockChild.length - 2) {\r\n                for (var k = j + 1; k <= blockChild.length - 1; k++) {\r\n                    if (nArrayRow[k] < nArrayRow[j]) {\r\n                        var nOldY = nArrayRow[j];\r\n                        nArrayRow[j] = nArrayRow[k];\r\n                        nArrayRow[k] = nOldY;\r\n                        var nOldX = nArrayList[j];\r\n                        nArrayList[j] = nArrayList[k];\r\n                        nArrayList[k] = nOldX;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (nArrayRow[0] == 12) {\r\n            //从小到大排序列数\r\n            for (var j = 0; j <= blockChild.length - 1; j++) {\r\n                if (j <= blockChild.length - 2) {\r\n                    for (var k = j + 1; k <= blockChild.length - 1; k++) {\r\n                        if (nArrayList[k] < nArrayList[j]) {\r\n                            var nOldY = nArrayRow[j];\r\n                            nArrayRow[j] = nArrayRow[k];\r\n                            nArrayRow[k] = nOldY;\r\n                            var nOldX = nArrayList[j];\r\n                            nArrayList[j] = nArrayList[k];\r\n                            nArrayList[k] = nOldX;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (nArrayList[blockChild.length - 1] == 6) {\r\n                return;\r\n            }\r\n            else {\r\n                //判断方块的下一列是否有方块\r\n                var isHas = false;\r\n                for (var i = blockChild.length - 1; i >= 0; i--) {\r\n                    if (nArrayRow[i] == 12) {\r\n                        //判断方块的前一列的方块属性是否为true\r\n                        if (this.userGroundChild[nArrayList[i] - 2][nArrayRow[i] - 1].getComponent(\"BoxState\").isBox) {\r\n                            isHas = true;\r\n                        }\r\n                    }\r\n                    if (i == 0) {\r\n                        if (isHas) {\r\n                            return;\r\n                        }\r\n                        else {\r\n                            for (var k = 0; k <= blockChild.length - 1; k++) {\r\n                                if (k == blockChild.length - 1) {\r\n                                    //俄罗斯方块向右移动\r\n                                    this.nodeBlock.x += Global.nWidthPuYo;\r\n                                    if (this.nodeBlock.getComponent(\"PuyoDown\").isCollision) {\r\n                                        // //初始化 1s计时器\r\n                                        // this.nodeBlock.getComponent(\"OperateBlock\").fDownTime = 0;\r\n                                        // this.nodeBlock.getComponent(\"OperateBlock\").fCollisionTime = 0;\r\n                                    }\r\n                                    //   //初始化 1s计时器\r\n                                    //   this.nodeBlock.getComponent(\"OperateBlock\").fCollisionTime=0;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            //从小到大排序列数\r\n            for (var j = 0; j <= blockChild.length - 1; j++) {\r\n                if (j <= blockChild.length - 2) {\r\n                    for (var k = j + 1; k <= blockChild.length - 1; k++) {\r\n                        if (nArrayList[k] < nArrayList[j]) {\r\n                            var nOldY = nArrayRow[j];\r\n                            nArrayRow[j] = nArrayRow[k];\r\n                            nArrayRow[k] = nOldY;\r\n                            var nOldX = nArrayList[j];\r\n                            nArrayList[j] = nArrayList[k];\r\n                            nArrayList[k] = nOldX;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (nArrayList[blockChild.length - 1] == 6) {\r\n                return;\r\n            }\r\n            else {\r\n                //判断方块的下一列是否有方块\r\n                var isHas = false;\r\n                for (var i = blockChild.length - 1; i >= 0; i--) {\r\n\r\n                    //判断方块的下一列的方块属性是否为true\r\n                    if (this.userGroundChild[nArrayList[i]][nArrayRow[i] - 1].getComponent(\"BoxState\").isBox) {\r\n                        isHas = true;\r\n                    }\r\n                    if (i == 0) {\r\n                        if (isHas) {\r\n                            return;\r\n                        }\r\n                        else {\r\n                            for (var k = 0; k <= blockChild.length - 1; k++) {\r\n                                if (k == blockChild.length - 1) {\r\n                                    //俄罗斯方块向右移动\r\n                                    this.nodeBlock.x += Global.nWidthPuYo;\r\n                                    if (this.nodeBlock.getComponent(\"PuyoDown\").isCollision) {\r\n                                        // //初始化 1s计时器\r\n                                        // this.nodeBlock.getComponent(\"OperateBlock\").fDownTime = 0;\r\n                                        // this.nodeBlock.getComponent(\"OperateBlock\").fCollisionTime = 0;\r\n                                    }\r\n                                    //   //初始化 1s计时器\r\n                                    //   this.nodeBlock.getComponent(\"OperateBlock\").fCollisionTime=0;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n    },\r\n    //压缩变形判断噗呦块是否可以可以相连\r\n    IsConnect: function () {\r\n        var arrayBox = this.boxParent.getChildren();\r\n        cc.log(arrayBox.length + \"isconnect\");\r\n        var nTravel = arrayBox.length - 1;\r\n        //存取下落块的横，纵坐标\r\n        this.arrayPositionX = [];\r\n        this.arrayPositionY = [];\r\n        for (var i = 0; i <= nTravel; i++) {\r\n            cc.log(\"77777777777777777777777777777777777777777777777777777777777\");\r\n            // cc.log(arrayBox[i].getPositionY()+\"isconnect\");\r\n            this.stringConnectDirection = \"\";\r\n            //初始化此时噗呦块的行数\r\n            var nRow3 = this.CountRow(arrayBox[i].getPositionY());\r\n            var nLine3 = this.CountLine(arrayBox[i].getPositionX());\r\n            // cc.log(\"isconnect\"+this.CountRow(arrayBox[i].getPositionY()));\r\n            if (nRow3 > 0 && nLine3 > 0 && this.CountLine(arrayBox[i].getPositionX()) < 5) {\r\n                //默认方向想上为1，向下为2，向左为3，向右为4\r\n                //判断噗呦块的上方是否颜色相同\r\n                if (this.userGroundChild[nLine3][nRow3].getComponent(\"BoxState\").stringColor == this.userGroundChild[nLine3][nRow3 + 1].getComponent(\"BoxState\").stringColor) {\r\n                    this.stringConnectDirection += \"1\";\r\n                }\r\n                //判断噗呦块的下方是否颜色相同\r\n                if (this.userGroundChild[nLine3][nRow3].getComponent(\"BoxState\").stringColor == this.userGroundChild[nLine3][nRow3 - 1].getComponent(\"BoxState\").stringColor) {\r\n                    this.stringConnectDirection += \"2\";\r\n                }\r\n                //判断噗呦块的左方是否颜色相同\r\n                if (this.userGroundChild[nLine3][nRow3].getComponent(\"BoxState\").stringColor == this.userGroundChild[nLine3 - 1][nRow3].getComponent(\"BoxState\").stringColor) {\r\n                    this.stringConnectDirection += \"3\";\r\n                }\r\n                //判断噗呦块的右方是否颜色相同\r\n                if (this.userGroundChild[nLine3][nRow3].getComponent(\"BoxState\").stringColor == this.userGroundChild[nLine3 + 1][nRow3].getComponent(\"BoxState\").stringColor) {\r\n                    this.stringConnectDirection += \"4\";\r\n                }\r\n\r\n            }\r\n            else {\r\n                if ((nRow3 == 0 && nLine3 == 0) || (nRow3 == 0 && nLine3 == 5) || (nRow3 == 11 && nLine3 == 0) || (nRow3 == 11 && nLine3 == 5)) {\r\n                    if (nRow3 == 0 && nLine3 == 0) {\r\n                        //默认方向想上为1，向下为2，向左为3，向右为4\r\n                        //判断噗呦块的上方是否颜色相同\r\n                        if (this.userGroundChild[nLine3][nRow3].getComponent(\"BoxState\").stringColor == this.userGroundChild[nLine3][nRow3 + 1].getComponent(\"BoxState\").stringColor) {\r\n                            this.stringConnectDirection += \"1\";\r\n                        }\r\n                        //判断噗呦块的右方是否颜色相同\r\n                        if (this.userGroundChild[nLine3][nRow3].getComponent(\"BoxState\").stringColor == this.userGroundChild[nLine3 + 1][nRow3].getComponent(\"BoxState\").stringColor) {\r\n                            this.stringConnectDirection += \"4\";\r\n                        }\r\n\r\n\r\n                    }\r\n                    if (nRow3 == 0 && nLine3 == 5) {\r\n                        //默认方向想上为1，向下为2，向左为3，向右为4\r\n                        //判断噗呦块的上方是否颜色相同\r\n                        if (this.userGroundChild[nLine3][nRow3].getComponent(\"BoxState\").stringColor == this.userGroundChild[nLine3][nRow3 + 1].getComponent(\"BoxState\").stringColor) {\r\n                            this.stringConnectDirection += \"1\";\r\n                        }\r\n                        //判断噗呦块的左方是否颜色相同\r\n                        if (this.userGroundChild[nLine3][nRow3].getComponent(\"BoxState\").stringColor == this.userGroundChild[nLine3 - 1][nRow3].getComponent(\"BoxState\").stringColor) {\r\n                            this.stringConnectDirection += \"3\";\r\n                        }\r\n\r\n                    }\r\n                    if (nRow3 == 11 && nLine3 == 0) {\r\n                        //默认方向想上为1，向下为2，向左为3，向右为4\r\n                        //判断噗呦块的下方是否颜色相同\r\n                        if (this.userGroundChild[nLine3][nRow3].getComponent(\"BoxState\").stringColor == this.userGroundChild[nLine3][nRow3 - 1].getComponent(\"BoxState\").stringColor) {\r\n                            this.stringConnectDirection += \"2\";\r\n                        }\r\n                        //判断噗呦块的右方是否颜色相同\r\n                        if (this.userGroundChild[nLine3][nRow3].getComponent(\"BoxState\").stringColor == this.userGroundChild[nLine3 + 1][nRow3].getComponent(\"BoxState\").stringColor) {\r\n                            this.stringConnectDirection += \"4\";\r\n                        }\r\n\r\n\r\n                    }\r\n                    if (nRow3 == 11 && nLine3 == 5) {\r\n                        //判断噗呦块的下方是否颜色相同\r\n                        if (this.userGroundChild[nLine3][nRow3].getComponent(\"BoxState\").stringColor == this.userGroundChild[nLine3][nRow3 - 1].getComponent(\"BoxState\").stringColor) {\r\n                            this.stringConnectDirection += \"2\";\r\n                        }\r\n                        //判断噗呦块的左方是否颜色相同\r\n                        if (this.userGroundChild[nLine3][nRow3].getComponent(\"BoxState\").stringColor == this.userGroundChild[nLine3 - 1][nRow3].getComponent(\"BoxState\").stringColor) {\r\n                            this.stringConnectDirection += \"3\";\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if (nRow3 == 0) {\r\n                        //默认方向想上为1，向下为2，向左为3，向右为4\r\n                        //判断噗呦块的上方是否颜色相同\r\n                        if (this.userGroundChild[nLine3][nRow3].getComponent(\"BoxState\").stringColor == this.userGroundChild[nLine3][nRow3 + 1].getComponent(\"BoxState\").stringColor) {\r\n                            this.stringConnectDirection += \"1\";\r\n                        }\r\n                        //判断噗呦块的左方是否颜色相同\r\n                        if (this.userGroundChild[nLine3][nRow3].getComponent(\"BoxState\").stringColor == this.userGroundChild[nLine3 - 1][nRow3].getComponent(\"BoxState\").stringColor) {\r\n                            this.stringConnectDirection += \"3\";\r\n                        }\r\n                        //判断噗呦块的右方是否颜色相同\r\n                        if (this.userGroundChild[nLine3][nRow3].getComponent(\"BoxState\").stringColor == this.userGroundChild[nLine3 + 1][nRow3].getComponent(\"BoxState\").stringColor) {\r\n                            this.stringConnectDirection += \"4\";\r\n                        }\r\n\r\n                    }\r\n                    if (nLine3 == 0) {\r\n                        //默认方向想上为1，向下为2，向左为3，向右为4\r\n                        //判断噗呦块的上方是否颜色相同\r\n                        if (this.userGroundChild[nLine3][nRow3].getComponent(\"BoxState\").stringColor == this.userGroundChild[nLine3][nRow3 + 1].getComponent(\"BoxState\").stringColor) {\r\n                            this.stringConnectDirection += \"1\";\r\n                        }\r\n                        //判断噗呦块的下方是否颜色相同\r\n                        if (this.userGroundChild[nLine3][nRow3].getComponent(\"BoxState\").stringColor == this.userGroundChild[nLine3][nRow3 - 1].getComponent(\"BoxState\").stringColor) {\r\n                            this.stringConnectDirection += \"2\";\r\n                        }\r\n                        //判断噗呦块的右方是否颜色相同\r\n                        if (this.userGroundChild[nLine3][nRow3].getComponent(\"BoxState\").stringColor == this.userGroundChild[nLine3 + 1][nRow3].getComponent(\"BoxState\").stringColor) {\r\n                            this.stringConnectDirection += \"4\";\r\n                        }\r\n\r\n                    }\r\n                    if (nLine3 == 5) {\r\n                        //默认方向想上为1，向下为2，向左为3，向右为4\r\n                        //判断噗呦块的上方是否颜色相同\r\n                        if (this.userGroundChild[nLine3][nRow3].getComponent(\"BoxState\").stringColor == this.userGroundChild[nLine3][nRow3 + 1].getComponent(\"BoxState\").stringColor) {\r\n                            this.stringConnectDirection += \"1\";\r\n                        }\r\n                        //判断噗呦块的下方是否颜色相同\r\n                        if (this.userGroundChild[nLine3][nRow3].getComponent(\"BoxState\").stringColor == this.userGroundChild[nLine3][nRow3 - 1].getComponent(\"BoxState\").stringColor) {\r\n                            this.stringConnectDirection += \"2\";\r\n                        }\r\n                        //判断噗呦块的左方是否颜色相同\r\n                        if (this.userGroundChild[nLine3][nRow3].getComponent(\"BoxState\").stringColor == this.userGroundChild[nLine3 - 1][nRow3].getComponent(\"BoxState\").stringColor) {\r\n                            this.stringConnectDirection += \"3\";\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n            }\r\n            this.SureShape(this.stringConnectDirection.length, nRow3, nLine3, i);\r\n        }\r\n    },\r\n    update(dt) {\r\n        if (this.nodeBlock.getComponent(\"PuyoDown\").isStationary && this.nodeBlock.getComponent(\"PuyoDown\").isGameOver == false) {\r\n            //初始化待下落数组\r\n            this.arrayDown = [];\r\n            // this.boxParent1=this.boxParent.getChildren();\r\n            //获取此方块的数组\r\n            var nodeBoxArray = this.nodeBlock.getChildren();\r\n            var arrayLength = nodeBoxArray.length;\r\n            for (var i = 0; i <= arrayLength - 1; i++) {\r\n                this.arrayDown.push(nodeBoxArray[0]);\r\n                nodeBoxArray[0].setPosition(this.GetBoxNode(nodeBoxArray[0]));\r\n                nodeBoxArray[0].parent = this.boxParent;\r\n                if (i == arrayLength - 1) {\r\n                    this.GetShapeSign(this.arrayDown);\r\n                    cc.log(this.arrayChange + \"??????????????\");\r\n                    this.nodeBlock.getComponent(\"PuyoDown\").isChangeParent = true;\r\n                }\r\n            }\r\n        }\r\n        if (this.nodeBlock.getComponent(\"PuyoDown\").isChangeParent && this.nodeBlock.getComponent(\"PuyoDown\").isGameOver == false) {\r\n            // // cc.log(\"bbb\");\r\n            // for(var i=0;i<=  this.arrayDown.length-1;i++)\r\n            // {\r\n            //     // cc.log(this.nodeBlock.getComponent(\"PuyoDown\").arrayX[i]-1);\r\n            //     // cc.log(this.nodeBlock.getComponent(\"PuyoDown\").arrayY[i]-1);\r\n            //     // cc.log(\"222222222222222222222222222\");\r\n            //     this.userGroundChild[this.nodeBlock.getComponent(\"PuyoDown\").arrayX[i]-1][this.nodeBlock.getComponent(\"PuyoDown\").arrayY[i]-1].getComponent(\"BoxState\").isBox = true;\r\n            //     this.userGroundChild[this.nodeBlock.getComponent(\"PuyoDown\").arrayX[i]-1][this.nodeBlock.getComponent(\"PuyoDown\").arrayY[i]-1].getComponent(\"BoxState\").stringColor =  this.arrayDown[i].stringColor;\r\n            // }`\r\n            for (var i = 0; i <= this.nodeBlock.getComponent(\"PuyoDown\").arrayX.length - 1; i++) {\r\n                this.BoxDown(this.nodeBlock.getComponent(\"PuyoDown\").arrayY[i] - 1, this.nodeBlock.getComponent(\"PuyoDown\").arrayX[i] - 1);\r\n            }\r\n            // this.GetBlock();\r\n            this.nodeBlock.getComponent(\"PuyoDown\").isChangeParent = false;\r\n            this.nodeBlock.getComponent(\"PuyoDown\").isStationary = false;\r\n            // //生成新的俄罗斯方块\r\n            // this.GetBlock();\r\n            // this.nodeBlock.getComponent(\"PuyoDown\").isChangeParent = false;\r\n        }\r\n        if (this.isActionDown) {\r\n            //压缩变形\r\n            this.ChangeShape(this, { \"nRow\": this.nRow2, \"nLine\": this.nLine2 });\r\n            this.isActionDown = false;\r\n        }\r\n        if (this.arrayChange != null) {\r\n            // cc.log(this.nChangeShape + \"~~~~~~~~~~~~~~~~~~~~~~~\");\r\n            if (this.nChangeShape == this.arrayChange.length) {\r\n                for (var i = 0; i <= 11; i++) {\r\n                    for (var j = 0; j <= 5; j++) {\r\n                        cc.log(this.userGroundChild[j][i].getComponent(\"BoxState\").stringColor + \"9999999999999999999\");\r\n                    }\r\n                }\r\n                for (var i = 0; i <= this.arrayDown.length - 1; i++) {\r\n                    var row = this.CountRow(this.arrayDown[i].getPositionY());\r\n                    var line = this.CountLine(this.arrayDown[i].getPositionX());\r\n                    // cc.log(this.arrayDown.length + \"888888888888888888888888888888888888888888\");\r\n                    // cc.log(this.userGroundChild[line][row].getComponent(\"BoxState\").stringColor + \"888888888888888888888888888888888888888888\");\r\n                }\r\n                this.IsConnect();\r\n                this.IsDestroy();\r\n                this.GetBlock();\r\n                //初始化形变次数\r\n                this.nChangeShape = 0;\r\n                this.nRotateLong = 0;\r\n                // this.isActionShape = false;\r\n                // this.nodeBlock.getComponent(\"PuyoDown\").isChangeParent = false;\r\n                // this.nodeBlock.getComponent(\"PuyoDown\").isStationary = false;\r\n            }\r\n        }\r\n    },\r\n});","/*\r\n * @Author: mikey.zhaopeng \r\n * @Date: 2018-06-25 14:28:29 \r\n * @Last Modified by: mikey.zhaopeng\r\n * @Last Modified time: 2018-08-31 14:44:08\r\n */\r\nvar comm = require(\"../game3/Common\");\r\nvar game3 = require(\"../game3/game\");\r\nvar statuMachine = require(\"../game4/StatuMachine\");\r\n//引用异步操作模块\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        imagePrefabArr : {\r\n            default : [],\r\n            type    : [cc.Prefab],\r\n        },\r\n        girdSize    : 120,\r\n        back        : cc.Prefab,\r\n        nextShape : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        next2 : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        downButton : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        slideButton : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        rotateButton : {\r\n            default  : null,\r\n            type     : cc.Node,\r\n        },\r\n        //遮罩层\r\n        mask : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        //昵称label\r\n        nickName : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        //分数label\r\n        scoreLabel : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        //游戏结束菜单\r\n        overMenu  : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        gameOverAnimation : cc.Node,\r\n        gameSlide : cc.Node,\r\n        //点击按钮的声音\r\n        clickAudio : {\r\n            url  : cc.AudioClip,\r\n            default : null,\r\n        },\r\n        //胜利音效\r\n        winAudio : {\r\n            url  : cc.AudioClip,\r\n            default : null,\r\n        },\r\n        //失败音效\r\n        loseAudio : {\r\n            url  : cc.AudioClip,\r\n            default : null,\r\n        },\r\n        //消除音效\r\n        removeAudio : {\r\n            url  : cc.AudioClip,\r\n            default : null,\r\n        },\r\n        //快速下落音效\r\n        downAudio : {\r\n            url  : cc.AudioClip,\r\n            default : null,\r\n        },\r\n        handNode : cc.Node,\r\n        darkNode : cc.Node,\r\n        noticePrefab : cc.Prefab,\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        if(Global.advertisement !== null){\r\n            //隐藏广告\r\n            Global.advertisement.hide();\r\n        }\r\n        this.showNoticeHelp = true;\r\n        //初始化提示预制体\r\n        this.noticeBtn = this.setPrefabPosition(this.noticePrefab,0,0,this.node.parent.getChildByName(\"noticeDark\"));\r\n        this.noticeBtn.on('touchstart',function(){\r\n            this.handNode.active = false;\r\n            this.darkNode.active =false;\r\n            this.showNoticeHelp = false;\r\n            this.noticeBtn.active = false;\r\n        }.bind(this));\r\n        //预加载需要的场景\r\n        cc.director.preloadScene(\"PersonsChoose\",function(){\r\n            console.log(\"多人选择界面预加载成功\");\r\n        });\r\n        cc.director.preloadScene(\"MatchUser\",function(){\r\n            console.log(\"匹配界面预加载成功\");\r\n        });\r\n        this.handNode.on(\"touchstart\",function(){\r\n            this.handNode.active = false;\r\n            this.darkNode.active =false;\r\n            this.showNoticeHelp = false;\r\n            this.noticeBtn.active = false;\r\n        }.bind(this));\r\n        this.darkNode.on(\"touchstart\",function(){\r\n            this.handNode.active = false;\r\n            this.darkNode.active =false;\r\n            this.showNoticeHelp = false;\r\n            this.noticeBtn.active = false;\r\n        }.bind(this));\r\n        //发送到服务器中的数据\r\n        cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg({\"tag1\":10,\"type\":\"\",\"score\":cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nUserScore,\"nMapRow\":\"\",\"nMapCol\":\"\",\"loading1\":1});\r\n        this.normalSpeed = 0.8;\r\n        this.quickSpeed  = 0.07;\r\n        this.giveIn = false;\r\n        //如果游戏是处于暂停状态的时候让游戏继续运行\r\n        if(cc.director.isPaused()){\r\n            cc.director.resume();\r\n        }\r\n         //发给服务器的数据\r\n         this.jsonMsgToServer = {\r\n            tag1            : 9,\r\n            score           : \"\",\r\n            type            : \"\",\r\n            state1          : \"\",\r\n            changeMapList1  : [],\r\n            removeMapList1  : 0,\r\n            nMapRow         : \"\",\r\n            nMapCol         : \"\",\r\n            loading1        : \"\",\r\n        };\r\n        console.log(\"!!!!!!!!!!!!!!!!!!!\" + this.jsonMsgToServer.changeMapList1.length);\r\n        let usernameString = cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser;\r\n        cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").showUsername(usernameString,this.nickName);\r\n         this.nodeHeight = this.node.height;\r\n         this.nodeWidth = this.node.width;\r\n         this.up = 12;\r\n         this.lr = 10;\r\n         this.back.width = 120;\r\n         this.back.height = 120;\r\n         this.initMap(this.up,this.lr,this.back,comm.MAP_ROW,comm.MAP_COL);\r\n         //创建一个空节点用来盛放生成的预制体\r\n         this.nodeArr = this.initImage(this.node,null);\r\n         this.createNext();\r\n         //从游戏屏幕上下落的次数\r\n         this.times = 0;\r\n        //  //开始下落\r\n        //  this.downFunction(this.nodeArr,1);\r\n         this.iState = 0;\r\n         this.totalTime = 0;\r\n         this.registerKeyBoard();\r\n         this.quick = false;\r\n         this.time = 0;\r\n         this.xltime = this.normalSpeed;\r\n         this.cishu = 0;\r\n         //监听下落按钮按下的时候\r\n         this.downButton.on(\"touchstart\",function(){\r\n            this.xltime = this.quickSpeed;\r\n            this.downButton.children[0].opacity = 120;\r\n            this.playAudio(this.clickAudio);\r\n         }.bind(this));\r\n         //下落按钮离开时候\r\n         this.downButton.on(\"touchend\",function(){\r\n            this.xltime = this.normalSpeed;\r\n            this.downButton.children[0].opacity = 0;\r\n         }.bind(this));\r\n         this.gameOver = false;\r\n         this.status = 0;\r\n         Array.prototype.contain = function(node){\r\n            if(node != undefined){\r\n                for(var i = 0;i<this.length;i++){\r\n                    if(this[i].x === node.x && this[i].y === node.y && this[i].getComponent(\"Figure\").type === node.getComponent(\"Figure\").type){\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n            return false;\r\n        };\r\n        //对发送给服务器中的数据进行去重\r\n        Array.prototype.isContain = function(data){\r\n            if(data !== undefined){\r\n                for(let j = 0;j < this.length;j++){\r\n                    if(this[j].row === data.row && this[j].col === data.col && this[j].color === data.color){\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n            return false;\r\n        }\r\n        // console.log(\"nickName is \" + this.nickName);\r\n        this.tempNodes = [];\r\n        this.san = 0;\r\n        //计分数字\r\n        this.score = 0;\r\n        //旋转按钮旋转\r\n        // var rotateAction = cc.rotateBy(3,360).easing(cc.easeCubicActionOut());\r\n        // var rf = cc.repeatForever(rotateAction);\r\n        // this.rotateButton.runAction(rf);\r\n\r\n        // Menu.prototype.onLoad();\r\n\r\n        //不显示遮罩层\r\n        this.mask.active = false;\r\n        //不显示游戏结束菜单\r\n        this.overMenu.active = false;\r\n        //当前的行号\r\n        this.nCol = 0;\r\n        this.gameOverAnimation.active = false;\r\n        var self = this;\r\n        // this.pause.on(\"touchstart\",function(){\r\n        //     if(!self.gameOver){\r\n        //         //暂停游戏\r\n        //         console.log(\"点击了网络版的暂停\");\r\n        //         self.mask.active = true;\r\n        //         self.pauseMenu.active = true;\r\n        //     }\r\n        // }.bind(this))\r\n        // this.pauseGaveIn.on(\"touchstart\",function(){\r\n        //     self.mask.active = false;\r\n        //     // this.pauseMenu.active = false;\r\n        //     self.pauseMenu.active = false;\r\n        //     self.giveIn = true;\r\n        //     // //向服务器发送投降消息\r\n        //     // self.gameBye();\r\n        //     var jsonData = {\r\n        //         tag1            : 5,\r\n        //         score           : \"\",\r\n        //         type            : \"4\",\r\n        //         state1          : \"\",\r\n        //         changeMapList1  : [],\r\n        //         removeMapList1  : 0,\r\n        //         nMapRow         : \"\",\r\n        //         nMapCol         : \"\",\r\n        //         loading1        : \"\",\r\n        //     }\r\n        //     cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(jsonData);\r\n        //     //显示失败\r\n        //     this.playAudio(this.loseAudio);\r\n        //     //其他下降，旋转按钮，左右移动按钮处于不可激活状态\r\n        //     this.downButton.interactable = false;\r\n        //     this.rotateButton.interactable = false;\r\n        //     this.slideButton.interactable = false;\r\n        //     //显示结束动画\r\n        //     this.gameOverAnimation.active = true;\r\n        //     // var animation = this.gameOverAnimation.getComponent(cc.Animation);\r\n        //     // animation.play(\"Over_light\"); \r\n        //     this.overMenu.active = true;\r\n        //     this.mask.active = true;\r\n        //     //自己失败显示失败\r\n        //     this.overMenu.getChildByName(\"lose\").active = true;\r\n        //     //自己没有赢不显示胜利的标记\r\n        //     this.overMenu.getChildByName(\"win\").active = false;\r\n        //     //显示分数\r\n        //     this.overMenu.getChildByName(\"Score\").getComponent(cc.Label).string = this.score.toString();\r\n        //     cc.director.loadScene(\"PersonsChoose\");\r\n        // }.bind(this));\r\n        // this.pauseRestart.on(\"touchstart\",function(){\r\n        //     cc.director.resume();\r\n            \r\n        //     self.mask.active = false;\r\n        //     self.pauseMenu.active = false;\r\n        //     var jsonData = {\r\n        //         tag1            : 5,\r\n        //         score           : \"\",\r\n        //         type            : \"4\",\r\n        //         state1          : \"\",\r\n        //         changeMapList1  : [],\r\n        //         removeMapList1  : 0,\r\n        //         nMapRow         : \"\",\r\n        //         nMapCol         : \"\",\r\n        //         loading1        : \"\",\r\n        //     }\r\n        //     cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(jsonData);\r\n        //     //显示失败\r\n        //     this.playAudio(this.loseAudio);\r\n        //     //其他下降，旋转按钮，左右移动按钮处于不可激活状态\r\n        //     this.downButton.interactable = false;\r\n        //     this.rotateButton.interactable = false;\r\n        //     this.slideButton.interactable = false;\r\n        //     //显示结束动画\r\n        //     this.gameOverAnimation.active = true;\r\n        //     // var animation = this.gameOverAnimation.getComponent(cc.Animation);\r\n        //     // animation.play(\"Over_light\"); \r\n        //     this.overMenu.active = true;\r\n        //     this.mask.active = true;\r\n        //     //自己失败显示失败\r\n        //     this.overMenu.getChildByName(\"lose\").active = true;\r\n        //     //自己没有赢不显示胜利的标记\r\n        //     this.overMenu.getChildByName(\"win\").active = false;\r\n        //     //显示分数\r\n        //     this.overMenu.getChildByName(\"Score\").getComponent(cc.Label).string = this.score.toString();\r\n        //     cc.director.loadScene(\"PersonsChoose\");\r\n        // }.bind(this));\r\n        // this.pauseReturn.on(\"touchstart\",function(){\r\n        //     cc.director.resume();\r\n        //     self.mask.active = false;\r\n        //     self.pauseMenu.active = false;\r\n        //     //发送消息给服务器\r\n        //     var jsonData = {\r\n        //         tag1            : 5,\r\n        //         score           : \"\",\r\n        //         type            : \"4\",\r\n        //         state1          : \"\",\r\n        //         changeMapList1  : [],\r\n        //         removeMapList1  : 0,\r\n        //         nMapRow         : \"\",\r\n        //         nMapCol         : \"\",\r\n        //         loading1        : \"\",\r\n        //     }\r\n        //     cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(jsonData);\r\n        //     //加载多人选择界面\r\n        //     cc.director.loadScene(\"PersonsChoose\");\r\n        // }.bind(this));\r\n        // //监听游戏暂时退出按钮\r\n        // this.overMenu.getChildByName(\"quit\").on(\"touchstart\",function(){\r\n        //     //加载多人匹配界面\r\n        //     cc.director.loadScene(\"PersonsChoose\");\r\n        // });\r\n        // //监听再来一局按钮\r\n        // this.overMenu.getChildByName(\"again\").on(\"touchstart\",function(){\r\n        //     //加载多人匹配界面\r\n        //     cc.director.loadScene(\"PersonsChoose\");\r\n        // });\r\n        // this.overMenu.getChildByName(\"share\").on(\"touchstart\",function(){\r\n        //     //战绩分享\r\n            \r\n        // });\r\n        //监听敌人是否下落成功\r\n        this.rivalTouchBarry = false;\r\n        //敌人是否落地\r\n        this.isTouch = false;\r\n        //是不是处于惩罚状态\r\n        this.isPunish = false;\r\n        this.invokeRemoveTime = 0;\r\n        //游戏结束是否已经处理过了\r\n        this.hasOver = false;\r\n        //检查自己是否胜利\r\n        this.isWin = false;\r\n    },\r\n    registerKeyBoard : function(){\r\n        //是否在滑动节点上\r\n        this.onSlide = false;\r\n        this.onGameSlide = false;\r\n        var self = this;\r\n        //注册键盘监听\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN,this.onKeyDown,this);\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP,this.onKeyUp,this);\r\n        //滑动按钮监听\r\n        this.slideButton.on(\"touchstart\",function(event){\r\n            // this.onSlide = true;\r\n            //获得当前点击的全局坐标\r\n            this.slideButton.children[0].opacity = 120;\r\n            // self.slidePosition = event.getLocation();\r\n            cc.log(\"self.slidePositionX is \" + self.slidePositionX);\r\n        }.bind(this));\r\n        //在滑动节点上移动的时候\r\n        this.slideButton.on(\"touchmove\",function(event){\r\n            this.onSlide = true;\r\n            //获得当前点击的全局坐标\r\n            this.slideButton.children[0].opacity = 120;\r\n            self.slidePosition = event.getLocation();\r\n            cc.log(\"slidePositionX is \" + self.slidePositionX);\r\n        }.bind(this));\r\n        this.slideButton.on(\"touchcancel\",function(event){\r\n            //获得当前点击的全局坐标\r\n            this.slideButton.children[0].opacity = 0;\r\n            self.slidePosition = event.getLocation();\r\n            this.onSlide = false;\r\n        }.bind(this));\r\n        //在滑动节点上离开的时候\r\n        this.slideButton.on(\"touchend\",function(event){\r\n             //获得当前点击的全局坐标\r\n            this.slideButton.children[0].opacity = 0;\r\n            self.slidePosition = event.getLocation();\r\n            this.onSlide = true;\r\n        }.bind(this));\r\n\r\n         // 滑动节点上方的空节点\r\n         this.gameSlide.on(\"touchstart\",function(event){\r\n            cc.log(\"点击了gameSlide节点\");\r\n        }.bind(this));\r\n        this.gameSlide.on(\"touchmove\",function(event){\r\n            this.onGameSlide = true;\r\n            self.gameSlidePosition = event.getLocation();\r\n        }.bind(this));\r\n        this.gameSlide.on(\"touchend\",function(event){\r\n            this.onGameSlide = true;\r\n            self.gameSlidePosition = event.getLocation();\r\n        }.bind(this));\r\n        this.gameSlide.on(\"touchcancel\",function(event){\r\n            this.onGameSlide = false;\r\n            self.gameSlidePosition = event.getLocation();\r\n        }.bind(this));\r\n    },\r\n    //返回触点对应的列数\r\n    getTouchLine : function(touchNode,worldPosition){\r\n         //将触点的x坐标转化为本地坐标系\r\n         var localX = touchNode.convertToNodeSpaceAR(cc.v2(worldPosition.x,worldPosition.y)).x;\r\n         cc.log(\"local is \" + localX);\r\n         if(localX > 0){\r\n              var n1 = Math.floor(localX/(touchNode.width/6));\r\n              if(n1 >= 0 && n1 < 1){\r\n                  this.nCol = 3;\r\n              }else if(n1 >= 1 && n1 < 2){\r\n                  this.nCol = 4;\r\n              }else if(n1 >= 2 && n1 < 3){\r\n                  this.nCol = 5;\r\n              }\r\n         }else if(localX < 0){\r\n             var n2 = Math.floor(-localX/(touchNode.width/6));\r\n             if(n2 >= 0 && n2 < 1){\r\n                this.nCol = 2;\r\n            }else if(n2 >= 1 && n2 < 2){\r\n                this.nCol = 1;\r\n            }else if(n2 >= 2 && n2 < 3){\r\n                this.nCol = 0;\r\n            }\r\n         }\r\n         return this.nCol;\r\n    },\r\n    onKeyDown : function(event){\r\n        switch(event.keyCode){\r\n            case cc.KEY.down:\r\n                this.xltime = this.quickSpeed;\r\n                 break;\r\n            case cc.KEY.left:\r\n                 this.moveLeft();\r\n                 cc.log(\"<-----\");\r\n                 break;\r\n            case cc.KEY.right:\r\n                 this.moveRight();\r\n                 cc.log(\"----->\");\r\n                 break;  \r\n            case cc.KEY.f:\r\n                 this.rotate();\r\n                 //旋转操作\r\n                 break;                  \r\n        }\r\n    },\r\n    onKeyUp   : function(event){\r\n        switch(event.keyCode){\r\n            case cc.KEY.down:\r\n                this.xltime = this.normalSpeed;\r\n                 break;\r\n            case cc.KEY.left:\r\n                 break;\r\n            case cc.KEY.right:\r\n                 break;  \r\n            case cc.KEY.f:\r\n                 //旋转操作\r\n                 break;                 \r\n        }\r\n    },\r\n    onDestroy () {\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\r\n    },\r\n    start () {\r\n\r\n    },\r\n    createRandomX : function(randomNumber){\r\n        return this.backGroundArr[0][randomNumber];\r\n    },\r\n    //产生随机数\r\n    createRandom : function(min,max){\r\n         return Math.floor(Math.random()*(max - min) + min);\r\n    },\r\n    //初始化游戏场景主背景12行6列的网格\r\n    /**\r\n     * @param  {外框上边缘的厚度} up\r\n     * @param  {外框左右边缘的厚度} lr\r\n     * @param  {背景网格的预制体} back\r\n     * @param  {行数} row\r\n     * @param  {列数} col\r\n     */\r\n    initMap : function(up,lr,back,row,col){\r\n        //初始化y坐标\r\n        var y = this.nodeHeight/2 - this.girdSize/2 - up;\r\n        //初始化x坐标\r\n        var x = -this.nodeWidth/2 + this.girdSize/2 + lr;\r\n        console.log(\"--->>>>x is \" + x);\r\n        console.log(\"--->>>>row is \" + row);\r\n        console.log(\"--->>>>col is \" + col);\r\n        this.backGroundArr = [];\r\n        this.map = [];\r\n        //12行6列的网格\r\n        for(var i = 0;i < row; i++){\r\n            //设置它的y坐标\r\n            var tempY =y - i * this.girdSize - 1;\r\n            tempY = Number(tempY.toFixed(2));\r\n            console.log(\"--->>>>tempY is \" + tempY);\r\n            this.backGroundArr[i] = [];\r\n            this.map[i] = [];\r\n            for(var j = 0; j < col;j++){\r\n                var outArr = this.backGroundArr[i];\r\n                var mapData = this.map[i];\r\n                var tempX = x + j * this.girdSize + 1;\r\n                tempX = Number(tempX.toFixed(2));\r\n                console.log(\"--->>>>tempX is \" + tempX);\r\n                //y坐标不变，x坐标要变\r\n                var tempPrefab = this.setPrefabPosition(back,tempX,tempY,this.node);\r\n                if(arguments.length === 6){\r\n                    tempPrefab.getComponent(arguments[5]).isFilled = 0;\r\n                    // tempPrefab.isFilled = 0;\r\n                    // console.log(\"tempPrefab.isFilled is \" + tempPrefab.isFilled);\r\n                    tempPrefab.getComponent(arguments[5]).type = -1;\r\n                    tempPrefab.getComponent(arguments[5]).innerNode = null;\r\n                }else if(arguments.length === 5){\r\n                    // var node = new Shape(tempPrefab,-1);\r\n                    tempPrefab.getComponent(\"Back\").isFilled = 0;\r\n                    // tempPrefab.isFilled = 0;\r\n                    // console.log(\"tempPrefab.isFilled is \" + tempPrefab.isFilled);\r\n                    tempPrefab.getComponent(\"Back\").type = -1;\r\n                    tempPrefab.getComponent(\"Back\").innerNode = null;\r\n                }\r\n                \r\n                // var shape = new Shape(tempPrefab,-1);\r\n                outArr[j]=tempPrefab;\r\n                mapData[j] = 0;\r\n            }\r\n        }\r\n        console.log(\"backGroundArr is \" +this.backGroundArr);\r\n    },\r\n    //生成形状在这个节点数组中加入父节点\r\n    initImage : function(parentNode,addJsonData){\r\n        this.times = 0;\r\n        //动态生成一个新的节点将生成的预制体节点加入到该父节点上\r\n        // var newNode = new cc.Node();\r\n        // parentNode.addChild(newNode);\r\n        //用来存放预制体的数组\r\n        //定义从哪一列开始下落\r\n        if(addJsonData === null){\r\n            var randomCol = game3.prototype.createRandom(2,4);\r\n        }else{\r\n            //如果是惩罚的话获得在哪一列开始惩罚\r\n            var randomCol = addJsonData.col;\r\n        }\r\n        var prefabArrTemp = [];\r\n        this.cishu  = 0;\r\n        //是否生成成功并且全部显示完毕\r\n        this.isCreateOver = false;\r\n        var loopCount = 2;\r\n        //从上往下生成\r\n        if(addJsonData === null){\r\n            loopCount = 2;\r\n        }else{\r\n            //获得生成惩罚方块的个数\r\n            loopCount = addJsonData.generateCount;\r\n        }\r\n        // var y = this.nodeHeight/2 + this.girdSize/2+1*this.girdSize;\r\n        for(var i = 0;i < loopCount;i++){\r\n            // var offSet = i * this.prefabHeight;\r\n            // cc.log(\"offSet is \" + offSet);\r\n            // //产生0-8的随机数\r\n            if(addJsonData === null){\r\n                var index = this.controlRandom();\r\n            }else{\r\n                var index = addJsonData.punishType;\r\n            }\r\n            // //将对应的颜色索引存放到该数组中\r\n            // // this.boxColorArr.push(this.prefabArr[index].color);\r\n            // cc.log(\"index is \" + index);\r\n            // //将对应的预制体取出来转化为节点然后显示\r\n            var prefabNode = game3.prototype.createPrefab(this.imagePrefabArr[index]);\r\n            // cc.log(\"x is \" + x + \" and y is \"+ y - offSet);\r\n            //设置预制节点的位置\r\n            prefabNode.setPosition(this.backGroundArr[0][randomCol].x,this.backGroundArr[0][randomCol].y);\r\n            cc.log(\"prefabNode is \" + prefabNode);\r\n            prefabNode.getComponent(\"Figure\").type = index;\r\n            prefabNode.getComponent(\"Figure\").col = randomCol;\r\n            prefabNode.getComponent(\"Figure\").row = 0;\r\n            prefabNode.active = false;\r\n            // this.backGroundArr[i][randomCol].node = prefabNode;\r\n            cc.log(\"------type is \" + prefabNode.getComponent(\"Figure\").type);\r\n            //将该预制节点添加为parentNode的孩子\r\n            parentNode.addChild(prefabNode);\r\n            // var shape = new Shape(prefabNode,index);\r\n            //将当前预制体节点存放到预制体临时数组里面\r\n            prefabArrTemp.push(prefabNode);\r\n        }\r\n        console.log(prefabArrTemp);\r\n        //生成父节点\r\n        return prefabArrTemp;\r\n    },\r\n    //改变随机数出现的概率\r\n    controlRandom : function(){\r\n        var id;\r\n        var rnd = Math.random();\r\n        if(rnd < 0.15){\r\n            id = 0;\r\n        }else if(rnd < 0.3){\r\n            id = 1;\r\n        }else if(rnd < 0.45){\r\n            id = 2;\r\n        }else if(rnd < 0.6){\r\n            id = 3;\r\n        }else if(rnd < 0.7){\r\n            id = 4;\r\n        }else if(rnd < 0.8){\r\n            id = 5;\r\n        }else if(rnd < 0.9){\r\n            id = 6;\r\n        }else if(rnd < 1){\r\n            id = 7;\r\n        }\r\n        return id;\r\n    },\r\n    //生成下一个形状\r\n    createNext : function(){\r\n        if(this.next2Block === undefined){\r\n            this.nextBlock = this.generateNext(this.node);\r\n            //显示下一个形状\r\n            this.showNextShape(this.nextBlock,this.nextShape);\r\n        }\r\n        // //生成下下个形状\r\n        // this.next2Block = this.generateNext(this.node);\r\n        // //显示下下个形状\r\n        // this.showNextShape(this.next2Block,this.next2);\r\n    },\r\n    //生成下一个形状\r\n    generateNext : function(parentNode){\r\n        return this.initImage(parentNode,null);\r\n    },\r\n    //显示下一个形状\r\n    showNextShape : function(nextBlock,parentNode){\r\n        //显示下一个形状之前删除这个节点的所有子节点\r\n        if(parentNode.childrenCount > 0){\r\n            for(let k = 0;k<parentNode.childrenCount;k++){\r\n                //销毁该子节点,如果销毁节点成功的话就显示下一个形状\r\n                parentNode.children[k].destroy();\r\n            }\r\n        }\r\n        //依次生成预制节点组成的节点数组\r\n        for(let i = 0;i<2;i++){\r\n            var type = nextBlock[i].getComponent(\"Figure\").type;\r\n            // var spriteFrame = nextBlock[i].getComponent(\"cc.Sprite\").spriteFrame;\r\n            this.setPrefabPosition(this.imagePrefabArr[type],0,60-i*this.girdSize,parentNode);\r\n        }\r\n        // for(let k = 0;k<3;k++){\r\n        //     var pre = ;\r\n        //     this.setPrefabPosition(,50,50+k*this.prefabHeight,this.nextShape);\r\n        // }\r\n    },\r\n     /**\r\n    @param prefab:将要生成预制节点的预制体\r\n    @param x     :将要生成预制节点的x坐标\r\n    @param y     :将要生成预制节点的y坐标\r\n    @param parentNode : 生成的预制节点的父节点\r\n     */\r\n    setPrefabPosition : function(prefab,x,y,parentNode){\r\n        var prefab = this.createPrefab(prefab);\r\n        prefab.setPosition(x,y);\r\n        parentNode.addChild(prefab);\r\n        return prefab;\r\n    },\r\n    //创建一个预制体节点\r\n    createPrefab : function(prefab){\r\n        var prefabNode = cc.instantiate(prefab);\r\n        return prefabNode;\r\n    },\r\n    //查看当前的棍处于哪一列\r\n    getColumn : function(node){\r\n        //竖行的条\r\n        var indexGrid = this.chooseColumnByLocation(node.x);\r\n        //放回列号\r\n        return indexGrid;\r\n    },\r\n    //根据坐标选择位于哪个列\r\n    chooseColumnByLocation : function(x){\r\n        switch(x){\r\n            case this.backGroundArr[0][0].x:\r\n                return 0;\r\n            case this.backGroundArr[0][1].x:\r\n                return 1;\r\n            case this.backGroundArr[0][2].x: \r\n                return 2;\r\n            case this.backGroundArr[0][3].x: \r\n                return 3;\r\n            case this.backGroundArr[0][4].x:\r\n                return 4;\r\n            case this.backGroundArr[0][5].x:\r\n                return 5;                 \r\n        }\r\n    },\r\n    //根据坐标获得位于哪一行\r\n    getRow : function(node){\r\n        var yIndexResult;\r\n        cc.log(\"node is \" + node);\r\n        yIndexResult = this.chooseRawByLocation(node.y);\r\n        return yIndexResult;\r\n    },\r\n    /***\r\n        根据y坐标数值得到对应的行\r\n        返回对应的行数\r\n        @param : y 传入方法中的y坐标\r\n        @return 返回坐标对应的行号\r\n    * */\r\n    chooseRawByLocation : function(y){\r\n        switch(y){\r\n            case this.backGroundArr[11][0].y:\r\n                return 11;\r\n            case this.backGroundArr[10][0].y:\r\n                return 10;\r\n            case this.backGroundArr[9][0].y: \r\n                return 9;\r\n            case this.backGroundArr[8][0].y: \r\n                return 8;\r\n            case this.backGroundArr[7][0].y:\r\n                return 7;\r\n            case this.backGroundArr[6][0].y:\r\n                return 6;\r\n            case this.backGroundArr[5][0].y:\r\n                return 5;\r\n            case this.backGroundArr[4][0].y:\r\n                return 4;\r\n            case this.backGroundArr[3][0].y: \r\n                return 3;\r\n            case this.backGroundArr[2][0].y: \r\n                return 2;\r\n            case this.backGroundArr[1][0].y:\r\n                return 1;\r\n            case this.backGroundArr[0][0].y:\r\n                return 0;    \r\n        }\r\n    },\r\n    getNodeArrMaxCol : function(){\r\n        var maxCol;\r\n        var colArr = [];\r\n        for(let i = 0;i<this.nodeArr.length;i++){\r\n            colArr.push(this.nodeArr[i].getComponent(\"Figure\").col);\r\n        }\r\n        maxCol = Math.max.apply(Math,colArr);\r\n        //返回最大列\r\n        return maxCol;\r\n    },\r\n    getNodeArrMinCol : function(){\r\n        var minCol;\r\n        var colArr = [];\r\n        for(let i = 0;i<this.nodeArr.length;i++){\r\n            colArr.push(this.nodeArr[i].getComponent(\"Figure\").col);\r\n        }\r\n        minCol = Math.min.apply(Math,colArr);\r\n        //返回最小列\r\n        return minCol;\r\n    },\r\n    update (dt) {\r\n        if(Global.advertisement !== null){\r\n            //隐藏广告\r\n            Global.advertisement.hide();\r\n        }\r\n        if(!this.showNoticeHelp){\r\n            if(this.onSlide || this.onGameSlide){\r\n                if(this.onSlide){\r\n                    var column = this.getTouchLine(this.slideButton,this.slidePosition);\r\n                    this.onSlide = false;\r\n                }else{\r\n                    var column = this.getTouchLine(this.gameSlide,this.gameSlidePosition);\r\n                    this.onGameSlide = false;\r\n                }\r\n                //如果当前列比节点数组中最大列还大的话就右移\r\n                if(column > this.getNodeArrMaxCol()){\r\n                    //右移\r\n                    this.moveRight();\r\n                }else if(column < this.getNodeArrMinCol()){\r\n                    //左移\r\n                    this.moveLeft();\r\n                }\r\n            }\r\n            switch(this.status){\r\n                case statuMachine.STATE_BEGIN:\r\n                 cc.log(\"开始游戏\");\r\n                 break;\r\n                case statuMachine.STATE_PLAY:\r\n                 cc.log(\"游戏中\");  \r\n            }\r\n            //如果游戏结束了就不在进行下落\r\n            if(!this.gameOver){\r\n                this.san += dt;\r\n                this.time += dt; \r\n                if(this.cishu === 0 && this.xltime < this.normalSpeed){\r\n                    this.xltime = this.normalSpeed;\r\n                }\r\n                if(this.time > this.xltime){\r\n                    if(this.cishu < 2){\r\n                        //这种情况不让它旋转\r\n                        if(this.cishu === 0){\r\n                            if(this.map[0][this.nodeArr[1].getComponent(\"Figure\").col] === 1){\r\n                                this.gameOver = true;\r\n                            }else{\r\n                                this.nodeArr[1].active = true;\r\n                                let sendJsonData = {\r\n                                    row : 0,\r\n                                    col : this.nodeArr[1].getComponent(\"Figure\").col,\r\n                                    color : this.nodeArr[1].getComponent(\"Figure\").type.toString(),\r\n                                }\r\n                                console.log(\"this.jsonMsgToServer is \" + this.jsonMsgToServer);\r\n                                console.log(\".................消除之后为什么不能下落................\");\r\n                                this.jsonMsgToServer.changeMapList1.push(sendJsonData);\r\n                                //发送数据到服务器\r\n                                this.jsonMsgToServer.score = this.score;\r\n                                this.sendDown = true;\r\n                            }\r\n                        }else if(this.cishu === 1){\r\n                            if(this.map[1][this.nodeArr[1].getComponent(\"Figure\").col] != 1){\r\n                                this.nodeArr[1].y = this.backGroundArr[1][this.nodeArr[1].getComponent(\"Figure\").col].y;\r\n                                this.nodeArr[1].getComponent(\"Figure\").row = 1;\r\n                                this.nodeArr[0].active = true;\r\n                                this.nodeArr[0].y = this.backGroundArr[0][this.nodeArr[0].getComponent(\"Figure\").col].y;\r\n                                this.nodeArr[0].getComponent(\"Figure\").row = 0;\r\n                                // let arr = [];\r\n                                let sendJsonData1 = {\r\n                                    row : 1,\r\n                                    col : this.nodeArr[1].getComponent(\"Figure\").col,\r\n                                    color : this.nodeArr[1].getComponent(\"Figure\").type.toString(),\r\n                                }\r\n                                let sendJsonData0 = {\r\n                                    row : 0,\r\n                                    col : this.nodeArr[0].getComponent(\"Figure\").col,\r\n                                    color : this.nodeArr[0].getComponent(\"Figure\").type.toString(),\r\n                                }\r\n                                this.jsonMsgToServer.changeMapList1.push(sendJsonData1);\r\n                                this.jsonMsgToServer.changeMapList1.push(sendJsonData0);\r\n                                this.jsonMsgToServer.score = this.score;\r\n                                this.sendDown = true;\r\n                                \r\n                            }else{\r\n                                this.gameOver = true;\r\n                            }\r\n                        }\r\n                        this.cishu++;\r\n                        //表示节点数组已经生成完毕可以进行旋转操作\r\n                        if(this.cishu === 2){\r\n                            //两个方块已经生成完毕\r\n                            this.isCreateOver = true;\r\n                        }\r\n                    }else{\r\n                        //更新节点的位置信息\r\n                        this.updatePrefatY(this.nodeArr);\r\n                    }\r\n                    this.time = 0;\r\n                }\r\n                /**\r\n                 * 发送给服务器数据开始\r\n                 */\r\n                //发送下落的数据\r\n                if(this.sendDown){\r\n                   this.sendChangeDataToServer();\r\n                    //发送完毕关闭该开关\r\n                   this.sendDown = false;\r\n                }\r\n                //发送向左移动的数据\r\n                if(this.sendLeft){\r\n                   this.sendChangeDataToServer();\r\n                   this.sendLeft = false;\r\n                }\r\n                //发送向右移动的数据\r\n                if(this.sendRight){\r\n                   this.sendChangeDataToServer();\r\n                   this.sendRight = false;\r\n                }\r\n                //发送旋转的相关数据\r\n                if(this.sendRotate){\r\n                    this.sendChangeDataToServer();\r\n                    this.sendRotate = false;\r\n                }\r\n                /**\r\n                 * 发送给服务器数据结束\r\n                 */\r\n            }else {\r\n                // //自己的游戏状态为是否游戏结束重置为true\r\n                // cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").isOver = true;\r\n                //自己被敌人打败\r\n                if(!this.hasOver){\r\n                    console.log(\"进入自己失败的游戏界面\");\r\n                    if(!this.isWin){\r\n                        this.gameBye();\r\n                    }\r\n                }\r\n            \r\n            }\r\n        }\r\n        //监听敌人是不是被自己打败\r\n    },\r\n    sendChangeDataToServer : function(){\r\n        cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(this.jsonMsgToServer);\r\n        console.log(\"================发送数据结束================\");\r\n        this.jsonMsgToServer.changeMapList1 = [];\r\n    },\r\n    //游戏结束是否是被敌人打败\r\n    gameBye : function(){\r\n        //播放失败音效\r\n        this.playAudio(this.loseAudio);\r\n        //其他下降，旋转按钮，左右移动按钮处于不可激活状态\r\n        this.downButton.interactable = false;\r\n        this.rotateButton.interactable = false;\r\n        this.slideButton.interactable = false;\r\n        //显示结束动画\r\n        this.gameOverAnimation.active = true;\r\n        // var animation = this.gameOverAnimation.getComponent(cc.Animation);\r\n        // animation.play(\"Over_light\"); \r\n        this.overMenu.active = true;\r\n        this.mask.active = true;\r\n        //自己失败显示失败\r\n        this.overMenu.getChildByName(\"lose\").active = true;\r\n        //自己没有赢不显示胜利的标记\r\n        this.overMenu.getChildByName(\"win\").active = false;\r\n        //显示分数\r\n        this.overMenu.getChildByName(\"Score\").getComponent(cc.Label).string = this.score.toString();\r\n        //显示等级\r\n        //游戏结束向服务器发送游戏结束事件\r\n        //被对手打败发送消息到服务器\r\n        //被敌人打败发送消息到服务器告诉服务器我输了\r\n        var gameOverJson = {\r\n            tag1            : 4,\r\n            score           : \"\",\r\n            type            : \"4\",\r\n            state1          : \"\",\r\n            changeMapList1  : [],\r\n            removeMapList1  : 0,\r\n            nMapRow         : \"\",\r\n            nMapCol         : \"\",\r\n            loading1        : \"\",\r\n            result_score    : \"\",\r\n        }\r\n        //告诉对方我的游戏结束了\r\n        var gameOverJson1 = {\r\n            tag1            : 13,\r\n            score           : \"\",\r\n            type            : \"4\",\r\n            state1          : \"\",\r\n            changeMapList1  : [],\r\n            removeMapList1  : 0,\r\n            nMapRow         : \"\",\r\n            nMapCol         : \"\",\r\n            loading1        : \"\",\r\n            result          : -1,\r\n        }\r\n        gameOverJson.result_score = this.score.toString();\r\n        console.log(\"进入游戏结束给服务器发送游戏结束信息\");\r\n        //如果游戏结束没有发送给服务器发送一次\r\n        cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(gameOverJson);\r\n        cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(gameOverJson1);\r\n        // this.overCost += dt;\r\n        //游戏结束已经处理过了\r\n        this.hasOver = true;\r\n        //显示广告内容\r\n        // cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").showVideoAd(\"adunit-4b3b25878ef47139\");\r\n        cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").showAdvice(\"adunit-cba9712c1d68c59d\");\r\n        //暂停游戏\r\n        cc.director.pause();\r\n    },\r\n    //更新预制体节点的y坐标\r\n    updatePrefatY : function(nodeArr){\r\n                var self = this;\r\n                //如果允许下落的话条的y坐标向下移动\r\n                if(this.CheckIsDown(nodeArr)){\r\n                        //下落节点数组,如果是横向的话分开这连个节点\r\n                        this.down(nodeArr);\r\n                }else{\r\n                    console.log(\"对手是否触底---->>>> \"+ this.rivalTouchBarry);\r\n                    if(this.rivalTouchBarry){\r\n                        console.log(\"对手触底了吗？\",this.rivalTouchBarry);\r\n                        // console.log(\"$$$$$$$$$$$$$$$$$$$$$$$$$$$$>>>>>>>>>>>>>Enter the rivalTouchBarry\");\r\n                        //如果对手碰到障碍物了就将isTouch重置为true\r\n                        this.isTouch = true;\r\n                        //改变地图信息\r\n                        this.changeMap(this.nodeArr);\r\n                        var removeTime = 0;\r\n                        //发送给服务器的惩罚所需要的数据\r\n                        var removeJsonToServerWithPunish = {\r\n                            tag1            : 12,\r\n                            score           : \"\",\r\n                            type            : \"4\",\r\n                            state1          : \"\",\r\n                            changeMapList1  : [],\r\n                            removeRow       : 0,\r\n                            nMapRow         : \"\",\r\n                            nMapCol         : \"\",\r\n                            loading1        : \"\",\r\n                        }\r\n                        console.log(\"准备发送数据hahahahahahhaah\");\r\n                        function next(data){\r\n                            //处于闭包环境下该方法需要绑定对象\r\n                            //计算消除的次数\r\n                            removeJsonToServerWithPunish.removeRow = data;\r\n                            //发送惩罚相关数据\r\n                            console.log(\"============================发送惩罚相关数据到服务器\");\r\n                            cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(removeJsonToServerWithPunish);\r\n                            //惩罚完毕关闭惩罚\r\n                            self.isPunish = false;\r\n                            //监听对手是否触底开关关闭\r\n                            self.rivalTouchBarry = false;\r\n                            self.invokeRemoveTime = 0;\r\n                        } \r\n                        //异步操作       \r\n                        self.checkNodeArr(self.nodeArr,removeTime).then(function(){\r\n                            console.log(\"最终的消除次数是：\" + removeTime);\r\n                            console.log(\"在更新预制体坐标位置的全局消除次数是\",self.invokeRemoveTime);\r\n                            next(self.invokeRemoveTime);\r\n                        });\r\n                        console.log(\"消除惩罚开关是否关闭\",self.isPunish);\r\n                        console.log(\"消除监听对手惩罚开关是否关闭\",self.rivalTouchBarry);\r\n                        //消除次数是\r\n                        console.log(\"准备给服务器发送12消息 消除次数是-----\",removeTime);\r\n                        //等待上一步的异步操作\r\n                        console.log(\"?????????????????????/////消除发送给服务器数据\");\r\n                    }else{\r\n                        console.log(\"::::::::this.rivalTouchBarry\");\r\n                        console.log(\"对手触底了吗？\",this.rivalTouchBarry);\r\n                        //改变地图信息\r\n                        this.changeMap(this.nodeArr);\r\n                        var removeTime = 0;\r\n                        //消除个数或者是消除次数发给服务器\r\n                        var removeJsonToServer = {\r\n                            tag1            : 6,\r\n                            score           : \"\",\r\n                            type            : \"4\",\r\n                            state1          : \"\",\r\n                            changeMapList1  : [],\r\n                            removeMapList1  : [],\r\n                            nMapRow         : \"\",\r\n                            nMapCol         : \"\",\r\n                            loading1        : \"\",\r\n                        }\r\n                        function next(data){\r\n                            let jsonR = {\r\n                                row : data,\r\n                                col : 0,\r\n                            };\r\n                            removeJsonToServer.removeMapList1.push(jsonR);\r\n                            //向服务器发送消除的次数以便进行惩罚\r\n                            console.log(\"在next方法中消除次数是\"+ jsonR.data);\r\n                            cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(removeJsonToServer);\r\n                            //重置消除次数\r\n                            self.invokeRemoveTime = 0;\r\n                        } \r\n                        self.checkNodeArr(self.nodeArr,removeTime).then(function(){\r\n                            console.log(\"最终的消除次数是：\"+ removeTime);\r\n                            console.log(\"在更新预制体坐标位置的全局消除次数是\",self.invokeRemoveTime);\r\n                            if(self.invokeRemoveTime != 0){\r\n                                next(self.invokeRemoveTime);\r\n                            }\r\n                        });\r\n                        // function waitCheck(){\r\n                        //     //查看这个节点数组中是否可以消除如果满足条件进行消除返回一个Promise对象\r\n                        //     return self.checkNodeArr(self.nodeArr,removeTime);\r\n                        // }       \r\n                        // waitCheck().then(function(data){\r\n                        //     //检查完成之后进行下一步操作\r\n                        //     // console.log(\"记录递归调用的次数是\"+this.invokeRemoveTime);\r\n                        //     // console.log(\"then 操作----->>>\",data);\r\n                        //     console.log(\"消除次数是：\"+removeTime);\r\n                        //     //如果消除的次数为零的话该数据不发送给服务器\r\n                        //     if(removeTime != 0){\r\n                        //         //消除次数不为零的情况发送给服务器\r\n                        //         next(removeTime);\r\n                                \r\n                        //     }\r\n                        // });   \r\n                        //等待上一步的异步操作上一步的异步操作完成之后给服务器发送数据\r\n                    }\r\n                    //如果是不在惩罚状态的话就正常下落如果是处于惩罚状态的话就等待惩罚进行完毕之后进行下落\r\n                    \r\n                    //生成下一个形状\r\n                    self.nodeArr = self.nextBlock;\r\n                    //生成下一个形状\r\n                    self.createNext();\r\n                    \r\n                }\r\n    },\r\n    share : function(){\r\n        if(CC_WECHATGAME){\r\n            console.log(\"首页share\");\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").shareFriends();\r\n        }else if(cc.sys.isNative){\r\n            //原生平台分享\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nativeShare();\r\n        }\r\n    },\r\n    //检查一个节点数组是否满足消除条件\r\n    checkNodeArr : function(nodeArr,removeTime){\r\n        var self = this;\r\n        if(nodeArr.length > 0){\r\n            //临时数组存放待消节点\r\n            var waitQueue = [];\r\n            if(this.canRemove(nodeArr,waitQueue).isRemove){\r\n                //如果是可以消除的话进行消除这时候待消队列已经填满了节点\r\n                // this.remove(this.nodeArr);\r\n                //检测完这两个下落的方块的待消队列\r\n                for(let j = 0;j<waitQueue.length;j++){\r\n                    //如果该节点已经删除的话不对它操作\r\n                    if(waitQueue[j] === null){\r\n                        //将它从该数组删除\r\n                        waitQueue.splice(j,1);\r\n                    }\r\n                    //将这些待消除的标记为可消除的\r\n                    waitQueue[j].getComponent(\"Figure\").isRemove = true;\r\n                }\r\n                this.tempNodes = waitQueue;\r\n                //加分\r\n                this.addScore(waitQueue.length);\r\n                return self.remove(waitQueue,removeTime).then(function(data){\r\n                    console.log(\"在检查节点的时候消除次数是：\",removeTime);\r\n                    console.log(\"上一次remove执行完毕\");\r\n                });\r\n                // return new Promise(function(resolve,reject){\r\n                //     //检测是否可以消除操作\r\n                //     var b = self.remove(waitQueue,removeTime);\r\n                //     console.log(\"b is \",b);\r\n                //     if(b){\r\n                //         //如果消除完毕就告诉Promise执行完毕了\r\n                //         resolve(removeTime);\r\n                //     }\r\n                //     // resolve(removeTime);\r\n                // });\r\n            }else{\r\n                //不能消除的时候发送零\r\n                if(this.rivalTouchBarry){\r\n                    console.log(\"对手不能消除在发送消息给服务器！！！！！！\");\r\n                    // callback(0);\r\n                    return new Promise(function(resolve,reject){\r\n                        console.log(\"进入消除零次的Promise\");\r\n                        resolve(0);\r\n                    });\r\n                }else{\r\n                    //如果是自己的话消除零次发送给服务器但是在不能下落的时候不发送该数据\r\n                    return new Promise(function(resolve,reject){\r\n                        console.log(\"对手没有给我发消息\");\r\n                        resolve(0); \r\n                    });\r\n                }\r\n            }\r\n            \r\n           \r\n            \r\n        }\r\n        \r\n    },\r\n    //消除操作，先播放消除动画删除相应节点，上面的节点依次下落\r\n    remove : function(waitQueue,removeTime){\r\n        //播放消除音效\r\n        this.playAudio(this.removeAudio);\r\n        //先不删除这些节点等找到所有这些待消节点上方的节点之后删除他们\r\n        //找到这几个待消节点上面的所有节点让他们自动执行下落动作（节点所挂的消除下落方法）\r\n        var scoreLabel = this.scoreLabel.getComponent(cc.Label);\r\n        removeTime++;\r\n        //记录消除次数\r\n        this.invokeRemoveTime++;\r\n        if(removeTime >= 2){\r\n            if(removeTime === 2){\r\n                //产生一次连击\r\n                this.score += 10;\r\n            }else if(removeTime === 3){\r\n                //产生两次连击\r\n                this.score += 20;\r\n            }else if(removeTime === 4){\r\n                //产生3次连击\r\n                this.score += 30;\r\n            }else if(removeTime === 5){\r\n                //产生4次连击\r\n                this.score += 40;\r\n            }else if(removeTime === 6){\r\n                this.score += 50;\r\n            }else if(removeTime === 7){\r\n                //六连击\r\n                this.score += 60;\r\n            }\r\n            scoreLabel.string = this.score.toString();\r\n        }\r\n        // this.jsonMsgToServer.removeMapList1 = removeTime;\r\n        // this.jsonMsgToServer.score = this.score.toString();\r\n        \r\n        var waitDownArr = [];\r\n        for(let m = 0;m<waitQueue.length;m++){\r\n            var cRow = waitQueue[m].getComponent(\"Figure\").row;\r\n            var cCol = waitQueue[m].getComponent(\"Figure\").col;\r\n            this.upFindNodes(cRow,cCol,waitDownArr);\r\n        }\r\n        cc.log(\"待下落节点数组为：\" + waitDownArr);\r\n        //得到激活之后的节点\r\n        var activeNode = this.deleteNodeFromParent(waitQueue);\r\n        // if(!waitDownArr.contain(activeNode))\r\n        //     waitDownArr.push(activeNode);\r\n        //下落其他节点\r\n        for(let j = 0;j<waitDownArr.length;j++){\r\n             waitDownArr[j].getComponent(\"Figure\").afterRemoveDown(this.map,this.backGroundArr,true);\r\n        }\r\n        if(activeNode.length > 0){\r\n            for(let i = 0;i<activeNode.length;i++){\r\n                if(!waitDownArr.contain(activeNode[i])){\r\n                    //将该激活节点加入到下降节点队列里检测是否可以再次消除\r\n                    waitDownArr.push(activeNode[i]);\r\n                }\r\n            }\r\n        }\r\n        // cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(this.jsonMsgToServer);\r\n        //检测下降的节点数组看看是否可以再次消除\r\n        //0.5秒后检测下落的节点数组，为了防止下落块还没有执行action完又来了个action这样moveTo方法会出现错误\r\n        //连消检测\r\n        var self = this;\r\n        function next(){\r\n            //向服务器发送分数信息\r\n            var jsonMsgToServer = {\r\n                tag1            : 11,\r\n                score           : 0,\r\n                type            : \"4\",\r\n                state1          : \"\",\r\n                changeMapList1  : [],\r\n                removeMapList1  : 0,\r\n                nMapRow         : \"\",\r\n                nMapCol         : \"\",\r\n                loading1        : \"\",\r\n                nDisappear1     : 0,\r\n            }\r\n            jsonMsgToServer.tag1 = 11;\r\n            jsonMsgToServer.score = self.score;\r\n            jsonMsgToServer.nDisappear1 = self.score;\r\n            cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(jsonMsgToServer);\r\n            // return true;\r\n        }\r\n        console.log(\"1031\");\r\n        function waitPromise(){\r\n            return new Promise(function(resolve,reject){\r\n                setTimeout(function(){\r\n                    console.log(\"1034 line \" + removeTime);\r\n                    //检查是否能再次消除\r\n                    var isP = self.checkNodeArr(waitDownArr,removeTime);\r\n                    if(isP instanceof Promise){\r\n                        console.log(\"1038 --->\" + isP);\r\n                        isP.then(function(data){\r\n                            resolve(data);\r\n                        });\r\n                    }\r\n                },500);\r\n            });\r\n        }\r\n        return waitPromise().then(function(data){\r\n            console.log(\"在消除方法中消除次数是\",removeTime);\r\n            console.log(\"全局的消除变量是\",self.invokeRemoveTime);\r\n            next();\r\n            // overPromise();\r\n        });\r\n        \r\n    },\r\n    //改变地图信息\r\n    changeMap : function(nodeArr){\r\n        if(nodeArr.length > 0){\r\n            for(let k = 0;k<nodeArr.length;k++){\r\n                //将所有的坐标变成只保留两位小数的数字\r\n                nodeArr[k].x = Number(nodeArr[k].x.toFixed(2));\r\n                nodeArr[k].y = Number(nodeArr[k].y.toFixed(2));\r\n            }\r\n            for(let i = 0;i<nodeArr.length;i++){\r\n                //当前停止的节点对应的地图位置\r\n                var row = nodeArr[i].getComponent(\"Figure\").row;\r\n                var col = nodeArr[i].getComponent(\"Figure\").col;\r\n                //如果有块在停止的时候更新了地图就不在这里更新地图信息了\r\n                if(!nodeArr[i].getComponent(\"Figure\").hasDown){\r\n                    this.map[row][col] = 1;\r\n                    //将背景方格的属性状态改为该节点数组对应的类型\r\n                    this.backGroundArr[row][col].getComponent(\"Back\").type = nodeArr[i].getComponent(\"Figure\").type;\r\n                    this.backGroundArr[row][col].getComponent(\"Back\").innerNode = nodeArr[i];\r\n                }else{\r\n                    //将该节点的移动状态改为初始值\r\n                    nodeArr[i].getComponent(\"Figure\").hasDown = false;\r\n                }\r\n                \r\n            }\r\n                \r\n        }\r\n    },\r\n    //检查该节点数组是否可以消除\r\n    /**\r\n     * @param  {待检测的节点数组} nodeArr\r\n     * @param  {待消队列} waitQueue\r\n     * @return {JSON}    result\r\n     */\r\n    canRemove : function(nodeArr,waitQueue){\r\n        //返回结果\r\n        var result = {\r\n            isRemove : false,\r\n            queue    : null,\r\n        }\r\n        for(let m = 0;m < nodeArr.length;m++){\r\n            var tempArr = [];\r\n            var cRow = nodeArr[m].getComponent(\"Figure\").row;\r\n            var cCol = nodeArr[m].getComponent(\"Figure\").col;\r\n            var cType = nodeArr[m].getComponent(\"Figure\").type;\r\n            this.find(nodeArr[m],cRow,cCol,cType,tempArr);\r\n            if(tempArr.length >= 3){\r\n                for(let k = 0;k < tempArr.length;k++){\r\n                    var nodeType = tempArr[k].getComponent(\"Figure\").type;\r\n                    //画像方块的类型在0-3之间才允许加进去\r\n                    if(!waitQueue.contain(tempArr[k]) && (nodeType < 4 && nodeType >= 0)){\r\n                        //如果数组里面有这个节点的信息了说明已经加到数组里面了不用再重复加入了\r\n                        waitQueue.push(tempArr[k]);\r\n                    }else{\r\n                        cc.log(\"该类型不在加入的条件\");\r\n                    }\r\n                    \r\n                }\r\n            }\r\n        }\r\n        //递归的方式把待消队列找出来\r\n        if(waitQueue.length >= 3){\r\n            result.isRemove = true;\r\n            result.queue = waitQueue;\r\n        }else{\r\n            result.isRemove = false;\r\n            result.queue = [];\r\n        }\r\n        return result;\r\n\r\n    },\r\n    /**\r\n     * 依据带消除队列里的长度进行计算分数\r\n     * @param  {待消除队列的长度} waitQueueLength\r\n     */\r\n    addScore : function(waitQueueLength){\r\n        var scoreLabel = this.scoreLabel.getComponent(cc.Label);\r\n        switch(waitQueueLength){\r\n            case 3:\r\n                this.score += 30;\r\n                break;\r\n            case 4:\r\n                this.score += 40;\r\n                break;\r\n            case 5:\r\n                this.score += 50;\r\n                break;\r\n            case 6:\r\n                this.score += 60;\r\n                break;\r\n            case 7:\r\n                this.score += 70;\r\n                break;\r\n            case 8:\r\n                this.score += 80;\r\n                break;\r\n            case 9:\r\n                this.score += 90;\r\n                break;                        \r\n        }\r\n        //显示分数\r\n        scoreLabel.string = this.score;\r\n    },\r\n    \r\n    /**\r\n     * @param  {待消除队列} waitQueue\r\n     */\r\n    deleteNodeFromParent : function(waitQueue){\r\n        //激活节点数组\r\n        var activeNodeArr = [];\r\n        var jsonMsgToServer = {\r\n            tag1            : 9,\r\n            score           : \"\",\r\n            type            : \"4\",\r\n            state1          : \"\",\r\n            changeMapList1  : [],\r\n            removeMapList1  : 0,\r\n            nMapRow         : \"\",\r\n            nMapCol         : \"\",\r\n            loading1        : \"\",\r\n            nDisappear1     : \"\", \r\n        };\r\n        for(let i = 0;i<waitQueue.length;i++){\r\n            var row = waitQueue[i].getComponent(\"Figure\").row;\r\n            var col = waitQueue[i].getComponent(\"Figure\").col;\r\n            // var upNodes = this.upFindNodes(row,col);\r\n            //检查待消除方格的周围有没有封印的方格小块\r\n            this.checkHasSealBlock(row,col,activeNodeArr);\r\n            //恢复地图信息\r\n            this.map[row][col] = 0;\r\n            //恢复背景方格的原始属性\r\n            this.backGroundArr[row][col].getComponent(\"Back\").type = -1;\r\n            this.backGroundArr[row][col].getComponent(\"Back\").innerNode = null;\r\n            waitQueue[i].getComponent(\"Figure\").shine();\r\n            let removeJsonInfo = {\r\n                row : row,\r\n                col : col,\r\n                color : \"-1\",\r\n            }\r\n            jsonMsgToServer.changeMapList1.push(removeJsonInfo);\r\n        }\r\n       \r\n        console.log(\"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\");\r\n        console.log(...jsonMsgToServer.changeMapList1);\r\n        cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(jsonMsgToServer);\r\n        //返回激活队列\r\n        return activeNodeArr;\r\n        // if(activeNodeArr.length > 0){\r\n        //     //检查激活过的节点是否存在消除的可能\r\n        //     this.checkNodeArr(activeNodeArr);\r\n        // }\r\n    },\r\n    //查看一个节点周围有没有封印的画像方块\r\n    checkHasSealBlock : function(row,col,activeNodeArr){\r\n        //四个方向的位置\r\n        var directionArr = [[row-1,col],[row+1,col],[row,col-1],[row,col+1]];\r\n        for(let m = 0;m<directionArr.length;m++){\r\n            var crow = directionArr[m][0];\r\n            var ccol = directionArr[m][1];\r\n            //如果行或者列超出了边界位置就继续下一个方向数组对应的行和列\r\n            if(crow > 11 || crow < 0 || ccol > 5 || ccol < 0){\r\n                continue;\r\n            }else{\r\n                var node = this.backGroundArr[crow][ccol].getComponent(\"Back\").innerNode;\r\n                if(node === null){\r\n                    continue;\r\n                }\r\n                //如果是待消除的方块的话就跳过该节点\r\n                if(node.getComponent(\"Figure\").isRemove === true){\r\n                    continue;\r\n                }\r\n                var nodeType = this.backGroundArr[crow][ccol].getComponent(\"Back\").type;\r\n                if(nodeType >= 4 && nodeType <= 7){\r\n                    // var nodeName = Number(node.name);\r\n                    //证明该行该列存在封印的画像动态加载图片\r\n                    cc.log(\"nodeType is \" + nodeType);\r\n                    var anim = node.getComponent(cc.Animation);\r\n                    //激活状态设置为true\r\n                    node.getComponent(\"Figure\").isActive = true;\r\n                    if(!activeNodeArr.contain(node)){\r\n                        //将该激活节点加入到激活队列里\r\n                        activeNodeArr.push(node);\r\n                    }\r\n                    let sendJson = {\r\n                        row : crow,\r\n                        col : ccol,\r\n                        color : \"2\",\r\n                    }\r\n                    if(nodeType === 4){\r\n                        this.playAnimAndChangeState(anim,0,\"7\",crow,ccol,node,sendJson);\r\n                    }else if(nodeType === 5){\r\n                        this.playAnimAndChangeState(anim,1,\"8\",crow,ccol,node,sendJson);\r\n                    }else if(nodeType === 6){\r\n                        this.playAnimAndChangeState(anim,2,\"9\",crow,ccol,node,sendJson);\r\n                    }else if(nodeType === 7){\r\n                       this.playAnimAndChangeState(anim,3,\"10\",crow,ccol,node,sendJson);\r\n                    }  \r\n                    this.jsonMsgToServer.changeMapList1.push(sendJson);\r\n                    cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(this.jsonMsgToServer);\r\n                    //置空改变地图json对象数组\r\n                    this.jsonMsgToServer.changeMapList1 = [];\r\n                    console.log(\"=====================查找待激活的节点并将它传到服务器并且改变数组=========================\");\r\n                }\r\n            }\r\n        }\r\n\r\n    },\r\n    /**\r\n     * 播放破壳动画及变换背景方格的类型\r\n     * @param  {动画对象} anim\r\n     * @param  {背景方格对应的类型} type\r\n     * @param  {该节点即将改变的名字} name\r\n     * @param  {待破壳节点的行} crow\r\n     * @param  {待破壳节点的列} ccol\r\n     * @param  {改变的节点} node\r\n     * @param  {发送给服务器的json数据} sendJson\r\n     */\r\n    playAnimAndChangeState : function(anim,type,name,crow,ccol,node,sendJson){\r\n        for(let j = 0;j<node.childrenCount;j++){\r\n            node.children[j].setPositionX(0);\r\n            node.children[j].active = true;\r\n        }\r\n        anim.play(\"game_yellow_stone_unlock\");\r\n        //改变背景方格的对应的状态类型\r\n        this.backGroundArr[crow][ccol].getComponent(\"Back\").type = type;\r\n        sendJson.color = type.toString();\r\n        //设置该节点的类型为0\r\n        node.getComponent(\"Figure\").type = type;\r\n        node.name = name;\r\n    },\r\n    //动态修改图片的spriteFrame\r\n    /**\r\n     * @param  {节点的名字} nodeName\r\n     * @param  {待修改节点} node\r\n     */\r\n    dynamicLoad : function(nodeName,node){\r\n        nodeName = Number(nodeName);\r\n        function callback(err,spriteFrame){\r\n            if(err){\r\n                console.log(err);\r\n            }\r\n            node.getComponent(cc.Sprite).spriteFrame = spriteFrame;\r\n            //加载完之后修改精灵的名字\r\n            cc.log(\"设置\");\r\n        }\r\n        (function test(callback){\r\n            cc.loader.loadRes(\"Game4/\" + nodeName-4,cc.SpriteFrame,callback);\r\n        })(callback.bind(this));\r\n    },\r\n    \r\n    //向上找节点\r\n    /**\r\n     * @param  {本节点的行} row\r\n     * @param  {本节点的列} col\r\n     * @param  {存放该节点以上的所有节点数组} arr\r\n     */\r\n    upFindNodes : function(row,col,arr){\r\n        if(arguments.length === 2){\r\n            var tempArr = [];\r\n        }\r\n        while(row > 0){\r\n            row--;\r\n            var upNode = this.backGroundArr[row][col].getComponent(\"Back\").innerNode;\r\n            if(upNode != null){\r\n                if(upNode.getComponent(\"Figure\").isRemove === true){\r\n                    continue;\r\n                }else{\r\n                    if(arguments.length === 3){\r\n                        //将不是待消节点添加到数组中去\r\n                        if(!arr.contain(upNode)){    \r\n                            //如果该数组中还没有该节点的话就加进去\r\n                            arr.push(upNode);\r\n                        }\r\n                    }else{\r\n                        if(!tempArr.contain(upNode))\r\n                            tempArr.push(upNode);\r\n                    }\r\n                }\r\n            }else{\r\n                //如果upNode是空的话\r\n                break;\r\n            }\r\n        }\r\n        if(arguments.length === 2){\r\n            return tempArr;\r\n        }\r\n    },\r\n   //\r\n   /**\r\n    * 递归查找该节点上下左右四个方向是否有跟自己的类型相同的节点\r\n    * @param  {待检测节点} node\r\n    * @param  {待检测节点所在的行} row\r\n    * @param  {待检测节点所在的列} col\r\n    * @param  {待检测节点的类型} type\r\n    * @param  {待消除队列} arr\r\n    */\r\n   find : function(node,row,col,type,arr){\r\n       //定义上下左右四个方向数组\r\n       var round = [[row-1,col],[row+1,col],[row,col-1],[row,col+1]];\r\n       if(!arr.contain(node)){\r\n           //如果当前数组中不包含该节点就加入数组\r\n           arr.push(node);\r\n       }\r\n       for(let i =0;i < round.length;i++){\r\n           //如果计算的行或者列超出了边界继续下一个行列\r\n           if(round[i][0] < 0 || round[i][0] >11 || round[i][1] > 5 || round[i][1] < 0){\r\n               continue;\r\n           }\r\n           var checkType = this.backGroundArr[round[i][0]][round[i][1]].getComponent(\"Back\").type;\r\n           if(checkType === type && checkType < 4 && checkType >= 0){\r\n                var waitDeleteNode = this.backGroundArr[round[i][0]][round[i][1]].getComponent(\"Back\").innerNode;\r\n                if(!arr.contain(waitDeleteNode)){\r\n                    arr.push(waitDeleteNode);\r\n                    //递归寻找节点\r\n                    this.find(waitDeleteNode,round[i][0],round[i][1],type,arr);\r\n                }\r\n           }\r\n       }\r\n   },\r\n   //方块下落方法\r\n   down : function(nodeArr){\r\n        //在update里面发送下落数据标记\r\n        this.sendDown = true;\r\n        this.jsonMsgToServer.score = this.score;\r\n        //获得最小行\r\n        var minRow = Math.min.apply(Math,Array.of(nodeArr[0].getComponent(\"Figure\").row,nodeArr[1].getComponent(\"Figure\").row));\r\n        var colArr = []; //= Array.of(nodeArr[0].getComponent(\"Figure\").col,nodeArr[1].getComponent(\"Figure\").col);\r\n        for(let m = 0;m<2;m++){\r\n            let colNum = nodeArr[m].getComponent(\"Figure\").col;\r\n            //数组去重\r\n            if(!colArr.includes(colNum)){\r\n                colArr.push(colNum)\r\n            }\r\n        }\r\n        //位移2个方格\r\n        for(var i = nodeArr.length-1;i >= 0;i--){\r\n            var row = this.getRow(nodeArr[i]);\r\n            var col = this.getColumn(nodeArr[i]);\r\n            nodeArr[i].y = this.backGroundArr[row+1][col].y;\r\n            //改变该节点的行数\r\n            nodeArr[i].getComponent(\"Figure\").row = row+1;\r\n            var afterDownRow = nodeArr[i].getComponent(\"Figure\").row;\r\n            //将这些行的信息存到json数组里发送给服务器\r\n            let currentJson = {};\r\n            currentJson.row = afterDownRow;\r\n            currentJson.col = col;\r\n            currentJson.color = nodeArr[i].getComponent(\"Figure\").type.toString();\r\n            this.jsonMsgToServer.changeMapList1.push(currentJson);\r\n            if(afterDownRow-1 === minRow){\r\n                //如果是同行不同列的情况的话遍历各个列\r\n                for(let j = 0;j<colArr.length;j++){\r\n                    var upZero = {};\r\n                    upZero.row = minRow;\r\n                    upZero.col = colArr[j];\r\n                    upZero.color = \"-1\";\r\n                    this.jsonMsgToServer.changeMapList1.push(upZero);\r\n                }\r\n            }\r\n        }\r\n        console.log(\"jsonMstToLServer is \" + this.jsonMsgToServer);\r\n        console.log(\"tag1 is \" + this.jsonMsgToServer.tag1);\r\n        console.log(\"score is \" + this.jsonMsgToServer.score);\r\n        console.log(\"changeMapList1 is \" + this.jsonMsgToServer.changeMapList1.length);\r\n        console.log(\"=================下落发送数据到服务器开始==================\");\r\n        \r\n    },\r\n    //将这两个预制体的坐标数值保留两位小数\r\n    remainTwoNumber : function(nodeArr){\r\n        for(let k = 0;k<nodeArr.length;k++){\r\n            //将所有的坐标变成只保留两位小数的数字\r\n            nodeArr[k].x = Number(nodeArr[k].x.toFixed(2));\r\n            nodeArr[k].y = Number(nodeArr[k].y.toFixed(2));\r\n        }\r\n    },\r\n    //旋转方法\r\n    rotate : function(){\r\n        if(!this.gameOver){\r\n            //记录下旋转的位置\r\n            // this.unscheduleAllCallbacks();\r\n            if(this.isCreateOver){\r\n                this.playAudio(this.clickAudio);\r\n                this.rotateButton.children[0].opacity = 120;\r\n                var self = this;\r\n                //旋转中心\r\n                var x0 = this.nodeArr[1].x;\r\n                var y0 = this.nodeArr[1].y;\r\n                var x0Row = this.getRow(this.nodeArr[1]);\r\n                var x0Col = this.getColumn(this.nodeArr[1]);\r\n        \r\n                // var rotateArr = [[x0Row-1,x0Col],[x0Row,x0Col+1],[x0Row+1,x0Col],[x0Row,x0Col-1 ]];\r\n                //旋转0度对应的坐标\r\n                var x = this.nodeArr[0].x;\r\n                var y = this.nodeArr[0].y;\r\n                \r\n                //旋转45度对应的坐标\r\n                var rotate45X = (x-x0)*Math.cos(-Math.PI/4)-(y-y0)*Math.sin(-Math.PI/4) + x0;\r\n                var rotate45Y = (x-x0)*Math.sin(-Math.PI/4)+(y-y0)*Math.cos(-Math.PI/4) + y0;\r\n                //节点的旋转状态\r\n                var nodeAngle = this.nodeArr[0].getComponent(\"Figure\").angle;\r\n                var canAction = false;\r\n                if(nodeAngle === 0){\r\n                    //边界旋转\r\n                    if(x0Col === 5){\r\n                        //改变旋转中心进行旋转内部进行判断是否可以旋转\r\n                        this.changeRotateCenter(nodeAngle,x0Col);\r\n                    }else{\r\n                        if(this.checkIsRotate(x0Row,x0Col,nodeAngle)){\r\n                            //旋转90度对应的坐标位置\r\n                            var bezier = this.dealRotate(nodeAngle,x0Row,x0Col,rotate45X,rotate45Y,x,y,1);\r\n                            //能够旋转\r\n                            canAction = true;\r\n                        }\r\n                    }\r\n                    \r\n                }else if(nodeAngle === 1){\r\n                    if(this.checkIsRotate(x0Row,x0Col,nodeAngle)){\r\n                        var bezier = this.dealRotate(nodeAngle,x0Row,x0Col,rotate45X,rotate45Y,x,y,2);\r\n                        canAction = true;\r\n                    }\r\n                }else if(nodeAngle === 2){\r\n                    //边界旋转判断改为顺时针旋转（以#0块为旋转中心）\r\n                    if(x0Col === 0){\r\n                    this.changeRotateCenter(nodeAngle,x0Col);\r\n                    }else{\r\n                        if(this.checkIsRotate(x0Row,x0Col,nodeAngle)){\r\n                            var bezier = this.dealRotate(nodeAngle,x0Row,x0Col,rotate45X,rotate45Y,x,y,3);\r\n                            canAction = true;\r\n                        }\r\n                    }\r\n                }else if(nodeAngle === 3){\r\n                    if(this.checkIsRotate(x0Row,x0Col,nodeAngle)){\r\n                        //创建贝塞尔曲线所对应的最少坐标\r\n                        var bezier = this.dealRotate(nodeAngle,x0Row,x0Col,rotate45X,rotate45Y,x,y,0);\r\n                        canAction = true;\r\n                    }\r\n                }\r\n                if(canAction){\r\n                    (function test(cb){\r\n                        var bezierAction = cc.bezierTo(0.008,bezier);\r\n                        self.nodeArr[0].runAction(bezierAction);\r\n                        cb()\r\n                    })(pro);\r\n                    function pro() {\r\n                        cc.log(\"承诺正常执行########\");\r\n                        cc.log(\"@@@@@@@@@@\" + self.nodeArr[0].x);\r\n                        cc.log(\"@@@@@@@@@@\" + self.nodeArr[0].y);\r\n                    }\r\n                    cc.log(\"结束旋转动作!!!!!\");\r\n                }\r\n            }\r\n            this.scheduleOnce(function(){\r\n                this.rotateButton.children[0].opacity = 0;\r\n            },0.5);\r\n        }\r\n    },\r\n    //处理旋转\r\n    /**\r\n     * @param  {当前需要旋转的节点的角度代码属性} angle\r\n     * @param  {旋转中心所在的行} row\r\n     * @param  {选装中心所在的列} col\r\n     * @param  {旋转45度对应的x坐标} rotate45X\r\n     * @param  {旋转45度对应的y坐标} rotate45Y\r\n     * @param  {旋转之前的x坐标} x\r\n     * @param  {旋转之前对应的y坐标} y\r\n     * @param  {旋转之后该节点对应的角度属性代号} angleCode\r\n     */\r\n    dealRotate : function(angle,row,col,rotate45X,rotate45Y,x,y,angleCode){\r\n        var nodeZeroType = this.nodeArr[0].getComponent(\"Figure\").type.toString();\r\n        var nodeOneType = this.nodeArr[1].getComponent(\"Figure\").type.toString();\r\n        var json1,json2,json3;\r\n        if(angle === 0){\r\n            var rotate90X = this.backGroundArr[row][col+1].x;\r\n            var rotate90Y = this.backGroundArr[row][col+1].y;\r\n            this.nodeArr[0].getComponent(\"Figure\").row = row;\r\n            this.nodeArr[0].getComponent(\"Figure\").col = col+1;\r\n            console.log(\"$$$$$$$$$$$$$$$$$$$$$\");\r\n            //发送json对象到服务器\r\n            json1 = this.createJsonDateForServer(row-1,col,\"-1\");\r\n            json2 = this.createJsonDateForServer(row,col,nodeOneType);\r\n            json3 = this.createJsonDateForServer(row,col+1,nodeZeroType);\r\n            \r\n        }else if(angle === 1){\r\n            var rotate90X = this.backGroundArr[row+1][col].x;\r\n            var rotate90Y = this.backGroundArr[row+1][col].y;  \r\n            this.nodeArr[0].getComponent(\"Figure\").row = row+1;\r\n            this.nodeArr[0].getComponent(\"Figure\").col = col;  \r\n            console.log(\"$$$$$$$$$$$$$$$$$$$$\");\r\n            json1 = this.createJsonDateForServer(row,col+1,\"-1\");\r\n            json2 = this.createJsonDateForServer(row,col,nodeOneType);\r\n            json3 = this.createJsonDateForServer(row+1,col,nodeZeroType);\r\n        }else if(angle === 2){\r\n            var rotate90X = this.backGroundArr[row][col-1].x;\r\n            var rotate90Y = this.backGroundArr[row][col-1].y;\r\n            this.nodeArr[0].getComponent(\"Figure\").row = row;\r\n            this.nodeArr[0].getComponent(\"Figure\").col = col-1;\r\n            json1 = this.createJsonDateForServer(row+1,col,\"-1\");\r\n            json2 = this.createJsonDateForServer(row,col,nodeOneType);\r\n            json3 = this.createJsonDateForServer(row,col-1,nodeZeroType);    \r\n        }else if(angle === 3){\r\n            var rotate90X = this.backGroundArr[row-1][col].x;\r\n            var rotate90Y = this.backGroundArr[row-1][col].y;\r\n            this.nodeArr[0].getComponent(\"Figure\").row = row-1;\r\n            this.nodeArr[0].getComponent(\"Figure\").col = col;\r\n            json1 = this.createJsonDateForServer(row,col-1,\"-1\");\r\n            json2 = this.createJsonDateForServer(row,col,nodeOneType);\r\n            json3 = this.createJsonDateForServer(row-1,col,nodeZeroType);    \r\n        }\r\n        try{\r\n            this.sendRotate = true;\r\n            console.log(\"*************进入try语句块****************\");\r\n            let jsonArr = Array.of(json1,json2,json3);\r\n            this.pushChangeMapList(jsonArr);\r\n        }catch(e){\r\n            console.log(e);\r\n        }\r\n        \r\n        //创建贝塞尔曲线所对应的最少坐标\r\n        var bezier = [cc.p(x,y),cc.p(rotate45X,rotate45Y),cc.p(rotate90X,rotate90Y)];\r\n        // //初始向量\r\n        // var startV = cc.v2(x,y).sub(cc.v2(x0,y0));\r\n        // var result = startV.rotate(Math.PI/2);\r\n        this.nodeArr[0].x = rotate90X;\r\n        this.nodeArr[0].y = rotate90Y;\r\n        //旋转之后变成相应的角度\r\n        this.nodeArr[0].getComponent(\"Figure\").angle = angleCode;\r\n        return bezier;\r\n    },\r\n    //创建一个json数组\r\n    pushChangeMapList : function(jsonArr){\r\n        for(let i = 0;i < jsonArr.length;i++){\r\n            this.jsonMsgToServer.changeMapList1.push(jsonArr[i]);\r\n        }\r\n    },\r\n    //创建发送给服务器的json数据\r\n    /**\r\n     * @param  {发送给服务器的行} row\r\n     * @param  {发送给服务器的列} col\r\n     * @param  {发送给服务器的类型} color\r\n     */\r\n    createJsonDateForServer : function(row,col,color){\r\n        let jsonData = {\r\n            row : row,\r\n            col : col,\r\n            color : color,\r\n        }\r\n        return jsonData;\r\n    },\r\n    //发送数据到服务器\r\n    sendDataToServer : function(jsonMsg){\r\n        //发送json数据到服务器\r\n        cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(jsonMsg);\r\n    },\r\n    //变换旋转中心\r\n    changeRotateCenter : function(nodeAngle,col){\r\n        var canRotate = false;\r\n        var self = this;\r\n        var x00 = this.nodeArr[0].x;\r\n        var y00 = this.nodeArr[0].y;\r\n        var x00Row = this.getRow(this.nodeArr[0]);\r\n        var x00Col = this.getColumn(this.nodeArr[0]);\r\n\r\n        var xx = this.nodeArr[1].x;\r\n        var yy = this.nodeArr[1].y;\r\n\r\n        //旋转45度方向\r\n        var rotate45Xc = (xx-x00)*Math.cos(-Math.PI/4)-(yy-y00)*Math.sin(-Math.PI/4) + x00;\r\n        var rotate45Yc = (xx-x00)*Math.sin(-Math.PI/4)+(yy-y00)*Math.cos(-Math.PI/4) + y00;\r\n        if(nodeAngle === 0 && col === 5){\r\n            //检查是否可以旋转\r\n            var json1,json2,json3;\r\n            var nodeZeroType = this.nodeArr[0].getComponent(\"Figure\").type;\r\n            var nodeOneType = this.nodeArr[1].getComponent(\"Figure\").type;\r\n            if(this.checkIsRotateByRotateCenter(x00Row,x00Col,nodeAngle)){\r\n                var rotate90X = this.backGroundArr[x00Row][x00Col-1].x;\r\n                var rotate90Y = this.backGroundArr[x00Row][x00Col-1].y;\r\n                this.nodeArr[1].getComponent(\"Figure\").row = x00Row;\r\n                this.nodeArr[1].getComponent(\"Figure\").col = x00Col-1;   \r\n\r\n                //发送数据到服务器\r\n                json1 = this.createJsonDateForServer(x00Row + 1,x00Col,\"-1\");\r\n                json2 = this.createJsonDateForServer(x00Row,x00Col,nodeZeroType);\r\n                json3 = this.createJsonDateForServer(x00Row,x00Col-1,nodeOneType);\r\n                \r\n                canRotate = true;\r\n            }\r\n           \r\n        }else if(nodeAngle === 2 && col === 0){\r\n            if(this.checkIsRotateByRotateCenter(x00Row,x00Col,nodeAngle)){\r\n                var rotate90X = this.backGroundArr[x00Row][x00Col+1].x;\r\n                var rotate90Y = this.backGroundArr[x00Row][x00Col+1].y;   \r\n                this.nodeArr[1].getComponent(\"Figure\").row = x00Row;\r\n                this.nodeArr[1].getComponent(\"Figure\").col = x00Col+1;   \r\n                //发送数据到服务器\r\n                json1 = this.createJsonDateForServer(x00Row - 1,x00Col,\"-1\");\r\n                json2 = this.createJsonDateForServer(x00Row,x00Col,nodeZeroType);\r\n                json3 = this.createJsonDateForServer(x00Row,x00Col+1,nodeOneType);\r\n                canRotate = true;\r\n            }\r\n            \r\n        }\r\n        //如果能旋转的话就进行执行贝塞尔曲线\r\n        if(canRotate){\r\n            try{\r\n                this.sendRotate = true;\r\n                let jsonArr = Array.of(json1,json2,json3);\r\n                this.pushChangeMapList(jsonArr);\r\n            }catch(e){\r\n                console.log(e);\r\n            }\r\n            //创建贝塞尔曲线所对应的最少坐标\r\n            var bezier = [cc.p(xx,yy),cc.p(rotate45Xc,rotate45Yc),cc.p(rotate90X,rotate90Y)];\r\n            // //初始向量\r\n            this.nodeArr[1].x = rotate90X;\r\n            this.nodeArr[1].y = rotate90Y;\r\n            //旋转之后变成270度\r\n            if(nodeAngle === 2 && col === 0){\r\n                this.nodeArr[0].getComponent(\"Figure\").angle = 3;\r\n            }else if(nodeAngle === 0 && col === 5){\r\n                this.nodeArr[0].getComponent(\"Figure\").angle = 1;\r\n            }\r\n            //执行贝塞尔曲线动作\r\n            (function test(cb){\r\n                \r\n                var bezierAction = cc.bezierTo(0.008,bezier);\r\n                self.nodeArr[1].runAction(bezierAction);\r\n                cb()\r\n            })(pro.bind(self));\r\n            function pro() {\r\n                cc.log(\"承诺正常执行########\");\r\n                cc.log(\"@@@@@@@@@@\" + self.nodeArr[0].x);\r\n                cc.log(\"@@@@@@@@@@\" + self.nodeArr[0].y);\r\n            }\r\n            \r\n        }\r\n    },\r\n    /**\r\n     * 检查以0号数组元素为旋转中心检查是否可以旋转\r\n     * @param  {以零号数组节点所在的行} centerRow\r\n     * @param  {以零号数组节点所在的列} centerCol\r\n     * @param  {以零号数组节点所在的角度} angle\r\n     */\r\n    checkIsRotateByRotateCenter : function(centerRow,centerCol,angle){\r\n        if(angle === 2 && centerCol === 0){\r\n            if(this.map[centerRow-1][centerCol+1] != 1 && this.map[centerRow][centerCol+1] != 1){\r\n                return true;\r\n            }else{\r\n                return false;\r\n            }\r\n        }else if(angle === 0 && centerCol === 5){\r\n            if(this.map[centerRow+1][centerCol-1] != 1 && this.map[centerRow][centerCol-1] != 1){\r\n                return true;\r\n            }else{\r\n                return false;\r\n            }\r\n        }\r\n    },\r\n    //检查是否可以旋转\r\n    /**\r\n     * @param  {旋转中心节点所在的行} centerRow\r\n     * @param  {旋转中心节点所在的列} centerCol\r\n     * @param  {待旋转节点的角度属性} angle\r\n     */\r\n    checkIsRotate : function(centerRow,centerCol,angle){\r\n            //四个方向\r\n            //如果当前方向是0的话就看看一方向对应的背景方格的状态是什么\r\n            if(angle === 0){\r\n                //检查旋转中心节点的右边背景方格的状态是否为1和检查#0块右边对应的背景方格是否为1\r\n                if(this.map[centerRow-1][centerCol+1] != 1 && this.map[centerRow][centerCol+1] != 1){\r\n                    return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n            }else if(angle === 1){\r\n                if(this.map[centerRow+1][centerCol+1] != 1 && this.map[centerRow+1][centerCol] != 1){\r\n                    return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n            }else if(angle === 2){\r\n                if(this.map[centerRow+1][centerCol-1] != 1 && this.map[centerRow][centerCol-1] != 1){\r\n                    return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n            }else if(angle === 3){\r\n                if(this.map[centerRow-1][centerCol-1] != 1 && this.map[centerRow-1][centerCol] != 1){\r\n                    return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n            }\r\n    },\r\n     //左移方法\r\n    moveLeft    : function(){\r\n        if(!this.gameOver){\r\n            this.remainTwoNumber(this.nodeArr);\r\n            if(this.CheckIsLeft()){\r\n                //打开发送向左移动的开关\r\n                this.sendLeft = true;\r\n                //获得最大列\r\n                var maxCol = Math.max.call(null,this.nodeArr[0].getComponent(\"Figure\").col,this.nodeArr[1].getComponent(\"Figure\").col);\r\n                var rowArr = [this.nodeArr[0].getComponent(\"Figure\").row,this.nodeArr[1].getComponent(\"Figure\").row];\r\n                \r\n                for(let i = 0;i < this.nodeArr.length;i++){\r\n                    this.leftMove(this.nodeArr[i]);\r\n                }\r\n                //如果生成方块的个数是一个的话加发送两个数据给服务器就行了\r\n                for(let j = 0;j < rowArr.length;j++){\r\n                    var jsonDataToServer = {\r\n                        row   : rowArr[j],\r\n                        col   : maxCol,\r\n                        color : \"-1\",\r\n                    }\r\n                    //将该信息添加到json对象中去发送到服务器并且进行去重\r\n                    console.log(\"是否包含该对象：\",this.jsonMsgToServer.changeMapList1.isContain(jsonDataToServer));\r\n                    if(!this.jsonMsgToServer.changeMapList1.isContain(jsonDataToServer)){\r\n                        this.jsonMsgToServer.changeMapList1.push(jsonDataToServer);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    leftMove : function(node){\r\n        var row = node.getComponent(\"Figure\").row;\r\n        var col = node.getComponent(\"Figure\").col;\r\n        //将当前背景节点的node改为null\r\n        // this.backGroundArr[row][col].node = null;\r\n        node.x = this.backGroundArr[row][col-1].x;\r\n        node.getComponent(\"Figure\").row = row;\r\n        node.getComponent(\"Figure\").col = col-1;\r\n        let afterLeftJson = {\r\n            row : row,\r\n            col : col - 1,\r\n            color : node.getComponent(\"Figure\").type.toString(),\r\n        }\r\n        if(!this.jsonMsgToServer.changeMapList1.isContain(afterLeftJson)){\r\n            this.jsonMsgToServer.changeMapList1.push(afterLeftJson);\r\n        }\r\n    },\r\n   //右移方法\r\n   moveRight   : function(){\r\n       if(!this.gameOver){\r\n           this.remainTwoNumber(this.nodeArr);\r\n           //获得最小列\r\n           var minCol = Math.min.call(null,this.nodeArr[0].getComponent(\"Figure\").col,this.nodeArr[1].getComponent(\"Figure\").col);\r\n           var rowArr = [this.nodeArr[0].getComponent(\"Figure\").row,this.nodeArr[1].getComponent(\"Figure\").row];\r\n           if(this.CheckIsRight()){\r\n               this.sendRight = true;\r\n               for(var i = 0;i < this.nodeArr.length;i++){\r\n                   this.rightMove(this.nodeArr[i]);\r\n                }\r\n            } \r\n            for(let i = 0;i < rowArr.length;i++){\r\n                var jsonDataToServer = {\r\n                    row   : rowArr[i],\r\n                    col   : minCol,\r\n                    color : \"-1\",\r\n                }\r\n                //将该信息添加到json对象中去发送到服务器\r\n                if(!this.jsonMsgToServer.changeMapList1.isContain(jsonDataToServer)){\r\n                    this.jsonMsgToServer.changeMapList1.push(jsonDataToServer);\r\n                }\r\n            }\r\n            console.log(\"================发送数据开始================\");\r\n            \r\n        }\r\n    },\r\n    rightMove : function(node){\r\n        var row = node.getComponent(\"Figure\").row;\r\n        var col = node.getComponent(\"Figure\").col;\r\n        //将当前背景节点的node改为null\r\n        node.x = this.backGroundArr[row][col+1].x;\r\n        node.getComponent(\"Figure\").row = row;\r\n        node.getComponent(\"Figure\").col = col+1;\r\n        let afterRightJson = {\r\n            row : row,\r\n            col : col + 1,\r\n            color : node.getComponent(\"Figure\").type.toString(),\r\n        }\r\n        if(!this.jsonMsgToServer.changeMapList1.isContain(afterRightJson)){\r\n            this.jsonMsgToServer.changeMapList1.push(afterRightJson);\r\n        }\r\n    },\r\n    /**\r\n        检测是否可以向下移动\r\n        返回true或者false\r\n        @return true  : 可以下落\r\n        @return false : 不可以下落\r\n    **/\r\n    /**\r\n     * @param  {待检测的节点数组} nodeArr\r\n     */\r\n    CheckIsDown : function(nodeArr){\r\n        if(nodeArr.length != 0){\r\n            //将坐标值转换为小数点两位小数\r\n            this.remainTwoNumber(nodeArr);\r\n            //如果#0块的属性angle为零的时候，只判断#1块下面是否为1，为1不下落，为地面不下落\r\n            if(nodeArr[0].getComponent(\"Figure\").angle === 0){\r\n                return this.checkIsBottom(nodeArr[1],0);\r\n            }else if(nodeArr[0].getComponent(\"Figure\").angle === 1 || nodeArr[0].getComponent(\"Figure\").angle === 3){\r\n                //横条的形状的时候会出现有一个下落的情况\r\n                if(this.checkDown(nodeArr) && !(this.checkDown(nodeArr) instanceof cc.Node)){\r\n                    return true;\r\n                }else if(!this.checkDown(nodeArr) && !(this.checkDown(nodeArr) instanceof cc.Node)){\r\n                    return false;\r\n                }else if(this.checkDown(nodeArr) instanceof cc.Node){\r\n                    var targetNode = this.checkDown(nodeArr);\r\n                    //找出这个下面背景方格状态为0的节点\r\n                    var targetRow = this.findTheNodeDown(targetNode);\r\n                    var col = this.getColumn(targetNode);\r\n                    //单独下落这个节点\r\n                    targetNode.getComponent(\"Figure\").quickDown(targetRow,col,this.backGroundArr,this.map,true);\r\n                    return false;\r\n                }\r\n            }else if(nodeArr[0].getComponent(\"Figure\").angle === 2){\r\n                return this.checkIsBottom(nodeArr[0],2);\r\n            }\r\n        }\r\n    },\r\n    \r\n    /**\r\n     * @param  {需要向下搜索背景方格的状态的初始节点} node\r\n     */\r\n    findTheNodeDown : function(node){\r\n         //获得当前节点的行和列\r\n         var row = this.getRow(node);\r\n         var col = this.getColumn(node);\r\n         //向下寻找\r\n         while(row < 11){\r\n            row++;\r\n            if(this.map[row][col] === 1){\r\n                break;\r\n            }\r\n            if(row === 11){\r\n                break;\r\n            }\r\n         }\r\n         //最底下的背景方格的状态不为1\r\n         if(row === 11 && this.map[row][col] != 1){\r\n             return 11;\r\n         }else{\r\n            return row-1;\r\n         }\r\n         \r\n    },\r\n    //判断横条的情况\r\n    checkDown : function(nodeArr){\r\n        this.remainTwoNumber(nodeArr);\r\n        var count1 = 0;\r\n        var count0 = 0;\r\n        var nodeDownIsZero = [];\r\n        //如果是第11行就放回false\r\n        if(this.getRow(nodeArr[0]) === 11){\r\n            return false;\r\n        }\r\n        for(let m = 0;m < nodeArr.length;m++){\r\n            var row = this.getRow(nodeArr[m]);\r\n            var col = this.getColumn(nodeArr[m]);\r\n            if(this.map[row+1][col] === 1){\r\n                count1++;\r\n            }else if(this.map[row+1][col] ===0){\r\n                count0++;\r\n                nodeDownIsZero.push(nodeArr[m]);\r\n            }\r\n        }\r\n        if(count1 === 2){\r\n            //如果两个块的下面都为1的话不可以下落\r\n            return false;\r\n        }else if(count0 === 2){\r\n            //如果两个块的下面都为0的话是可以下落的\r\n            return true;\r\n        }else{\r\n            if(nodeDownIsZero.length > 0 && nodeDownIsZero.length === 1){\r\n                return nodeDownIsZero[0];\r\n            }\r\n        }\r\n        \r\n\r\n    },\r\n    // },\r\n    //判断是否触底或者是下面还有方块\r\n    /**\r\n     * @param  {待检测的节点} node\r\n     */\r\n    checkIsBottom : function(node,angle){\r\n        // if(angle === 0 || angle === 2){\r\n            var row = this.getRow(node);\r\n            var col = this.getColumn(node);\r\n            if(row != 11){\r\n                //下一行背景方格的状态是否为1\r\n                if(this.map[row + 1][col] === 1){\r\n                    //将对应的背景方格的状态改为1\r\n                    return false;\r\n                }else{\r\n                    return true;\r\n                }\r\n            }else{\r\n                return false;\r\n            }\r\n    },\r\n    /**\r\n       检测是否可以向左移动\r\n    **/\r\n   CheckIsLeft : function(){\r\n        //如果两个形状还没有完全落下来不能左移右移\r\n        if(this.nodeArr[0].y > this.nodeHeight/2){\r\n                return false;\r\n        }\r\n        this.remainTwoNumber(this.nodeArr);\r\n        var colArr = [this.nodeArr[0].getComponent(\"Figure\").col,this.nodeArr[1].getComponent(\"Figure\").col];\r\n        var rowArr = [];\r\n        for(let i = 0;i< this.nodeArr.length;i++){\r\n            rowArr.push(this.getRow(this.nodeArr[i]));\r\n        }\r\n        //找到最小列\r\n        var col = Math.min.apply(null,colArr);\r\n        if(colArr.length > 0){\r\n            //同一列\r\n            if(colArr[0] === colArr[colArr.length-1]){\r\n                if(col === 0){\r\n                    return false;\r\n                }\r\n                //说明是同一列\r\n                //找出x坐标最小的左边看看它的坐标地图状态值是多少\r\n                if(this.map[rowArr[0]][col-1] === 0 && this.map[rowArr[1]][col-1] === 0){\r\n                    return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n            }else{\r\n                //同一行\r\n                if(this.map[rowArr[0]][col-1] === 0){\r\n                    return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    },\r\n    //检测是否可以向右移动\r\n    CheckIsRight : function(){\r\n          //如果两个形状还没有完全落下来不能左移右移\r\n        if(this.nodeArr[0].y > this.nodeHeight/2){\r\n            return false;\r\n        }\r\n        var rowArr = [];\r\n        var colArr = [this.nodeArr[0].getComponent(\"Figure\").col,this.nodeArr[1].getComponent(\"Figure\").col];\r\n        this.remainTwoNumber(this.nodeArr);\r\n        for(let i = 0;i< this.nodeArr.length;i++){\r\n            rowArr.push(this.getRow(this.nodeArr[i]));\r\n        }\r\n        //找到最大列\r\n        var col = Math.max.apply(null,colArr);\r\n        if(colArr.length > 0){\r\n            //同一列\r\n            if(colArr[0] === colArr[colArr.length-1]){\r\n                if(col === 5){\r\n                    return false;\r\n                }\r\n                //说明是同一列\r\n                //找出x坐标最小的左边看看它的坐标地图状态值是多少\r\n                if(this.map[rowArr[0]][col+1] === 0 && this.map[rowArr[1]][col+1] === 0){\r\n                    return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n            }else{\r\n            //同一行\r\n            if(this.map[rowArr[0]][col+1] === 0){\r\n                //如果最大行右边的背景方格的状态是0的话就可以移动\r\n                return true;\r\n            }else{\r\n                return false;\r\n            }\r\n\r\n            }\r\n        }\r\n    },\r\n    //暂停游戏\r\n    // pause : function(){\r\n    //     console.log(\"游戏结束了吗草\",this.gameOver);\r\n    //     if(!this.gameOver){\r\n    //         //暂停游戏\r\n    //         console.log(\"点击了网络版的暂停\");\r\n    //         this.mask.active = true;\r\n    //         this.pauseMenu.active = true;\r\n    //     }\r\n    // },\r\n    //网络版游戏的惩罚机制\r\n    /**\r\n     * @param  {Array | 惩罚地图二维数组} punishArr\r\n     */\r\n    wasPunishedByRival : function(punishArr){\r\n        this.isPunish = true;\r\n        console.log(\"punishArr is \" + punishArr.toString());\r\n        if(punishArr instanceof Array){\r\n            console.log(\"punishArr's length is\" + punishArr.length);\r\n            //分别对需要涨的数据进行处理\r\n            for(let i = 0;i < punishArr.length;i++){\r\n                  //该数组中的json数据长度\r\n                  var jsonNumber = punishArr[i].length;\r\n                  if(punishArr[i][0] instanceof Object){\r\n                        //确定哪一列需要涨\r\n                        var punishCol = punishArr[i][0].col;\r\n                        //确定需要涨的类型\r\n                        var punishType = punishArr[i][0].color;\r\n                        //生成惩罚块并将惩罚块下落状态修改并发送到服务器\r\n                        this.generatePunishBlock(punishCol,Number(punishType),jsonNumber);\r\n                  }else{\r\n                      console.log(\"punishArr is not an Object of js \");\r\n                  }\r\n            }\r\n        }\r\n    },\r\n    //生成惩罚小方块\r\n    /**\r\n     * @param  {生成惩罚所在的列} col\r\n     * @param  {生成惩罚那些块的类型} type\r\n     * @param  {生成惩罚的个数} count\r\n     */\r\n    generatePunishBlock : function(col,type,count){\r\n        var generatePunishJson = {\r\n            col           : col,\r\n            generateCount : count,\r\n            punishType    : type,\r\n        }\r\n        //生成惩罚方块\r\n        var punishBlockArr = this.initImage(this.node,generatePunishJson);\r\n        //遍历惩罚方块数组分别下落惩罚方块\r\n        for(let i = 0;i < punishBlockArr.length;i++){\r\n            //让生成的方块显示\r\n            punishBlockArr[i].active = true;\r\n            //下落惩罚方块是网络版的状况它会自己发送数据到服务器\r\n            punishBlockArr[i].getComponent(\"Figure\").afterRemoveDown(this.map,this.backGroundArr,true);\r\n        }\r\n        \r\n    },\r\n    //为俄罗斯方块或者噗哟噗哟计算分数\r\n    /**\r\n     * @param  {消行数} removeRows\r\n     * @param  {显示分数的节点} node\r\n     */\r\n    showScoreForGame1 : function(removeRows,node){\r\n        switch (removeRows) {\r\n            case 1:\r\n                node.getComponent(cc.Label).string = (parseInt(node.getComponent(cc.Label).string) + 40).toString();\r\n                break;\r\n            case 2:\r\n                node.getComponent(cc.Label).string = (parseInt(node.getComponent(cc.Label).string) + 90).toString();\r\n                break;\r\n            case 3:\r\n                node.getComponent(cc.Label).string = (parseInt(node.getComponent(cc.Label).string) + 150).toString();\r\n                break;\r\n            case 4:\r\n                node.getComponent(cc.Label).string = (parseInt(node.getComponent(cc.Label).string) + 220).toString();\r\n                break;\r\n        }\r\n    },\r\n    //游戏结束在来一局\r\n    overAgain : function(){\r\n        if(cc.sys.isNative){\r\n            cc.director.resume();\r\n        }\r\n        console.log(\"游戏结束点击了再来一局\");\r\n        this.mask.active = false;\r\n        // this.pauseMenu.active = false;\r\n        cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg({\"tag1\":1,\"type\":\"4\",\"score\":\"\",\"nMapRow\":\"\",\"nMapCol\":\"\"});\r\n        //匹配用户界面\r\n        console.log(\"游戏进入匹配界面\");\r\n        //场景切换的时候资源释放了会将vs界面给回收那么\r\n        // var runScene = cc.director.getScene();\r\n        // var uid = runScene.uuid;\r\n        // var assetsArr = cc.loader.getDependsRecursively(uid);\r\n        // console.log(\"资源数组是：\",assetsArr);\r\n        // //释放资源数组\r\n        // cc.loader.release(assetsArr);\r\n        cc.director.loadScene(\"MatchUser\");\r\n        // cc.director.pause();\r\n    },\r\n    //游戏结束暂时退出\r\n    overQuit : function(){\r\n        if(cc.sys.isNative){\r\n            cc.director.resume();\r\n        }\r\n        console.log(\"暂时退出尼玛就那么难擦\");\r\n        //加载多人选择模式\r\n        cc.director.loadScene(\"PersonsChoose\");\r\n        //资源释放了的话vs多人选择界面有可能会被回收那么加载vs图片的时候就会报GL错误\r\n        // cc.director.pause();\r\n    },\r\n    //游戏结束分享功能\r\n    overShare : function(){\r\n        if(CC_WECHATGAME){\r\n            console.log(\"首页share\");\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").shareFriends();\r\n        }else if(cc.sys.isNative){\r\n            cc.director.resume();\r\n            //原生平台分享\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nativeShare();\r\n        }\r\n    },\r\n    //播放音乐方法\r\n    playAudio : function(audioUrl){\r\n        cc.audioEngine.play(audioUrl,false,1);\r\n    },\r\n});\r\n","// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n        //胜利音效\r\n        winAudio : {\r\n            url      : cc.AudioClip,\r\n            default  : null, \r\n        }\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        \r\n        // //初始化token计时器\r\n        // this.fTokenTime +=dt\r\n        this.willDisappearRow = 0;\r\n    },\r\n    /**\r\n     * @param  {} jsonMsg\r\n     * jsonMsg.tag1 : Number\r\n     * jsonMsg.nDisappear1 : String\r\n     * \r\n     */\r\n    //通过长链接 给服务器发消息\r\n    SendLongMsg:function(jsonMsg){\r\n         this.userMsg={\"tag\":jsonMsg.tag1,\"token\":cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").tokenMsg,\"name\":cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser,\"integral\":jsonMsg.score,\"type\":jsonMsg.type,\"url\":cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").pictureUser,\"map\":{},\"loadingState\":0,\"changeMapList\":[],\"removeMapList\":[],\"state\":0,\"nDisappear\":0};\r\n         console.log(\"tag is \" + jsonMsg.tag1);\r\n         //加分数据发送到服务器\r\n         if(('nDisappear1' in jsonMsg) && jsonMsg.hasOwnProperty('nDisappear1')){\r\n            //将该属性添加到json对象中去\r\n            this.userMsg.nDisappear=jsonMsg.nDisappear1;\r\n         }\r\n         //惩罚相关数据发送服务器\r\n         if(('removeRow' in jsonMsg) && jsonMsg.hasOwnProperty('removeRow')){\r\n            this.userMsg.removeRow = jsonMsg.removeRow;\r\n         }\r\n         //游戏结束通知对手自己胜利了需要的参数\r\n         if(('result' in jsonMsg) && jsonMsg.hasOwnProperty('result')){\r\n            this.userMsg.result = jsonMsg.result;\r\n         }\r\n         console.log(this.userMsg+\"this.userMsg555555555555555\");\r\n         this.userMsg.state=jsonMsg.state1;\r\n         this.userMsg.changeMapList=jsonMsg.changeMapList1;\r\n         this.userMsg.removeMapList=jsonMsg.removeMapList1;\r\n         this.userMsg.map.row=jsonMsg.nMapRow;\r\n         this.userMsg.map.col=jsonMsg.nMapCol;\r\n         this.userMsg.loadingState=jsonMsg.loading1;\r\n         //游戏结束所需要添加的字段\r\n         if(('result_score' in jsonMsg) && jsonMsg.hasOwnProperty('result_score')){\r\n                //将该属性添加到json对象中去\r\n                this.userMsg.result_score = jsonMsg.result_score;\r\n         }\r\n         var b=JSON.stringify(this.userMsg);\r\n         console.log(\"---->>>>b is \" + b);\r\n         console.log(\"@@@@@@@@@@@@@@@websocket is \" + this.websocket);\r\n         if(this.websocket != undefined){\r\n            this.websocket.send(b);\r\n            console.log(this.userMsg+\"this.userMsg666666666666666666666666\");\r\n         }\r\n         \r\n         \r\n    },\r\n    //长链接\r\n    /**\r\n     * @param  {长连接的类型} type\r\n     */\r\n    connectLongSerive:function(type){\r\n        var self=this;\r\n        cc.log(\"333333333333333333333333333333333333333\");\r\n        this.websocket.onopen = function (event) {\r\n            cc.log(\"88888888888888888888888888888888888888888888888\");\r\n            self.SendLongMsg({\"tag1\":2,\"type\":\"1\",\"score\":cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nUserScore,\"nMapRow\":\"\",\"nMapCol\":\"\"});\r\n            // 2,\"1\",cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nUserScore\r\n        };\r\n        this.websocket.onmessage = function (event) {\r\n                var msg1=JSON.parse(event.data);\r\n                console.log(\"msg1 is \" + msg1);\r\n                cc.log(event.data+\"9999999999999999999999999999999999999999999999999999999999999\");\r\n                console.log(\"event data is \" + event.data);\r\n                self.GetServerMsg(msg1);\r\n        };\r\n        this.websocket.onerror = function (event) {\r\n            console.log(\"Send Text fired an error\");\r\n            console.log(\"error event \",event);\r\n        };\r\n        this.websocket.onclose = function (event) {\r\n            //重新连接\r\n            console.log(\"WebSocket instance closed.\");\r\n            console.log(\"重新连接了\");\r\n            cc.find(\"PebmanentNode\").getChildByName(\"loseLink\").active = true;\r\n            console.log(\"close event \",event);\r\n            console.log(\"code \",event.code);\r\n            console.log(\"reason \",event.reason);\r\n        };         \r\n    },\r\n   //根据服务器返回的信息进行操作\r\n   GetServerMsg:function(msg1){\r\n    console.log(\"118\",msg1)\r\n    console.log(\"msg1.msg's out is  \",msg1.msg);  \r\n    var userInfoScript = cc.find(\"PebmanentNode\").getComponent(\"UserInfo\");\r\n    if(msg1.result==\"ok\")\r\n    {\r\n        console.log(\"msg1.msg is \",msg1.msg);\r\n        switch(msg1.msg)\r\n        {\r\n            case \"getUser\":\r\n                        cc.find(\"Canvas\").getComponent(\"WechatLogin\").GetUserMsg();\r\n                        break;\r\n            //app版的接收用户信息            \r\n            case \"userMsg\": \r\n                         var score=JSON.parse(msg1.data);\r\n                         userInfoScript.tokenMsg=msg1.token;\r\n                         userInfoScript.nUserScore=score.integral;\r\n                         this.websocket= new WebSocket(\"ws://m5ws.ykplay.com\");\r\n                         console.log(\"websocket is \",this.websocket);\r\n                         this.connectLongSerive();\r\n                        break;\r\n            //微信小游戏接收用户信息 \r\n            case \"userMsg_1\":\r\n                console.log(\"微信小程序服务器发送的数据来了\");\r\n                var score=JSON.parse(msg1.data);\r\n                userInfoScript.tokenMsg=msg1.token;\r\n                userInfoScript.nUserScore=score.integral;\r\n                console.log(\"msg1.data is \",msg1.data);\r\n                userInfoScript.openid = score.openid;\r\n                console.log(\"openid is \",userInfoScript.openid);\r\n                var self = this;\r\n                this.websocket= new WebSocket(\"wss://m5ws.ykplay.com\");\r\n                this.connectLongSerive();\r\n                break;\r\n            case \"linkSuccess\":\r\n                           cc.log(JSON.stringify(msg1)+\"///////////////////////////////////////////////////\");\r\n                           cc.director.loadScene(\"Main\",function(){\r\n                               //隐藏加载中\r\n                               if(CC_WECHATGAME){\r\n                                   wx.hideLoading();\r\n                               }\r\n                           });\r\n                           break;\r\n            case \"addMatching\":\r\n                          console.log(\"add Matching state\");\r\n                          userInfoScript.matchState=\"addMatching\";\r\n                        //   cc.director.loadScene(\"MatchUser\");\r\n                        //   if( userInfoScript.isLoad)\r\n                        //   {\r\n                        //     userInfoScript.LoadTwoUser(userInfoScript.pictureUser,userInfoScript.pictureUser,cc.find(\"UserName\"),userInfoScript.nameUser,cc.find(\"UserPicture1\"),cc.find(\"UserPicture\"));\r\n                        //   }\r\n                           break;   \r\n            case \"broadcast\":                    \r\n                           /**\r\n                            * \r\n                            * 进入匹配界面\r\n                            * \r\n                            * */    \r\n                           //设置用户的匹配状态为true \r\n                           cc.find(\"Canvas\").getComponent(\"MatchState\").matchSuccess = true;\r\n                           var msg2=msg1.data;\r\n                           console.log(\"--------------------------------------------------------\");\r\n                           console.log(userInfoScript.matchState+\"555555555555555????????????????????????????????????????\");\r\n                           for(let i = 0;i<msg2.playerList.length;i++){\r\n                               console.log(\"name is \",msg2.playerList[i].name);\r\n                               console.log(\"url is \",msg2.playerList[i].url);\r\n                               if(msg2.playerList[i].name != userInfoScript.nameUser){\r\n                                   //保存对手的信息\r\n                                   userInfoScript.pictureEnemy = msg2.playerList[i].url;\r\n                                   userInfoScript.rivalName = msg2.playerList[i].name;\r\n                                   console.log(\"对手的图片信息是：\",userInfoScript.pictureEnemy);\r\n                               }\r\n                           }\r\n                           console.log(\"广播消息是\",\"ddddddddddddddddd\",cc.find(\"Canvas\").getComponent(\"MatchState\").matchSuccess);\r\n                           //证明两个人都进入游戏界面加载对手的头像\r\n                           if(cc.sys.isNative){\r\n                               userInfoScript.LoadUserPicture(userInfoScript.pictureEnemy,cc.find(\"EnemyPicture\"));\r\n                           }\r\n                           if(CC_WECHATGAME){\r\n                               console.log(\"对手的图片是:\",userInfoScript.pictureEnemy);\r\n                               console.log(\"-------------------------->>>>>>>>>>>>>>\");\r\n                               //加载对手的图片\r\n                               userInfoScript.LoadRivalPicture(userInfoScript.pictureEnemy,cc.find(\"EnemyPicture\"));\r\n                           }\r\n                          break; \r\n            case \"loadOk\":\r\n                        var rowColArr = [];\r\n                        if(userInfoScript.nGameType === \"4\" ||\r\n                            userInfoScript.nGameType === \"3\" ||\r\n                            userInfoScript.nGameType === \"2\"){\r\n                            rowColArr.push(12);\r\n                            rowColArr.push(6);\r\n                        }else{\r\n                            rowColArr.push(20);\r\n                            rowColArr.push(10);\r\n                        }\r\n                        console.log(\"loadOk@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\");\r\n                        cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg({\"tag1\":8,\"type\":userInfoScript.nGameType,\"score\":userInfoScript.nUserScore,\"nMapRow\":rowColArr[0].toString(),\"nMapCol\":rowColArr[1].toString()});\r\n                        break;              \r\n             case \"initMap\":\r\n                            // cc.log(\"ssssssssssssssssssssssssssss\");\r\n                            //初始化敌人的游戏类型\r\n                            console.log(\"222222222222222222222222222222\");\r\n                            var nEnemyGame=\"\";\r\n                            //初始化敌人的名字\r\n                            var nameEnemy=\"\";\r\n                            //初始化敌人的游戏类型\r\n                            nEnemyGame=msg1.beginMap.nodeArray[0].type;\r\n                            //初始化敌人的游戏类型数据\r\n                            userInfoScript.rivalGameType = nEnemyGame;\r\n                            console.log();\r\n                            console.log(typeof msg1.data+\"ssssssssssssssssssssssssssss\");\r\n                            if(msg1.data.playerList[0].name==userInfoScript.nameUser)\r\n                            {\r\n                                nameEnemy=msg1.data.playerList[1].name;\r\n                            }\r\n                            else\r\n                            {\r\n                                nameEnemy=msg1.data.playerList[0].name;\r\n\r\n                            }\r\n                            console.log(nameEnemy+\"33333333333333333333333333333333333333333333333\");\r\n                            switch(nEnemyGame)\r\n                            {\r\n                                //敌人为俄罗斯方块游戏\r\n                                case \"1\":\r\n                                     console.log(\"敌人的游戏类型为俄罗斯方块\");\r\n                                     if(userInfoScript.nGameType === \"2\" || userInfoScript.nGameType === \"4\"){\r\n                                        console.log(\"自己的游戏类型为画像方块和宝石方块\");\r\n                                        if(nameEnemy.lenght > 5){\r\n                                            nameEnemy = nameEnemy.substring(0,5) + '...';\r\n                                        }\r\n                                        cc.find(\"Canvas/rivalInfo/rivalName\").getComponent(cc.Label).string = nameEnemy;\r\n                                        //当前的游戏类型为1初始化地图\r\n                                        cc.find(\"Canvas/rivalGame\").getComponent(\"RivalGame\").initMap(20,10,\"1\");\r\n                                        var rivalIconNode = cc.find(\"Canvas/rivalInfo/rivalIcon\");\r\n                                        //原生环境显示用户头像\r\n                                        if(cc.sys.isNative){\r\n                                            userInfoScript.LoadUserPicture(userInfoScript.pictureEnemy,rivalIconNode);\r\n                                        }\r\n                                        //微信小游戏显示头像\r\n                                        if(CC_WECHATGAME){\r\n                                            userInfoScript.LoadRivalPicture(userInfoScript.pictureEnemy,rivalIconNode);\r\n                                        }\r\n                                        //加载用户头像\r\n                                        var userIconNode = cc.find(\"Canvas/userIcon\");\r\n                                        userInfoScript.LoadUserPicture(userInfoScript.pictureUser,userIconNode);\r\n                                     }else{\r\n                                        console.log(\"自己的游戏类型为俄罗斯方块\");\r\n                                        if(nameEnemy.lenght > 5){\r\n                                            nameEnemy = nameEnemy.substring(0,5) + '...';\r\n                                        }\r\n                                        cc.find(\"Canvas/EnemyName\").getComponent(cc.Label).string += nameEnemy;\r\n                                         //初始化自己和敌人状态\r\n                                        userInfoScript.LoadUserPicture(userInfoScript.pictureUser,cc.find(\"Canvas/UserPicture\"));\r\n                                        var rivalIconNode = cc.find(\"Canvas/EnemyPicture\");\r\n                                        if(CC_WECHATGAME){\r\n                                            userInfoScript.LoadRivalPicture(userInfoScript.pictureEnemy,rivalIconNode);\r\n                                        }else if(cc.sys.isNative){\r\n                                            userInfoScript.LoadUserPicture(userInfoScript.pictureEnemy,rivalIconNode);\r\n                                        }\r\n                                        console.log(\"initMap1111111111111111111111111111\"+cc.find(\"Canvas\")\r\n                                        .getComponent(\"PersonsGame1Main\").enemyGroundChild);\r\n                                       //显示敌人的游戏地图\r\n                                       Global.CreatBackGround(cc.find(\"Canvas\")\r\n                                       .getComponent(\"PersonsGame1Main\")\r\n                                       .enemyGroundChild,20,10,cc.find(\"Canvas\").getComponent(\"PersonsGame1Main\").prefabEnemy,cc.find(\"Canvas\").getComponent(\"PersonsGame1Main\").nodeEnemyParent,Global.nServerWidth);\r\n                                       //生成方块\r\n                                       cc.find(\"Canvas\")\r\n                                        .getComponent(\"PersonsGame1Main\").GetBlock();\r\n                                        \r\n                                     }\r\n                                    //   Global.CreatBackGround(this.userGroundChild,20,10,this.prefabUser,this.nodeUserParent,Global.nWidth);\r\n                                    break;\r\n                                //敌人为宝石方块游戏类型\r\n                                case \"2\":       \r\n                                    if(userInfoScript.nGameType === \"2\" || userInfoScript.nGameType === \"4\"){\r\n                                        console.log(\"initMap\");\r\n                                        this.initMapForTwoAndFour(nameEnemy,userInfoScript,\"2\");\r\n                                    }else{\r\n                                        //自己的游戏类型为俄罗斯方块或者噗呦噗呦\r\n                                        cc.log(\"initMap\");\r\n                                        cc.find(\"Canvas/EnemyName\").getComponent(cc.Label).string += nameEnemy;\r\n                                        cc.log(\"initMap1111111111111111111111111111\"+cc.find(\"Canvas\")\r\n                                        .getComponent(\"PersonsGame1Main\").enemyGroundChild);\r\n                                         //初始化自己和敌人状态\r\n                                         userInfoScript.LoadUserPicture(userInfoScript.pictureUser,cc.find(\"Canvas/UserPicture\"));\r\n                                         var rivalIconNode = cc.find(\"Canvas/EnemyPicture\");\r\n                                         userInfoScript.LoadRivalPicture(userInfoScript.pictureEnemy,rivalIconNode);\r\n                                       //显示敌人的游戏地图\r\n                                        cc.find(\"Canvas\").getComponent(\"PersonsGame1Main\").initRivalMap(8,8,cc.find(\"Canvas\").getComponent(\"PersonsGame1Main\").prefabEnemy1[1],12,6);\r\n                                    //    Global.CreatBackGround(cc.find(\"Canvas\")\r\n                                    //    .getComponent(\"PersonsGame1Main\").initRivalMap();\r\n                                    //    Global.initMapForEnemy(8,8,cc.find(\"Canvas\").getComponent(\"PersonsGame1Main\").prefabEnemy1[2],12,6);\r\n                                       //生成方块\r\n                                       cc.find(\"Canvas\").getComponent(\"PersonsGame1Main\").GetBlock();\r\n                                    }  \r\n                                    break;\r\n                                case \"3\":\r\n                                      break;\r\n                                case \"4\":\r\n                                    if(userInfoScript.nGameType === \"2\" || userInfoScript.nGameType === \"4\"){\r\n                                        console.log(\"initMap\");\r\n                                        this.initMapForTwoAndFour(nameEnemy,userInfoScript,\"4\");\r\n                                    }else{\r\n                                        cc.log(\"initMap\");\r\n                                        cc.find(\"Canvas/EnemyName\").getComponent(cc.Label).string += nameEnemy;\r\n                                        cc.log(\"initMap1111111111111111111111111111\"+cc.find(\"Canvas\")\r\n                                        .getComponent(\"PersonsGame1Main\").enemyGroundChild);\r\n                                         //初始化自己和敌人状态\r\n                                         userInfoScript.LoadUserPicture(userInfoScript.pictureUser,cc.find(\"Canvas/UserPicture\"));\r\n                                         var rivalIconNode = cc.find(\"Canvas/EnemyPicture\");\r\n                                         if(CC_WECHATGAME){\r\n                                             userInfoScript.LoadRivalPicture(userInfoScript.pictureEnemy,rivalIconNode);\r\n                                         }else{\r\n                                             userInfoScript.LoadUserPicture(userInfoScript.pictureEnemy,rivalIconNode);\r\n                                         }\r\n                                       //显示敌人的游戏地图\r\n                                        cc.find(\"Canvas\").getComponent(\"PersonsGame1Main\").initRivalMap(8,8,cc.find(\"Canvas\").getComponent(\"PersonsGame1Main\").prefabEnemy1[2],12,6);\r\n                                    //    Global.CreatBackGround(cc.find(\"Canvas\")\r\n                                    //    .getComponent(\"PersonsGame1Main\").initRivalMap();\r\n                                    //    Global.initMapForEnemy(8,8,cc.find(\"Canvas\").getComponent(\"PersonsGame1Main\").prefabEnemy1[2],12,6);\r\n                                       //生成方块\r\n                                       cc.find(\"Canvas\").getComponent(\"PersonsGame1Main\").GetBlock();\r\n                                    }\r\n                                    break;\r\n                            }\r\n                            break;\r\n            \r\n            case \"changeMap\":\r\n                           var msg2=msg1.changeMap;\r\n                           console.log(\"=================msg2=============== is \" + msg2);\r\n                           var rivalGameType = userInfoScript.rivalGameType;\r\n                           var userType = userInfoScript.nGameType;\r\n                           console.log(\"#############################\",rivalGameType,userType);\r\n                           if(rivalGameType === \"2\" || rivalGameType === \"4\"){\r\n                                console.log(\"<<<<<<<<<<<<<<<<<<<<<<=========>>>>>>>>>>>>>>>>>Enter forEach function\");\r\n                                msg2.forEach(element =>{\r\n                                    //当前的节点所在的行\r\n                                    let row = element.row;\r\n                                    //节点所在的列\r\n                                    let col = element.col;\r\n                                    //该节点类型名\r\n                                    var typeName = \"\";\r\n                                    if(rivalGameType === \"4\"){\r\n                                        switch(element.color){\r\n                                            case \"-1\":\r\n                                                typeName = \"-1\";\r\n                                                break;\r\n                                            case \"0\":\r\n                                                typeName = \"7\";\r\n                                                break;\r\n                                            case \"1\":\r\n                                                typeName = \"8\";\r\n                                                break;\r\n                                            case \"2\":\r\n                                                typeName = \"9\";\r\n                                                break;\r\n                                            case \"3\":\r\n                                                typeName = \"10\";\r\n                                                break;\r\n                                            case \"4\":\r\n                                                typeName = \"11\";\r\n                                                break;\r\n                                            case \"5\":\r\n                                                typeName = \"12\";\r\n                                                break;\r\n                                            case \"6\":\r\n                                                typeName = \"13\";\r\n                                                break;\r\n                                            case \"7\":\r\n                                                typeName = \"14\";\r\n                                                break;  \r\n                                        }    \r\n                                    }else{\r\n                                        switch(element.color){\r\n                                            case \"-1\":\r\n                                                typeName = \"-1\";\r\n                                                break;\r\n                                            case \"0\":\r\n                                                typeName = \"20\";\r\n                                                break;\r\n                                            case \"1\":\r\n                                                typeName = \"19\";\r\n                                                break;\r\n                                            case \"2\":\r\n                                                typeName = \"18\";\r\n                                                break;\r\n                                            case \"3\":\r\n                                                typeName = \"16\";\r\n                                                break;\r\n                                        }\r\n                                    }\r\n                                    \r\n                                    //动态加载图片\r\n                                    console.log(\"==================>>>>typeName is \" + typeName);\r\n                                    console.log(\"==================>>>>row is \" + row);\r\n                                    console.log(\"==================>>>> col is \" + col);\r\n                                    if(typeName != undefined){\r\n                                        if(userType === \"2\" || userType === \"4\"){\r\n                                            var start = new Date().getMilliseconds();\r\n                                            if(userType === \"4\"){\r\n                                                new Promise(function(resolve,reject){\r\n                                                    console.log(\"进入Lck游戏类型Promise\");\r\n                                                    cc.loader.loadRes(\"Game4/\"+typeName,cc.SpriteFrame,function(err,frame){\r\n                                                        console.log(\"进入加载图片过程\");\r\n                                                        var end = new Date().getMilliseconds();\r\n                                                        cc.find(\"Canvas/rivalGame\").getComponent(\"RivalGame\").backGroundArr[row][col].getComponent(cc.Sprite).spriteFrame = frame; \r\n                                                        resolve(end-start);\r\n                                                    });\r\n                                                }).then(function(delay){\r\n                                                    console.log(\"加载资源所用时间:\" + delay);\r\n                                                });\r\n                                            }else{\r\n                                                new Promise(function(resolve,reject){\r\n                                                    console.log(\"进入Lck游戏类型Promise\");\r\n                                                    cc.loader.loadRes(\"Game3/\"+typeName,cc.SpriteFrame,function(err,frame){\r\n                                                        console.log(\"进入加载图片过程\");\r\n                                                        var end = new Date().getMilliseconds();\r\n                                                        cc.find(\"Canvas/rivalGame\").getComponent(\"RivalGame\").backGroundArr[row][col].getComponent(cc.Sprite).spriteFrame = frame; \r\n                                                        resolve(end-start);\r\n                                                    });\r\n                                                }).then(function(delay){\r\n                                                    console.log(\"加载资源所用时间:\" + delay);\r\n                                                });\r\n                                            }\r\n                                        }else if(userType === \"1\" || userType === \"3\"){\r\n                                            console.log(\"改变地图用户游戏类型小泉\");\r\n                                            cc.loader.loadRes(\"Game4/\"+typeName, cc.SpriteFrame, function(err,txt){\r\n                                                console.log(element.col+\"改变地图用户游戏类型\");\r\n                                                console.log(element.row+\"改变地图用户游戏类型为小泉游戏\");\r\n                                                cc.find(\"Canvas\")\r\n                                                .getComponent(\"PersonsGame1Main\")\r\n                                                .enemyGroundChild[element.row][element.col].getComponent(cc.Sprite).spriteFrame=txt;      \r\n                                            });\r\n                                        }\r\n                                    }\r\n                                });\r\n                                console.log(\"===================>>>>>>>>>>\");\r\n                            }else{\r\n                                //存取颜色\r\n                                console.log(\"对手的游戏类型为小泉的游戏\");\r\n                                var arratColor=[];\r\n                                msg2.forEach(element => {\r\n                                    var color1=\"\";\r\n                                    switch(element.color)\r\n                                    {\r\n                                        case \"red\":\r\n                                                    color1=\"3\";\r\n                                                    break;\r\n                                        case \"blue\":\r\n                                                    color1=\"2\"; \r\n                                                    break;\r\n                                        case \"green\":\r\n                                                    color1=\"1\";\r\n                                                    break;\r\n                                        case \"white\":\r\n                                                    color1=\"0\";\r\n                                                    break;\r\n                                    }\r\n                                    console.log(\"游戏类型color1 is --->>\" + color1);\r\n                                    if(userType === \"1\" || userType === \"3\"){\r\n                                        console.log(\"改变地图用户游戏类型小泉\");\r\n                                        cc.loader.loadRes(\"picture/\"+color1, cc.SpriteFrame, function(err,txt){\r\n                                            console.log(element.col+\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n                                            console.log(element.row+\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n                                            console.log();\r\n                                            cc.find(\"Canvas\")\r\n                                            .getComponent(\"PersonsGame1Main\")\r\n                                            .enemyGroundChild[element.col][element.row].getComponent(cc.Sprite).spriteFrame=txt;      \r\n                                        });\r\n                                    }else if(userType === \"2\" || userType === \"4\"){\r\n                                        console.log(\"改变地图用户游戏类型Lck\");\r\n                                        cc.loader.loadRes(\"picture/\"+color1, cc.SpriteFrame, function(err,txt){\r\n                                            console.log(element.col+\" 改变地图用户游戏类型\");\r\n                                            console.log(element.row+\" 改变地图用户游戏类型为Lck游戏\");\r\n                                            cc.find(\"Canvas/rivalGame\")\r\n                                            .getComponent(\"RivalGame\")\r\n                                            .backGroundArr[element.col][element.row].getComponent(cc.Sprite).spriteFrame=txt;      \r\n                                        });\r\n                                    }\r\n                                });\r\n                            }\r\n                           break;\r\n             //绘制敌人惩罚地图              \r\n             case \"punishMap\": \r\n                           var msg2=msg1.punishMap;\r\n                           for(var i=0;i<=msg1.punishMap.length-1;i++)\r\n                           {\r\n                               cc.log(JSON.stringify(msg1.punishMap[i]));\r\n                           }\r\n                           cc.log(msg1.punishMap.toString());\r\n                           \r\n                           //获得用户游戏类型（因为这个消息是服务器给被惩罚人发的这里被惩罚人就是当前玩家）\r\n                           var userType = userInfoScript.nGameType;\r\n                           console.log(\"punishMap Canvas is \",cc.find(\"Canvas\"));\r\n                           console.log(\"punishMap----->>\",userType);\r\n                           switch(userType){\r\n                               case \"1\":\r\n                                    console.log(msg1+\"punishMap111111111111111111111111\");\r\n                                    console.log(\"punishMap \",msg1.rows);\r\n                                    cc.find(\"Canvas\").getComponent(\"PersonsGame1Main\").PunishUp(msg1.rows);\r\n                                    msg2.forEach(element => {\r\n                                        var color1=\"\";\r\n                                        switch(element.color)\r\n                                        {\r\n                                            case \"red\":\r\n                                                    color1=\"3\";\r\n                                                    break;\r\n                                            case \"blue\":\r\n                                                    color1=\"2\"; \r\n                                                    break;\r\n                                            case \"green\":\r\n                                                    color1=\"1\";\r\n                                                    break;\r\n                                            case \"white\":\r\n                                                    color1=\"0\";\r\n                                                    break;\r\n                                        }\r\n                                        if(element.color!=\"white\")\r\n                                        {\r\n                                            cc.loader.loadRes(\"picture/\"+color1, cc.SpriteFrame, function(err,txt){\r\n                                                var nodePunish=cc.instantiate(cc.find(\"Canvas\").getComponent(\"PersonsGame1Main\").punishPrefab);\r\n                                                nodePunish.parent=cc.find(\"Canvas\").getComponent(\"PersonsGame1Main\").boxParent;\r\n                                                nodePunish.setPosition(cc.find(\"Canvas\").getComponent(\"PersonsGame1Main\").groundChild[element.col][element.row].getPositionX(),cc.find(\"Canvas\").getComponent(\"PersonsGame1Main\").groundChild[element.col][element.row].getPositionY());\r\n                                                nodePunish.getComponent(cc.Sprite).spriteFrame=txt;\r\n                                                cc.find(\"Canvas\")\r\n                                                .getComponent(\"PersonsGame1Main\")\r\n                                                .groundChild[element.col][element.row].getComponent(\"PrefabState\").stringColor=element.color;\r\n                                                cc.find(\"Canvas\")\r\n                                            .getComponent(\"PersonsGame1Main\")\r\n                                            .groundChild[element.col][element.row].getComponent(\"PrefabState\").isBox=true;       \r\n                                            }); \r\n                                        }\r\n                                    });\r\n                                    for(var i=0;i<=msg1.punishMap.length-1;i++)\r\n                                    {\r\n                                        cc.find(\"Canvas\").getComponent(\"PersonsGame1Main\").arrayChangeNode.push(msg1.punishMap[i]);\r\n                                    }\r\n                                    cc.find(\"Canvas\").getComponent(\"PersonsGame1Main\").isPunish=true;\r\n                                    break;\r\n                                case \"2\":\r\n                                    //宝石游戏惩罚方式\r\n                                    break;\r\n                                case \"3\":\r\n                                    break;\r\n                                case \"4\":\r\n                                    console.log(\"punishMap44444444444444444444444\");\r\n                                    //如果敌人游戏类型为是4的话按照游戏四进行惩罚\r\n                                    cc.find(\"Canvas/Game\").getComponent(\"Game4Fight\").wasPunishedByRival(msg1.punishMap);\r\n                                    break;\r\n\r\n                            }\r\n                           \r\n                          break;\r\n             case \"enemyDisappear\":\r\n                          cc.log(msg1+\"enemyDisappear111111111111111111111111111111111\");\r\n                            //打开敌人消行开关\r\n                            var rivalGameType = userInfoScript.rivalGameType;\r\n                            var userGameType = userInfoScript.nGameType;\r\n                            switch(userGameType){\r\n                                case \"1\":\r\n                                    cc.find(\"Canvas\").getComponent(\"PersonsGame1Main\").isDisppearEnemy=true;\r\n                                    break;\r\n                                case \"2\":\r\n                                    cc.find(\"Canvas/Game\").getComponent(\"FightGame3\").rivalTouchBarry = true;\r\n                                    break;\r\n                                case \"3\":\r\n                                    break;\r\n                                case \"4\":\r\n                                    console.log(\"接收到监听敌人是否下落的指示\");\r\n                                    cc.find(\"Canvas/Game\").getComponent(\"Game4Fight\").rivalTouchBarry = true; \r\n                                    console.log(\"-->接收敌人信息!!!!!!!!!!!!!!!!!\");\r\n                                    break;         \r\n                            }\r\n                          \r\n                        break;  \r\n            case \"addScore\":\r\n                           console.log(\"in addScore msg1 is \" + msg1);\r\n                           console.info(msg1);\r\n                           let keyArr = Object.keys(msg1);\r\n                           keyArr.forEach(element =>{\r\n                               console.log(element);\r\n                               console.log(\"in addScore msg1[\"+ element +\"] is \" + msg1[element]);\r\n                           })\r\n                           //显示敌人分数\r\n                           var userGameType = userInfoScript.nGameType;\r\n                           //敌人的游戏类型\r\n                           var rivalGameType = userInfoScript.rivalGameType;\r\n                           console.log(\"in addScore 对手的游戏类型是\",rivalGameType);\r\n                           console.log(\"in addScore 用户游戏类型是\",userGameType);\r\n                            //四种游戏类型\r\n                            if(userGameType === \"2\" || userGameType === \"4\"){\r\n                                //加分操作\r\n                                console.log(\"in addScore 我是游戏类型2或者4我要加分了\",msg1);\r\n                                console.log(\"in addScore (((((((((msg1.removeRows is \" + msg1.removeRows.toString());\r\n                                //检查对手的游戏类型每种游戏类型的计分方式不同\r\n                                if(rivalGameType === \"2\" || rivalGameType === \"4\"){\r\n                                    console.log(\"in addScore 对手的游戏类型为2或者4自己的游戏类型为2或者4\");\r\n                                    cc.find(\"Canvas/rivalInfo/score\").getComponent(cc.Label).string = msg1.removeRows.toString();\r\n                                }else{\r\n                                    console.log(\"in addScore 对手的游戏类型为1或者3自己的游戏类型为2或者4\");\r\n                                    cc.find(\"Canvas/Game\").getComponent(\"Game4Fight\").showScoreForGame1(msg1.removeRows,cc.find(\"Canvas/rivalInfo/score\"));\r\n                                }\r\n                            }else if(userGameType === \"1\" || userGameType === \"3\"){\r\n                                console.log(\"in addScore 我是游戏类型1或者3我要加分了\",msg1);\r\n                                //游戏类型2或者4直接发送的是分数直接显示分数就完了\r\n                                if(rivalGameType === \"2\" || rivalGameType === \"4\"){\r\n                                    console.log(\"in addScore 对手的游戏类型为2或者4自己的游戏类型为1或者3\");\r\n                                    cc.find(\"Canvas/EnemyScore\").getComponent(cc.Label).string = msg1.removeRows;\r\n                                }else{\r\n                                    console.log(\"in addScore 对手的游戏类型为1或者3自己的游戏类型为1或者3\");\r\n                                    cc.find(\"Canvas\").getComponent(\"PersonsGame1Main\").ShowScore(msg1.removeRows,cc.find(\"Canvas/EnemyScore\"));\r\n                                }\r\n                            }\r\n                        break;    \r\n            //游戏结束结算            \r\n            case \"result_exit\":\r\n                console.log(\"in result_exit-----------------\");   \r\n                //接收的结算信息的时候将结算节点不显示\r\n                //自己的游戏类型\r\n                var userGameType = userInfoScript.nGameType;\r\n                //对手的游戏类型\r\n                var rivalGameType = userInfoScript.rivalGameType;\r\n                //获得用户数据\r\n                console.log(\"msg1 is \",msg1);\r\n                var userInfo = msg1.data;\r\n                console.log(\"userInfo is \",userInfo);\r\n                if(userGameType === \"2\" || userGameType === \"4\"){\r\n                    console.log(\"in result_exit 自己的游戏类型为画像或者宝石\");\r\n                    if(!cc.find(\"Canvas/Over\").active){\r\n                        cc.find(\"Canvas/Over\").active = true;\r\n                        cc.find(\"Canvas/Over_light_widget\").active = true;\r\n                        //自己失败显示失败\r\n                        cc.find(\"Canvas/Over\").getChildByName(\"lose\").active = false;\r\n                        //自己没有赢不显示胜利的标记\r\n                        cc.find(\"Canvas/Over\").getChildByName(\"win\").active = true;\r\n                    }\r\n                    cc.find(\"Canvas/Over/result\").active = false;\r\n                    //显示自己的积分\r\n                    cc.find(\"Canvas/Over/Score\").getComponent(cc.Label).string = userInfo.integral.toString();\r\n                    //暂停当前游戏\r\n                    // cc.director.pause();\r\n                    // cc.find(\"Canvas/Over/again\").on(\"touchstart\",function(){\r\n                    //     cc.director.loadScene(\"PersonsChoose\");\r\n                    // });\r\n                    // cc.find(\"Canvas/Over/quit\").on(\"touchstart\",function(){\r\n                    //     cc.director.loadScene(\"PersonsChoose\");\r\n                    // });\r\n                }else if(userGameType === \"1\" || userGameType === \"3\"){\r\n                     if(cc.find(\"Canvas\").getComponent(\"PersonsGame1Main\").lose==true)\r\n                     {\r\n                         cc.find(\"Canvas/NodeOverLose/Score\").getComponent(cc.Label).string +=userInfo.integral.toString();\r\n                         cc.find(\"Canvas/NodeOverLose/wait\").active=false;\r\n                     }\r\n                     else\r\n                     {\r\n                        cc.find(\"Canvas/NodeOverWin/Score\").getComponent(cc.Label).string +=userInfo.integral.toString();\r\n                        cc.find(\"Canvas/NodeOverWin/wait\").active=false;\r\n                        cc.find(\"Canvas\").getComponent(\"PersonsGame1Main\").isWin=true;\r\n                        // cc.find(\"Canvas\").getComponent()\r\n                        // cc.director.pause();\r\n                     }\r\n                    \r\n                    //显示俄罗斯方块的结束界面\r\n                    console.log(\"in result_exit 自己的游戏类型为俄罗斯方块游戏结束\");\r\n                }\r\n                break;   \r\n            case \"getResult\":\r\n                let adArr = [\"adunit-cba9712c1d68c59d\",\"adunit-4c58e1d36d38a2d6\",\"adunit-74bb1afec52241a9\",\"adunit-f874b1440d977650\"];\r\n                let index = Math.floor(Math.random(0,1)*4);\r\n                //显示广告\r\n                cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").showAdvice(adArr[index]);\r\n                //该用户胜利了\r\n                cc.audioEngine.play(this.winAudio,false,1);\r\n                var userGameType = userInfoScript.nGameType;\r\n                console.log(\"getResult ....................\"+userGameType);\r\n                if(userGameType === \"2\" || userGameType === \"4\"){\r\n                    console.log(\"in getResult 自己的游戏类型为画像或者宝石\");\r\n                    cc.find(\"Canvas/Game\").getComponent(\"Game4Fight\").isWin = true;\r\n                    //进入画像或者宝石方块的游戏结束界面\r\n                    //其他下降，旋转按钮，左右移动按钮处于不可激活状态\r\n                    cc.find(\"Canvas/down\").interactable = false;\r\n                    cc.find(\"Canvas/rotate\").interactable = false;\r\n                    cc.find(\"Canvas/slide\").interactable = false;\r\n                    //显示结束动画\r\n                    cc.find(\"Canvas/Over_light_widget\").active = true;\r\n                    // var animation = this.gameOverAnimation.getComponent(cc.Animation);\r\n                    // animation.play(\"Over_light\"); \r\n                    cc.find(\"Canvas/Over\").active = true;\r\n                    cc.find(\"Canvas/mask\").active = true;\r\n                    //自己失败显示失败\r\n                    cc.find(\"Canvas/Over\").getChildByName(\"lose\").active = false;\r\n                    //自己没有赢不显示胜利的标记\r\n                    cc.find(\"Canvas/Over\").getChildByName(\"win\").active = true;\r\n                    //暂停当前游戏\r\n                    // cc.director.pause();\r\n                    // cc.find(\"Canvas/Over/again\").on(\"touchstart\",function(){\r\n                    //     cc.director.loadScene(\"PersonsChoose\");\r\n                    // });\r\n                    // cc.find(\"Canvas/Over/quit\").on(\"touchstart\",function(){\r\n                    //     cc.director.loadScene(\"PersonsChoose\");\r\n                    // });\r\n                    //给服务器发送赢家的分数消息\r\n                    var jsonData = {\r\n                        tag1            : 4,\r\n                        score           : \"\",\r\n                        type            : userGameType,\r\n                        state1          : \"\",\r\n                        changeMapList1  : [],\r\n                        removeMapList1  : 0,\r\n                        nMapRow         : \"\",\r\n                        nMapCol         : \"\",\r\n                        loading1        : \"\",\r\n                        result_score    : \"\",\r\n                    }\r\n                    //获得赢家的分数\r\n                    jsonData.result_score = cc.find(\"Canvas/score\").getComponent(cc.Label).string;\r\n                    //给服务器发送消息\r\n                    this.SendLongMsg(jsonData);\r\n                }else if(userGameType === \"1\" || userGameType === \"3\"){\r\n                    console.log(\"getResult ....................\");\r\n                    cc.find(\"Canvas/dark\").active=true; \r\n                    // //初始化我赢了\r\n                    // this.gameResult=true;\r\n                    cc.find(\"Canvas/NodeOverWin\").active=true;\r\n                     //给服务器发送赢家的分数消息\r\n                     var jsonData = {\r\n                        tag1            : 4,\r\n                        score           : \"\",\r\n                        type            : userGameType,\r\n                        state1          : \"\",\r\n                        changeMapList1  : [],\r\n                        removeMapList1  : 0,\r\n                        nMapRow         : \"\",\r\n                        nMapCol         : \"\",\r\n                        loading1        : \"\",\r\n                        result_score    : \"\",\r\n                    }\r\n                    // if(userGameType==\"1\")\r\n                    // {\r\n                    //     jsonData.tag1=1;\r\n                    // }\r\n                    // else\r\n                    // {\r\n                    //     jsonData.tag1=3;\r\n                    // }\r\n                    //获得赢家的分数\r\n                    jsonData.result_score = cc.find(\"Canvas/BackGround/UserScore\").getComponent(cc.Label).string;\r\n                    this.SendLongMsg(jsonData);\r\n                     //显示胜利界面   \r\n                    //显示俄罗斯方块的结束界面\r\n                    console.log(\"in result_exit 自己的游戏类型为俄罗斯方块游戏结束\");\r\n                }\r\n                //暂停游戏\r\n                cc.director.pause();\r\n                break;\r\n            //服务器断开我的链接\r\n            case \"relink\":\r\n                \r\n                break;    \r\n            //更新提示\r\n            case \"notice\":\r\n                this.node.getChildByName(\"informBack\").active = true;\r\n                this.node.getChildByName(\"maskParent\").active = true;\r\n                let noticeMsg = msg1.data;\r\n                userInfoScript.informMessage = noticeMsg;\r\n                userInfoScript.rollText(userInfoScript.informMessage);\r\n                break;\r\n\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cc.find(\"PebmanentNode\").getComponent(cc.Label).string=\"此用户为非法用户\";\r\n    }\r\n   },\r\n    //初始化地图\r\n    initMapForTwoAndFour : function(nameEnemy,userInfoScript,gameType){\r\n        cc.find(\"Canvas/rivalInfo/rivalName\").getComponent(cc.Label).string = nameEnemy;\r\n        var rivalIconNode = cc.find(\"Canvas/rivalInfo/rivalIcon\");\r\n        if(cc.sys.isNative){\r\n            userInfoScript.LoadUserPicture(userInfoScript.pictureEnemy,rivalIconNode);\r\n        }\r\n        if(CC_WECHATGAME){\r\n            userInfoScript.LoadRivalPicture(userInfoScript.pictureEnemy,rivalIconNode);\r\n        }\r\n        //加载用户头像\r\n        var userIconNode = cc.find(\"Canvas/userIcon\");\r\n        userInfoScript.LoadUserPicture(userInfoScript.pictureUser,userIconNode);\r\n        //当前的游戏类型为1初始化地图\r\n        if(gameType === \"1\"){\r\n\r\n        }else{\r\n            cc.find(\"Canvas/rivalGame\").getComponent(\"RivalGame\").initMap(12,6,gameType);\r\n        }\r\n    },\r\n    start () {\r\n    \r\n    },\r\n    update (dt) {\r\n        // var userInfoScript = cc.find(\"PebmanentNode\").getComponent(\"UserInfo\");\r\n        // //监听Game4Fight的isTouch看看对手是否触底\r\n        // var rivalGameType = userInfoScript.rivalGameType;\r\n        // var userGameType = userInfoScript.nGameType;\r\n        // //是否能够发送惩罚消息到服务器\r\n        // this.canSendDataForDisappear = false;\r\n        // if(userGameType === \"2\" || userGameType === \"4\"){\r\n        //     //检查对手的游戏类型\r\n        //     switch(rivalGameType){\r\n        //         case \"1\":\r\n        //             break;\r\n        //         case \"2\":\r\n        //             break;\r\n        //         case \"3\":\r\n        //             break;\r\n        //         case \"4\":\r\n        //             //检查对手画像方块游戏方块是否触底\r\n        //             this.canSendDataForDisappear = cc.find(\"Canvas/Game\").getComponent(\"Game4Fight\").isTouch;\r\n        //             //如果对手触底发送数据到服务器\r\n        //             if(this.canSendDataForDisappear){\r\n                        \r\n        //             }\r\n        //     }\r\n        // }\r\n        // //如果对手已经触底\r\n        // if(this.canSendDataForDisappear){\r\n\r\n        // }\r\n        \r\n\r\n    },\r\n});\r\n","// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        //初始化是否有方块属性\r\n        this.isBox=false;\r\n        //初始化颜色属性\r\n        this.stringColor=\"\";\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","/*\r\n * @Author: mikey.zhaopeng \r\n * @Date: 2018-07-12 19:47:53 \r\n * @Last Modified by: mikey.zhaopeng\r\n * @Last Modified time: 2018-08-09 16:40:48\r\n */\r\n/**\r\n * 远程加载图片到本地，供以后使用\r\n */\r\n\r\nvar md = require(\"./md5\");\r\ncc.Class({\r\n    extends: cc.Component,\r\n    statics : {\r\n        loadImage : function (url,callback){\r\n            cc.loader.load(url,function (err,tex) {\r\n                var spriteFrame = new cc.SpriteFrame(tex, cc.Rect(0, 0, tex.width, tex.height));\r\n                callback(spriteFrame);\r\n            });\r\n        },\r\n        //自己的头像地址\r\n        filePath : \"\",\r\n        //敌人的图片的地址路径\r\n        rivalFilePath : \"\",\r\n        //敌人图片的路径保存到本地\r\n        rivalImageForWechatGame : function(url,callback){\r\n            var self = this;\r\n            this.wxDownloadImage(self.rivalFilePath,url,callback,\"rival\");\r\n        },\r\n        //微信小游戏保存图片到本地\r\n        imageLoadToolForWechatGame(url,callback){\r\n            var self = this;\r\n            console.log(\"self.filePath is \",self.filePath);\r\n            //下载图片\r\n            this.wxDownloadImage(self.filePath,url,callback,\"self\");\r\n        },\r\n        /**\r\n         * @param  {保存到本地的图片地址} imagePath\r\n         * @param  {远程图片的地址url} url\r\n         * @param  {回调函数将spriteFrame返回出去} callback\r\n         * @param  {是对手请求图片还是自己请求图片} tag\r\n         */\r\n        wxDownloadImage : function(imagePath,url,callback,tag){\r\n            var self = this;\r\n            if(CC_WECHATGAME){\r\n                console.log(\"imagePath is \",imagePath);\r\n                // var self = this;\r\n                // var localPath = wx.env.USER_DATA_PATH + '/';\r\n                if(imagePath !== \"\"){\r\n                    // var fileManager = wx.getFileSystemManager();\r\n                    // //从路径里面取图片\r\n                    // var imageData = fileManager.readFileSync(imagePath);\r\n                    // var jpgPath = imagePath.lastIndexOf('/');\r\n                    // var jpgName = imagePath.slice(jpgPath);\r\n                    // var localPath = wx.env.USER_DATA_PATH + '/' + jpgName;\r\n                    // var urlX = \r\n                    console.log(\"用户的头像已经存在在本地\");\r\n                    cc.loader.load(imagePath, function(err, tex){\r\n                        if( err ){\r\n                            cc.error(err);\r\n                        }else{\r\n                            var spriteFrame = new cc.SpriteFrame(tex);\r\n                            if( spriteFrame ){\r\n                                callback(spriteFrame);\r\n                            }\r\n                        }\r\n                    });\r\n                }else{\r\n                    wx.downloadFile({\r\n                        url : url,\r\n                        header : {\r\n                            \"content-type\":\"image/jpeg\"\r\n                        },\r\n                        success : function(res){\r\n                            console.log(\"tempFilePath is \",res.tempFilePath);\r\n                            console.log(\"响应消息 is \",res.statusCode);\r\n                            var tempFilePath = res.tempFilePath;\r\n                            console.log(\"tempFilePath is \",tempFilePath);\r\n                            var jpgPath = tempFilePath.lastIndexOf('/');\r\n                            var jpgName = tempFilePath.slice(jpgPath);\r\n                            // wx.saveImageToPhotosAlbum({\r\n                            //     filePath : tempFilePath,\r\n                            //     success  : function(res){\r\n                            //         console.log(\"图片保存到系统相册\",res);\r\n                            //     }\r\n                            // });\r\n                            var fileManager = wx.getFileSystemManager();\r\n                            var localPath = wx.env.USER_DATA_PATH + '/' + jpgName;\r\n                            new Promise(function(resolve,reject){\r\n                                fileManager.saveFile({\r\n                                    tempFilePath : tempFilePath,\r\n                                    filePath     : localPath,\r\n                                    success : function(res){\r\n                                        console.log(\"savedFilePath is \",res.savedFilePath);\r\n                                        //图片地址\r\n                                        if(tag === \"self\"){\r\n                                            self.filePath = res.savedFilePath;\r\n                                        }else if(tag === 'rival'){\r\n                                            self.rivalFilePath = res.savedFilePath;\r\n                                        }\r\n                                        // imagePath = res.savedFilePath;\r\n                                        resolve(res.savedFilePath);\r\n                                    },\r\n                                    fail : function(){\r\n                                        console.log(\"文件保存失败！！\");\r\n                                    }\r\n                                });\r\n                            }).then(function(filePath){\r\n                                //保存完相册完毕之后取出来\r\n                                cc.loader.load(filePath, function(err, tex){\r\n                                    if( err ){\r\n                                        cc.error(err);\r\n                                    }else{\r\n                                        var spriteFrame = new cc.SpriteFrame(tex);\r\n                                        if( spriteFrame ){\r\n                                            callback(spriteFrame);\r\n                                        }\r\n                                    }\r\n                                });\r\n                            });\r\n                        },\r\n                        fail :function(){\r\n                            console.log(\"下载文件失败\");\r\n                        },\r\n                        complete : function(){\r\n    \r\n                        }\r\n                    });\r\n                }\r\n                \r\n            }\r\n        },\r\n        imageLoadTool(url, callback){\r\n            var dirpath =  jsb.fileUtils.getWritablePath() + 'customHeadImage/';\r\n            console.log(\"dirpath ->\",dirpath);\r\n            //对路径url进行加密\r\n            let md5URL = md(url);\r\n            var filepath = dirpath + md5URL + '.jpg';\r\n            console.log(\"filepath ->\",filepath);\r\n            function loadEnd(){\r\n                cc.loader.load(filepath, function(err, tex){\r\n                    if( err ){\r\n                        cc.error(err);\r\n                    }else{\r\n                        var spriteFrame = new cc.SpriteFrame(tex);\r\n                        if( spriteFrame ){\r\n                            spriteFrame.retain();\r\n                            callback(spriteFrame);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if( jsb.fileUtils.isFileExist(filepath) ){\r\n                cc.log('Remote is find' + filepath);\r\n                loadEnd();\r\n                return;\r\n            }\r\n            var saveFile = function(data){\r\n                if( typeof data !== 'undefined' ){\r\n                    if(!jsb.fileUtils.isDirectoryExist(dirpath)){\r\n                        jsb.fileUtils.createDirectory(dirpath);\r\n                    }else{\r\n                        console.log(\"路径exist\");\r\n                    }\r\n                    // new Uint8Array(data) writeDataToFile  writeStringToFile\r\n                    if( jsb.fileUtils.writeDataToFile( new Uint8Array(data) , filepath) ){\r\n                        cc.log('Remote write file succeed.');\r\n                        loadEnd();\r\n                    }else{\r\n                        cc.log('Remote write file failed.');\r\n                    }\r\n                }else{\r\n                    cc.log('Remote download file failed.');\r\n                }\r\n            };\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = function () {\r\n                cc.log(\"xhr.readyState  \" +xhr.readyState);\r\n                cc.log(\"xhr.status  \" +xhr.status);\r\n                if (xhr.readyState === 4 ) {\r\n                    if(xhr.status === 200){\r\n                        //responseType一定要在外面设置\r\n                        // xhr.responseType = 'arraybuffer'; \r\n                        saveFile(xhr.response);\r\n                    }else{\r\n                        saveFile(null);\r\n                    }\r\n                }\r\n            }.bind(this);\r\n            //responseType一定要在外面设置\r\n            xhr.responseType = 'arraybuffer';\r\n            xhr.open(\"GET\", url, true);\r\n            xhr.send();\r\n        },\r\n    },\r\n});","// Learn cc.Class:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        //宝石类型\r\n        type:null,\r\n        //是否可以消除\r\n        isRemove:false,\r\n        //是否移动过\r\n        isMove : false,\r\n        //是否可以激活\r\n        isActive : false,\r\n        /**\r\n         * 0 : 0度方向\r\n         * 1 : 90度方向\r\n         * 2 : 180度方向\r\n         * 3 : 270度方向\r\n         * 4 : 360度方向也就是0度方向\r\n         */\r\n        angle    : 0,\r\n        //是否可以快速下落\r\n        hasDown : false,\r\n        //该节点所处的行和列\r\n        row : 0,\r\n        col : 0,      \r\n        // active : false,\r\n    },\r\n    quickDown : function(row,col,backGroundArr,map){\r\n        //改变当前行\r\n        var self = this;\r\n        backGroundArr[self.row][self.col].getComponent(\"Back\").type = -1;\r\n        cc.log(\"map is \" + map);\r\n        var targetX = backGroundArr[row][col].x;\r\n        var targetY = backGroundArr[row][col].y;\r\n        \r\n        var moveAction = cc.moveTo(0.0001,cc.p(targetX,targetY));\r\n        self.node.runAction(moveAction);\r\n        //该节点已经下落过了，以后更新地图的时候不更新\r\n        self.hasDown = true;\r\n        // this.node.x = targetX;\r\n        // this.node.y = targetY;\r\n        map[row][col] = 1;\r\n        //设置背景方格的类型为该节点的类型\r\n        backGroundArr[row][col].getComponent(\"Back\").type = this.type;\r\n        backGroundArr[row][col].getComponent(\"Back\").innerNode = this.node;\r\n        //设置当前的行为下落之后的行\r\n        this.row = row;\r\n        \r\n    },\r\n    //消除下落操作\r\n    afterRemoveDown : function(map,backGroundArr){\r\n        if(this.isActive){\r\n            cc.log(\"不可消除块下落了，需要你引起注意\");\r\n        }\r\n        //自己向下找空穴的位置\r\n        //自己占据的地图信息改为0\r\n        if(this.checkCanDown(map)){\r\n            map[this.row][this.col] = 0;\r\n            //改变背景方格的类型状态及内置节点的引用风\r\n            backGroundArr[this.row][this.col].getComponent(\"Back\").type = -1;\r\n            backGroundArr[this.row][this.col].getComponent(\"Back\").innerNode = null;\r\n            //向下扫描找到空穴的位置\r\n            var targetRow = this.scanDown(map,this.row,this.col);\r\n            cc.log(\"targetRow is \" + targetRow);\r\n            var targetX = backGroundArr[targetRow][this.col].x;\r\n            var targetY = backGroundArr[targetRow][this.col].y;\r\n            // var distance = targetRow - this.row;\r\n            // if (cc._renderType === cc.game.RENDER_TYPE_CANVAS) {\r\n            //     cc.renderer.enableDirtyRegion(false);\r\n            // }\r\n            var action = cc.moveTo(0.3,cc.p(targetX,targetY));\r\n            this.node.runAction(action);\r\n            // this.node.y = targetY;\r\n            //将该节点的行设置成目标行\r\n            this.row = targetRow;\r\n            map[this.row][this.col] = 1;\r\n            //设置背景方格的类型为该节点的类型\r\n            backGroundArr[this.row][this.col].getComponent(\"Back\").type = this.type;\r\n            backGroundArr[this.row][this.col].getComponent(\"Back\").innerNode = this.node;\r\n            //如果该节点的坐标超出游戏场景底部那么把它拉回到11行去\r\n            // if(this.node.y <= backGroundArr[11][this.col].y){\r\n            //     this.node.y = backGroundArr[11][this.col].y;\r\n            // }\r\n        }\r\n        \r\n    },\r\n    scanDown : function(map,row,col){\r\n         //向下寻找\r\n         while(row < 11){\r\n            row++;\r\n            if(map[row][col] === 1){\r\n                break;\r\n            }\r\n            if(row === 11){\r\n                break;\r\n            }\r\n         }\r\n         //最底下的背景方格的状态不为1\r\n         if(row === 11 && map[row][col] != 1){\r\n             return 11;\r\n         }else{\r\n            return row-1;\r\n         }\r\n    },\r\n    //检测该节点是否可以下落\r\n    checkCanDown : function(map){\r\n        if(map[this.row+1][this.col] === 1){\r\n            return false;\r\n        }else{\r\n            return true;\r\n        }\r\n    },\r\n    //节点发光\r\n    shine : function(){\r\n        var self = this;\r\n          (function test(a){\r\n              (function t(){\r\n                var action1 = cc.fadeTo(0.1,70);\r\n                var action2 = cc.fadeTo(0,1,100);\r\n                var action3 = cc.fadeTo(0.1,130);\r\n                var action4 = cc.fadeTo(0.1,160);\r\n                var sequence = cc.sequence(action1,action2,action3,action4);\r\n                self.node.runAction(sequence);\r\n                cc.log(\"adfadfadf\");\r\n              })();\r\n            a();\r\n        })(self.aaa.bind(self));\r\n    },\r\n    //旋转操作\r\n    rotate : function(centerX,centerY,backGroundArr){\r\n\r\n\r\n    },\r\n    // LIFE-CYCLE CALLBACKS:\r\n    aaa:function(){\r\n        // this.node.destroy();\r\n        cc.log(\"发光完毕\");\r\n        this.scheduleOnce(function(){\r\n            this.node.destroy();\r\n        },0.2);\r\n        \r\n    },\r\n    onLoad () {\r\n        // cc.log(\"%%%%%%%%%%%\");\r\n        this.delay = 0;\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    update (dt) {\r\n            // this.delay += dt;\r\n            // cc.log(\"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\");\r\n            // cc.log(\"this.isRemove is \" + this.isRemove);\r\n            // //如果该节点是消除状态的时候让它发光\r\n            // if(this.delay > 0.5){\r\n            //     if(this.isRemove){\r\n            //         this.shine();\r\n            //     }\r\n            //     this.delay = 0;\r\n            // }\r\n            if(!this.isActive && this.type >= 4){\r\n                //不显示它们的子节点\r\n                for(let i = 0;i<this.node.childrenCount;i++){\r\n                    this.node.children[i].active = false;\r\n                }\r\n            }\r\n            // if(this.isActive && this.type >= 4){\r\n            //     for(let i = 0;i<this.node.childrenCount;i++){\r\n            //         this.node.children[i].active = true;\r\n            //     }\r\n            // }\r\n    },\r\n});\r\n","// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        //初始化颜色\r\n        this.stringColor=\"\";\r\n       \r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n        // progressBar : {\r\n        //     default : null,\r\n        //     type    : cc.ProgressBar\r\n        // }\r\n        \r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        // console.log(\"准备跳转微信登录\");\r\n        // var self = this;\r\n        // if(wx !== undefined){\r\n        //     this.url = [];\r\n        //     //     {url : 'http://47.92.126.116:81/res/import/08/0870c92c9.24289.json',type : 'json'},\r\n        //     //     {url : 'http://47.92.126.116:81/res/raw-assets/Textures/start/stat.27266.png',type : 'png'},\r\n        //     //     //音频文件\r\n        //     //     {url : 'http://47.92.126.116:81/res/raw-assets/Audio/rival1.3e5c4.mp3',type : 'mp3'},\r\n        //     //     {url : 'http://47.92.126.116:81/res/raw-assets/Textures/Common.23767.png',type : 'png'},\r\n        //     // ];\r\n        //     this.resource = \"adfad\";\r\n        //     this.progressBar.progress = 0;\r\n        //     // this.clearAll();\r\n        //     cc.loader.load(self.url,self.progressCallback.bind(self),self.completeCallback.bind(self));\r\n        //     this.LoginScene = false;\r\n        // }else{\r\n\r\n        // }\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n    // clearAll : function(){\r\n    //     for(let i = 0;i < this.url.length;i++){\r\n    //         let u = this.url[i];\r\n    //         cc.loader.release(u);\r\n    //     }\r\n    // },\r\n    // progressCallback : function(completedCount,totalCount,res){\r\n    //     console.log(\"进入回调函数\");\r\n    //     console.log(\"已经完成的数量\",completedCount);\r\n    //     console.log(\"资源的总数量\",totalCount);\r\n    //     this.progress = completedCount/totalCount;\r\n    //     console.log(\"进度是：\",this.progress);\r\n    //     this.resource = res;\r\n    //     this.comleteCount = completedCount;\r\n    //     this.totalCount = totalCount;\r\n    // },\r\n    // completeCallback : function(err,texture){\r\n    //     if(err){\r\n    //         console.log(\"下载图片失败\");\r\n    //     }\r\n    //     console.log(\"texture is \",texture);\r\n    // },\r\n    update (dt) {\r\n        // if(!this.resource){\r\n        //     return ;\r\n        // }\r\n        // var progress = this.progressBar.progress;\r\n        // if(progress >= 1){\r\n        //     console.log(\"加载完成\");\r\n        //     //如果登录场景没有加载过就加载一次\r\n        //     if(!this.LoginScene){\r\n        //         cc.director.loadScene(\"Login\");\r\n        //         //场景已经加载过了\r\n        //         this.LoginScene = true;\r\n        //     }else{\r\n        //         console.log(\"场景已经加载过了\");\r\n        //     }\r\n        //     return;\r\n        // }\r\n        // if(progress < 1){\r\n        //     progress += dt;\r\n        // }\r\n        // this.progressBar.progress = progress;\r\n\r\n    },\r\n});\r\n","// Learn cc.Class:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n        jindu : cc.Label\r\n    },\r\n    onLoad () {\r\n        this.progressBar = this.node.getComponent(cc.ProgressBar);\r\n        console.log(\"准备跳转微信登录\");\r\n        var self = this;\r\n        if(CC_WECHATGAME){\r\n            this.LoginScene = false;\r\n            this.url = [\r\n                {url : 'res/import/08/0870c92c9.24289.json',type : 'json'},\r\n                {url : 'res/raw-assets/Textures/cPart/vs.3f508.png',type : 'png'},\r\n                {url : 'res/raw-assets/Textures/shareIcon.81701.png',type : 'png'},\r\n                {url : 'res/raw-assets/Textures/fenxiang.e347a.png',type : 'png'},\r\n                //音频文件\r\n                {url : 'res/raw-assets/Audio/rival1.3e5c4.mp3',type : 'mp3'},\r\n                {url : 'res/raw-assets/Textures/Common1.d9856.png',type : 'png'},\r\n                {url : 'res/raw-assets/Textures/Common2.eaac7.png',type : 'png'},\r\n                {url : 'res/raw-assets/Textures/cover.96e9c.png',type : 'png'},\r\n                {url : 'res/raw-assets/Textures/noticeBack.09272.png',type : 'png'},\r\n                {url : 'res/raw-assets/Textures/noticeHand.83bf5.png',type : 'png'},\r\n            ];\r\n            this.progressBar.progress = 0;\r\n            this.clearAll();\r\n            cc.loader.load(self.url,self.progressCallback.bind(self),self.completeCallback.bind(self));\r\n        }else{\r\n            this.node.active =false;\r\n            cc.director.loadScene(\"Login\");\r\n        }\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n    clearAll : function(){\r\n        for(let i = 0;i < this.url.length;i++){\r\n            let u = this.url[i];\r\n            cc.loader.release(u);\r\n        }\r\n    },\r\n    progressCallback : function(completedCount,totalCount,res){\r\n        console.log(\"进入回调函数\");\r\n        console.log(\"已经完成的数量\",completedCount);\r\n        console.log(\"资源的总数量\",totalCount);\r\n        this.progress = completedCount/totalCount;\r\n        console.log(\"进度是：\",this.progress);\r\n        this.resource = res;\r\n    },\r\n    completeCallback : function(err,texture){\r\n        if(err){\r\n            console.log(\"下载图片失败\");\r\n        }\r\n        console.log(\"texture is \",texture);\r\n    },\r\n    update (dt) {\r\n        if(!this.resource){\r\n            return ;\r\n        }\r\n        this.progressBar.progress = this.progress;\r\n        let result = new Number(this.progress*100);\r\n        result = result.toFixed();\r\n        if(result.length === 1){\r\n            this.jindu.string = \"    \" + result;\r\n        }else if(result.length === 2){\r\n            this.jindu.string = \"  \" + result;\r\n        }else if(result.length === 3){\r\n            this.jindu.string = result;\r\n        }\r\n        console.log(\"this.progress is \",this.progress);\r\n        if(this.progress >= 1){\r\n            console.log(\"加载完成\");\r\n            //如果登录场景没有加载过就加载一次\r\n            if(!this.LoginScene){\r\n                cc.director.loadScene(\"Login\");\r\n                //场景已经加载过了\r\n                this.LoginScene = true;\r\n            }\r\n            return;\r\n        }\r\n        // if(progress < this.progress){\r\n        //     progress += dt;\r\n        // }\r\n        // this.progressBar.progress = progress;\r\n\r\n    },\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n    properties: {\r\n        // //获取用户名字节点\r\n        // nodeName:{\r\n        //     default:null,\r\n        //     type:cc.Node\r\n        // },\r\n        // //获取用户头像节点\r\n        // nodePicture:{\r\n        //     default:null,\r\n        //     type:cc.Node\r\n        // },\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n        userNameLabel : cc.Label,\r\n        rivalNameLabel : cc.Label,\r\n        countDownAudio : {\r\n            default : null,\r\n            url     : cc.AudioClip,\r\n        },\r\n        clickAudio : {\r\n            default : null,\r\n            url     : cc.AudioClip,\r\n        },\r\n        backBtn     : cc.Node,\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        this.userNameLabel.string = cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser;\r\n        if(cc.director.isPaused){\r\n            //如果游戏暂停了就恢复游戏\r\n            console.log(\"匹配界面暂停了\");\r\n            cc.director.resume();\r\n        }\r\n        //判断是否匹配成功\r\n        this.matchSuccess=false;\r\n        //显示倒计时\r\n        this.showCountDown = 0;\r\n          //初始化计时器\r\n        this.nSuccessTime=0;\r\n        //倒计时的开始时间\r\n        this.startTime = 5;\r\n        this.node.getChildByName(\"countDown\").active = false;\r\n        this.UserState();\r\n        //预加载游戏场景\r\n        var sceneArr = [\"PersonsGame1\",\"FightFigure\"];\r\n        for(let i = 0;i < sceneArr.length;i++){\r\n            this.preLoadGameScene(sceneArr[i]);\r\n        }\r\n        this.progress = 0;\r\n        this.resource = null;\r\n        this.sceneLoad = false;\r\n        //下载部分资源加快进入场景流程\r\n        if(CC_WECHATGAME){\r\n            var self = this;\r\n            this.urls = [\r\n                {url : 'res/raw-assets/Textures/cPart/tetrisbg.81dbd.png',type : 'png'},\r\n                {url : 'res/raw-assets/Textures/bPart/pink/44.1d79a.png',type : 'png'},\r\n                {url : 'res/raw-assets/Textures/bPart/yellow/10.b6d8f.png',type : 'png'},\r\n                {url : 'res/raw-assets/Textures/bPart/yellow/9.44e42.png',type : 'png'},\r\n                {url : 'res/raw-assets/Textures/bPart/yellow/11.68a0f.png',type : 'png'},\r\n                {url : 'res/raw-assets/Textures/bPart/yellow/7.cebf4.png',type : 'png'},\r\n                {url : 'res/raw-assets/Textures/bPart/yellow/14.7af40.png',type : 'png'},\r\n                {url : 'res/raw-assets/Textures/bPart/yellow/13.03702.png',type : 'png'},\r\n                {url : 'res/raw-assets/Textures/bPart/yellow/12.8986b.png',type : 'png'},\r\n                {url : 'res/raw-assets/Textures/bPart/yellow/8.10c64.png',type : 'png'},\r\n                {url : 'res/raw-assets/resources/Game4/-1.33262.png',type : 'png'},\r\n                {url : 'res/raw-assets/resources/Game4/7.cebf4.png',type : 'png'},\r\n                {url : 'res/raw-assets/resources/Game4/8.10c64.png',type : 'png'},\r\n                {url : 'res/raw-assets/resources/Game4/9.44e42.png',type : 'png'},\r\n                {url : 'res/raw-assets/resources/Game4/10.b6d8f.png',type : 'png'},\r\n                {url : 'res/raw-assets/resources/Game4/11.68a0f.png',type : 'png'},\r\n                {url : 'res/raw-assets/resources/Game4/12.8986b.png',type : 'png'},\r\n                {url : 'res/raw-assets/resources/Game4/13.03702.png',type : 'png'},\r\n                {url : 'res/raw-assets/resources/Game4/14.7af40.png',type : 'png'},\r\n                {url : 'res/raw-assets/resources/picture/0.1d79a.png',type : 'png'},\r\n                {url : 'res/raw-assets/resources/picture/1.c4498.png',type : 'png'},\r\n                {url : 'res/raw-assets/resources/picture/2.ad5ec.png',type : 'png'},\r\n                {url : 'res/raw-assets/resources/picture/3.8a1f4.png',type : 'png'},\r\n                {url : 'res/raw-assets/resources/picture/4.036f4.png',type : 'png'},\r\n                {url : 'res/raw-assets/resources/picture/5.d7fd4.png',type : 'png'},\r\n            ];\r\n            this.clearAll();\r\n            cc.loader.load(self.urls,self.progressCallback.bind(self),self.completeCallback.bind(self));\r\n        }\r\n        //显示广告\r\n        cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").showAdvice(\"adunit-e8fb34802309ceff\");\r\n    },\r\n    clearAll : function(){\r\n        for(let i = 0;i < this.urls.length;i++){\r\n            let u = this.urls[i];\r\n            cc.loader.release(u);\r\n        }\r\n    },\r\n    progressCallback : function(completedCount,totalCount,res){\r\n        console.log(\"进入回调函数\");\r\n        console.log(\"已经完成的数量\",completedCount);\r\n        console.log(\"资源的总数量\",totalCount);\r\n        this.progress = completedCount/totalCount;\r\n        console.log(\"进度是：\",this.progress);\r\n        this.resource = res;\r\n    },\r\n    completeCallback : function(err,texture){\r\n        if(err){\r\n            console.log(\"下载图片失败\");\r\n        }\r\n        console.log(\"texture is \",texture);\r\n    },\r\n    //预加载所有游戏场景\r\n    preLoadGameScene : function(gameSceneName){\r\n        cc.director.preloadScene(gameSceneName,function(){\r\n            console.log(gameSceneName + \"场景预加载成功\");\r\n        });\r\n    },\r\n    //判断玩家的匹配状态\r\n    UserState:function(){\r\n        //匹配状态加载两个头像加载自己的头像\r\n        cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").LoadTwoUser(cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").pictureUser,\r\n        cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").pictureUser,cc.find(\"Canvas/UserName\"),cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser,cc.find(\"Canvas/UserPicture1\"),cc.find(\"Canvas/UserPicture\"));\r\n    },\r\n    start () {\r\n\r\n    },\r\n    backGame : function(){\r\n        cc.audioEngine.play(this.clickAudio,false,1);\r\n        //发送数据到服务器告诉他我退出匹配\r\n        var jsonData = {\r\n            tag1            : 14,\r\n            score           : \"\",\r\n            type            : \"\",\r\n            state1          : \"\",\r\n            changeMapList1  : [],\r\n            removeMapList1  : 0,\r\n            nMapRow         : \"\",\r\n            nMapCol         : \"\",\r\n            loading1        : \"\",\r\n        }\r\n        cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(jsonData);\r\n        cc.director.loadScene(\"PersonsChoose\");\r\n    },\r\n    update (dt) {\r\n        //五秒时间里下载所需要的资源\r\n        console.log(\"--->>>>>>this.matchSuccess is \",this.matchSuccess);\r\n        if(this.matchSuccess)\r\n        {\r\n            console.log(\"匹配成功了%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\");\r\n            //隐藏back按钮\r\n            this.backBtn.active = false;\r\n            if(cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").rivalName !== \"\")\r\n                this.rivalNameLabel.string = cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").rivalName;\r\n            this.node.getChildByName(\"countDown\").active = true;\r\n            //将倒计时显示出来\r\n            this.showCountDown += dt;\r\n            this.nSuccessTime +=dt;\r\n            if(this.showCountDown >= 1 && this.startTime != 0){\r\n                this.playAudio(this.countDownAudio);\r\n                this.node.getChildByName(\"countDown\").getComponent(cc.Label).string = --this.startTime + \"s进入游戏\";\r\n                this.showCountDown = 0;\r\n            }\r\n            if(this.nSuccessTime>=5)\r\n            {\r\n                //获得游戏该用户的游戏类型根据用户的游戏类型跳转到各个不同的游戏场景\r\n                var gameType = cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nGameType;\r\n                console.log(\"gameType is \" + gameType);\r\n                // gameType = gameType.toString();\r\n                console.log(typeof gameType);\r\n                switch(gameType){\r\n                    //如果游戏类型是俄罗斯方块的话加载网络版俄罗斯方块\r\n                    case \"1\":\r\n                        console.log(\"游戏类型为俄罗斯\");\r\n                        this.nSuccessTime = 0;\r\n                        cc.director.loadScene(\"PersonsGame1\");\r\n                        break;\r\n                        //如果是宝石方块的话就加载网络版的宝石方块    \r\n                    case \"2\":\r\n                        this.nSuccessTime = 0;\r\n                        cc.director.loadScene(\"FightStone\");\r\n                        break;\r\n                    case \"3\":\r\n                        break;\r\n                        //如果是画像方块的话就加载网络版的画像方块\r\n                    case \"4\":\r\n                        this.nSuccessTime = 0;\r\n                        cc.director.loadScene(\"FightFigure\");\r\n                        //初始化敌人地图和自己的地图\r\n                        break;\r\n                }\r\n                \r\n            }\r\n        }\r\n    },\r\n    //播放音效\r\n    playAudio : function(audioUrl){\r\n        cc.audioEngine.play(audioUrl,false,1);\r\n    },\r\n    //分享方法\r\n    share : function(){\r\n        if(CC_WECHATGAME){\r\n            console.log(\"首页share\");\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").shareFriends();\r\n        }else if(cc.sys.isNative){\r\n            //原生平台分享\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nativeShare();\r\n        }\r\n    }\r\n});\r\n","// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n        backButton : cc.Node,\r\n        tetirsComment : cc.Node,\r\n        stoneComment:cc.Node,\r\n        puyouComment : cc.Node,\r\n        figureComment:cc.Node,\r\n        mask : cc.Node,\r\n        clickAudio : {\r\n            default : null,\r\n            url     : cc.AudioClip,\r\n        },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        if(CC_WECHATGAME){\r\n            //显示游戏圈按钮\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").gameClubButton.hide();\r\n        }\r\n        //播放背景音乐\r\n        if(cc.director.isPaused){\r\n            console.log(\"多人选择界面暂停了\");\r\n            cc.director.resume();\r\n        }\r\n        this.tetirsX = this.tetirsComment.x;\r\n        this.stoneX = this.stoneComment.x;\r\n        this.puyouX = this.puyouComment.x;\r\n        this.figureX = this.figureComment.x;\r\n        this.mask.active = false;\r\n        var self = this;\r\n        this.loadMatchUserSuccess = false;\r\n        if(cc.sys.isNative){\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").LoadUser(cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").pictureUser,cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser,cc.find(\"Canvas/UserName\"),cc.find(\"Canvas/UserPicture\"));\r\n            let usernameNode = this.node.getChildByName(\"UserName\");\r\n            let usernameString = cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser;\r\n            //显示姓名\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").showUsername(usernameString,usernameNode);\r\n        }\r\n        if(CC_WECHATGAME){\r\n            // this.node.getChildByName(\"UserName\").getComponent(cc.Label).string =cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser;\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").loadUserPictureByWx(cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").pictureUser,cc.find(\"Canvas/UserPicture\"));\r\n            let usernameNode = this.node.getChildByName(\"UserName\");\r\n            let usernameString = cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser;\r\n            //显示姓名\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").showUsername(usernameString,usernameNode);\r\n        }\r\n        this.backButton.on(\"touchstart\",function(){\r\n            cc.director.loadScene(\"Main\");\r\n        })\r\n        //加入场景预加载\r\n        cc.director.preloadScene(\"MatchUser\",function(){\r\n            self.loadMatchUserSuccess = true;\r\n        });\r\n        var self = this;\r\n        this.mask.on(\"touchstart\",function(){\r\n            \r\n            console.log(\"俄罗斯方块的x坐标是 \",self.tetirsComment.x);\r\n            var tX = Number(self.tetirsComment.x.toFixed(2));\r\n            var sX = Number(self.stoneComment.x.toFixed(2));\r\n            var pX = Number(self.puyouComment.x.toFixed(2));\r\n            var fX = Number(self.figureComment.x.toFixed(2));\r\n            console.log(\"tx is \",tX);\r\n            if(tX === 0){\r\n                console.log(\"TTTTTTTTTTTTTTTTTTTTT\");\r\n                var backA = cc.moveTo(0.4,cc.p(self.tetirsX,self.tetirsComment.y));\r\n                self.tetirsComment.runAction(backA);\r\n            }else if(sX === 0){\r\n                var backb = cc.moveTo(0.4,cc.p(self.stoneX,self.stoneComment.y));\r\n                self.stoneComment.runAction(backb);\r\n            }else if(pX === 0){\r\n                var backc = cc.moveTo(0.4,cc.p(self.puyouX,self.puyouComment.y));\r\n                self.puyouComment.runAction(backc);\r\n            }else if(fX === 0){\r\n                var backd = cc.moveTo(0.4,cc.p(self.figureX,self.figureComment.y));\r\n                self.figureComment.runAction(backd);\r\n            }\r\n            self.mask.active = false;\r\n            if(CC_WECHATGAME){\r\n                if(Global.advertisement !== null){\r\n                    //隐藏广告\r\n                    Global.advertisement.show();\r\n                }\r\n            }\r\n        }.bind(this))\r\n        cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").showAdvice(\"adunit-cba9712c1d68c59d\");\r\n    },\r\n    //点击俄罗斯方块匹配玩家\r\n    PressBlock:function(){\r\n        if(CC_WECHATGAME){\r\n            wx.showLoading({\r\n                title : '火速加载中...',\r\n                mask  : true,\r\n            })\r\n        }\r\n        if(this.loadMatchUserSuccess){\r\n            cc.director.loadScene(\"MatchUser\",function(){\r\n                if(CC_WECHATGAME){\r\n                    wx.hideLoading();\r\n                }\r\n            });\r\n        }else{\r\n            new Promise(function(resolve,reject){\r\n                cc.director.preloadScene(\"MatchUser\",function(){\r\n                    self.loadMatchUserSuccess = true;\r\n                    resolve(\"OK\");\r\n                })\r\n            }).then(function(data){\r\n                console.log(\"data is \" + data);\r\n                cc.director.loadScene(\"MatchUser\",function(){\r\n                    if(CC_WECHATGAME){\r\n                        wx.hideLoading();\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nGameType=\"1\";\r\n        cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg({\"tag1\":1,\"type\":\"1\",\"score\":cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nUserScore,\"nMapRow\":\"\",\"nMapCol\":\"\"});\r\n        // cc.director.loadScene(\"MatchUser\");\r\n    },\r\n    //点击宝石方块匹配玩家\r\n    PressStoneBlock : function(){\r\n        // if(this.loadMatchUserSuccess){\r\n        //     cc.director.loadScene(\"MatchUser\");\r\n        // }else{\r\n        //     new Promise(function(resolve,reject){\r\n        //         cc.director.preloadScene(\"MatchUser\",function(){\r\n        //             self.loadMatchUserSuccess = true;\r\n        //             resolve(\"OK\");\r\n        //         })\r\n        //     }).then(function(data){\r\n        //         console.log(\"data is \" + data);\r\n        //         cc.director.loadScene(\"MatchUser\");\r\n        //     });\r\n        // }\r\n        // cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nGameType=\"2\";\r\n        // cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg({\"tag1\":1,\"type\":\"2\",\"score\":cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nUserScore,\"nMapRow\":\"\",\"nMapCol\":\"\"});\r\n    },\r\n    //点击画像方块匹配玩家\r\n    PressFigureBlock : function(){\r\n        if(CC_WECHATGAME){\r\n            wx.showLoading({\r\n                title : '火速加载中...',\r\n                mask  : true,\r\n            })\r\n        }\r\n        if(this.loadMatchUserSuccess){\r\n            cc.director.loadScene(\"MatchUser\",function(){\r\n                if(CC_WECHATGAME){\r\n                    wx.hideLoading();\r\n                }\r\n            });\r\n        }else{\r\n            new Promise(function(resolve,reject){\r\n                cc.director.preloadScene(\"MatchUser\",function(){\r\n                    self.loadMatchUserSuccess = true;\r\n                    resolve(\"OK\");\r\n                })\r\n            }).then(function(data){\r\n                console.log(\"data is \" + data);\r\n                cc.director.loadScene(\"MatchUser\",function(){\r\n                    if(CC_WECHATGAME){\r\n                        wx.hideLoading();\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nGameType=\"4\";\r\n        cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg({\"tag1\":1,\"type\":\"4\",\"score\":cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nUserScore,\"nMapRow\":\"\",\"nMapCol\":\"\"});\r\n    },\r\n    rundomChoose : function(){\r\n        var r = Math.floor(Math.random()*2);\r\n        //随机俄罗斯方块和画像方块\r\n        if(r === 0 ){\r\n            this.PressBlock();\r\n        }else{\r\n            this.PressFigureBlock();\r\n        }\r\n    },\r\n    helpLeft : function(event,tag){\r\n        if(typeof(tag) === \"string\" && tag.length === 2){\r\n            console.log(\"进入左移菜单\");\r\n            //左边的游戏类型\r\n            var targetLeft = tag[0];\r\n            console.log(\"进入左边的游戏类型菜单是 \",targetLeft);\r\n            //当前菜单的类型\r\n            var currentMenu = tag[1];\r\n            console.log(\"进入当前的游戏类型菜单是 \",targetLeft);\r\n\r\n            this.moveMenu(currentMenu,targetLeft);\r\n        }\r\n    },\r\n    helpRight : function(event,tag){\r\n        if(typeof(tag) === \"string\" && tag.length === 2){\r\n            console.log(\"进入右移菜单\");\r\n            //当前菜单的类型\r\n            var currentMenu = tag[0];\r\n            console.log(\"进入当前的游戏类型是 \",currentMenu);\r\n            //右边菜单的类型\r\n            var targetRight = tag[1];\r\n            console.log(\"进入右边的游戏菜单类型是 \",targetRight);\r\n            this.moveMenu(currentMenu,targetRight);\r\n        }\r\n    },\r\n    moveMenu : function(currentMenu,targetMenu){\r\n        //进入moveMenu\r\n        console.log(\"进入moveMenu方法\");\r\n        switch(currentMenu){\r\n            case \"1\":\r\n                var backA = cc.moveTo(0.4,cc.p(this.tetirsX,this.tetirsComment.y));\r\n                this.tetirsComment.runAction(backA);\r\n                break;\r\n            case \"2\":\r\n                var backB = cc.moveTo(0.4,cc.p(this.stoneX,this.stoneComment.y));\r\n                this.stoneComment.runAction(backB);\r\n                break;\r\n            case \"3\":\r\n                var backC = cc.moveTo(0.4,cc.p(this.puyouX,this.puyouComment.y));\r\n                this.puyouComment.runAction(backC);\r\n                break;\r\n            case \"4\":\r\n                var backD = cc.moveTo(0.4,cc.p(this.figureX,this.figureComment.y));\r\n                this.figureComment.runAction(backD);\r\n                break;\r\n        }\r\n        //缓慢的移动到显示的位置\r\n        var moveAction = cc.moveTo(0.5,cc.p(0,0));\r\n        console.log(\"进入选择targetMenu 分支\");\r\n        switch(targetMenu){\r\n            //俄罗斯方块\r\n            case \"1\":\r\n                this.tetirsComment.runAction(moveAction);\r\n                break;\r\n            //宝石方块    \r\n            case \"2\":\r\n                this.stoneComment.runAction(moveAction);\r\n                break;\r\n            //噗哟噗哟    \r\n            case \"3\":\r\n                this.puyouComment.runAction(moveAction);\r\n                break;\r\n            //画像方块    \r\n            case \"4\":\r\n                this.figureComment.runAction(moveAction);    \r\n                break;       \r\n        }\r\n    },\r\n    help : function(){\r\n        if(CC_WECHATGAME){\r\n            if(Global.advertisement !== null){\r\n                //隐藏广告\r\n                Global.advertisement.hide();\r\n            }\r\n        }\r\n        //显示俄罗斯方块的说明\r\n        this.mask.active = true;\r\n        var moveAction = cc.moveTo(0.5,cc.p(0,0));\r\n        this.tetirsComment.runAction(moveAction);\r\n    },\r\n    //分享\r\n    share : function(){\r\n        if(CC_WECHATGAME){\r\n            console.log(\"首页share\");\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").shareFriends();\r\n        }else if(cc.sys.isNative){\r\n            //原生平台分享\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nativeShare();\r\n        }\r\n    },\r\n    start () {\r\n\r\n    },\r\n    // update (dt) {},\r\n});\r\n","var comm = require(\"./Common\");\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        continue : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        back     : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        restart  : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        mask : cc.Node,\r\n        editor : {\r\n            default : null,\r\n            executionOrder : -1,\r\n        }\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        // this.moveModel = 1;\r\n        //监听返回按钮\r\n        this.back.on(\"touchstart\",function(){\r\n            this.backFunction();\r\n        }.bind(this));\r\n        //监听继续按钮\r\n        this.continue.on(\"touchstart\",function(){\r\n            //恢复游戏主逻辑\r\n            cc.director.resume();\r\n            this.continueFunction();\r\n        }.bind(this));\r\n        //监听重新开始按钮\r\n        this.restart.on(\"touchstart\",function(event){\r\n            cc.log(\"event is \" + event);\r\n            if(event.target.parent.name === \"pause4Menu\"){\r\n                cc.director.resume();\r\n                cc.director.loadScene(\"Game4\");\r\n            }else if(event.target.parent.name === \"menu\"){\r\n                cc.director.resume();\r\n                cc.director.loadScene(\"Game3\");\r\n            }\r\n            this.restartFunction();\r\n        }.bind(this));\r\n    },\r\n    backFunction : function(){\r\n        this.node.active = false;\r\n        // cc.log(\"this.mask is \" + this.mask);\r\n        // this.mask.active = false;\r\n        // //加载选择单机的四种模式场景\r\n        // cc.director.loadScene(\"OneChoose\");\r\n    },\r\n    continueFunction : function(){\r\n        this.node.active = false;\r\n        cc.log(\"this.mask is \" + this.mask);\r\n        this.mask.active = false;\r\n    },\r\n    restartFunction : function(){\r\n        this.node.active = false;\r\n        cc.log(\"mask is \" + this.mask);\r\n        this.mask.active = false;\r\n    },\r\n    start () {\r\n\r\n    },\r\n    //移动模式一\r\n    modelOneFunction : function(){\r\n        comm.MOVEMODEL = 1;\r\n    },\r\n    //移动模式二\r\n    modelTwoFunction : function(){\r\n        comm.MOVEMODEL = 2;\r\n    },\r\n    //移动模式三\r\n    modelThreeFunction : function(){\r\n        comm.MOVEMODEL = 3;\r\n    },\r\n    update (dt) {\r\n\r\n    },\r\n});\r\n","// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        //控制背景的移动速度\r\n        nSpeed:50,\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        //获取暂停场景子节点\r\n        this.nodeChildPause=this.node.getChildren();\r\n    },\r\n    start () {\r\n\r\n    },\r\n\r\n    update (dt) {\r\n        this.nodeChildPause[0].x -=this.nSpeed;\r\n        this.nodeChildPause[1].x -=this.nSpeed;\r\n        if(this.nodeChildPause[0].x<=-1080)\r\n        {\r\n            this.nodeChildPause[0].x=1080+this.nodeChildPause[1].x;\r\n        }\r\n        if(this.nodeChildPause[1].x<=-1080)\r\n        {\r\n            this.nodeChildPause[1].x=1080+this.nodeChildPause[0].x;\r\n        }\r\n    },\r\n});\r\n","// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\nvar game1Main = require(\"./Game1Main\");\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n\r\n        // //获取地板附体\r\n        // getGroundParent:{\r\n        //     default:null,\r\n        //     type:cc.Node\r\n        // },\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad() {\r\n        \r\n        //判断玩家是否碰撞过一次\r\n        this.bCollisionOne = false;\r\n\r\n        //初始化俄罗斯方块的颜色\r\n        this.stringColor = \"\";\r\n        //初始化俄罗斯方块是否可以下落\r\n        this.isStartDown = false;\r\n        //初始化俄罗斯方块的形状\r\n        this.stringBoloekShape = \"\";\r\n        //初始化俄罗斯方块的旋转角度\r\n        this.nRotateAngle = 0;\r\n        //初始化旋转次数\r\n        // this.nRotate=0;\r\n        //初始化物体下落计时器\r\n        this.fDownTime = 0;\r\n        //判断下落方块是否固定\r\n        this.isStationary = false;\r\n        //初始化物体触底，触碰方块计时器\r\n        this.fCollisionTime = 0;\r\n        //判断物体是否和底部或 方块触碰\r\n        this.isCollision = false;\r\n        //判断俄罗斯方块最低点物体的下面是否有方块或者触碰底部\r\n        this.isHasBox = false;\r\n        //判断是否改变父体结束\r\n        this.isChangeParent = false;\r\n        // //判断俄罗斯方块是否有一个方块进入游戏场景\r\n        // this.isJoin=false;\r\n        //初始化方块下面为false的方块个数\r\n        this.nBox = 0;\r\n        //初始化游戏结束\r\n        this.isGameOver = false;\r\n        //判断在四次for循环中是否下落过一次\r\n        this.isDown = false;\r\n        //判断俄罗斯方块是否显示完全\r\n        this.isShow = false;\r\n        //  cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        //判断俄罗斯方块是否下落改变状态\r\n        this.isDownState = false;\r\n        //初始化俄罗斯方块第一次碰撞后的帧数\r\n        this.nUpdate = 0;\r\n        this.isOver = false;\r\n    },\r\n    start() {\r\n        console.log(\"game1Main is \",game1Main.prototype.showNoticeHelp);\r\n    },\r\n    //计算方块下面为false的方块的个数\r\n    AddBoxNumber: function (a, b) {\r\n        if (Global.game1Main.groundChild[a - 1][b - 2].getComponent(\"PrefabState\").isBox == false) {\r\n            this.nBox++;\r\n        }\r\n        else {\r\n            if (b-2 == 19) {\r\n                cc.log(\"0-------------------------------------\");\r\n                this.isGameOver = true;\r\n                this.isOver = true;\r\n                return;\r\n            }\r\n        }\r\n    },\r\n    onKeyUp: function (event) {\r\n        switch (event.keyCode) {\r\n            case cc.KEY.a:\r\n                console.log('release a key');\r\n                break;\r\n            case cc.KEY.d:\r\n                break;\r\n            case cc.KEY.s:\r\n                break;\r\n        }\r\n    },\r\n    //下落物体并将物体的false置为true\r\n    DownBlock: function () {\r\n        if (this.isDown == false) {\r\n            //存取俄罗斯方块的行数\r\n            var nArrayRow = [];\r\n            //存取俄罗斯方块的列数\r\n            var nArrayList = [];\r\n            //获取节点子节点数组\r\n            var blockChild = this.node.getChildren();\r\n            this.arrayChangeNode = [];\r\n            for (var i = 0; i <= 3; i++) {\r\n                //获取此时组成俄罗斯方块元素的行列\r\n                var nX = (blockChild[i].getPositionX() + this.node.getPositionX() - this.node.parent.parent.getChildByName(\"GroundParent\").getPositionX()) / Global.nWidth + 1;\r\n                var nY = (blockChild[i].getPositionY() + this.node.getPositionY() - this.node.parent.parent.getChildByName(\"GroundParent\").getPositionY()) / Global.nWidth + 1;\r\n                nArrayList.push(nX);\r\n                nArrayRow.push(nY);\r\n                //   this.blockChild[i].y -=65;\r\n                //获取下落后的行列\r\n                if (i == 3) {\r\n                    //从小到大排序行数\r\n                    for (var j = 0; j <= 3; j++) {\r\n                        if (j <= 2) {\r\n                            for (var k = j + 1; k <= 3; k++) {\r\n                                if (nArrayRow[k] < nArrayRow[j]) {\r\n                                    var nOldY = nArrayRow[j];\r\n                                    nArrayRow[j] = nArrayRow[k];\r\n                                    nArrayRow[k] = nOldY;\r\n                                    var nOldX = nArrayList[j];\r\n                                    nArrayList[j] = nArrayList[k];\r\n                                    nArrayList[k] = nOldX;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    for (var l = 0; l <= 3; l++) {\r\n                        if (nArrayRow[l] == 21) {\r\n                            this.arrayChangeNode.push({ \"row\": nArrayRow[l] - 2, \"col\": nArrayList[l] - 1, \"color\": this.stringColor });\r\n                            // Global.game1Main.groundChild[nArrayList[l] - 1][nArrayRow[l] - 2].getComponent(\"PrefabState\").isBox = true;\r\n                            // Global.game1Main.groundChild[nArrayList[l] - 1][nArrayRow[l] - 2].getComponent(\"PrefabState\").stringColor = this.stringColor;\r\n                        }\r\n                        else {\r\n                            if (nArrayRow[0] == 1) {\r\n                                this.arrayChangeNode.push({ \"row\": nArrayRow[l] - 1, \"col\": nArrayList[l] - 1, \"color\": \"white\" });\r\n                                // Global.game1Main.groundChild[nArrayList[l] - 1][nArrayRow[l] - 1].getComponent(\"PrefabState\").isBox = false;\r\n                                this.arrayChangeNode.push({ \"row\": nArrayRow[l] - 2, \"col\": nArrayList[l] - 1, \"color\": this.stringColor });\r\n                                // Global.game1Main.groundChild[nArrayList[l] - 1][nArrayRow[l] - 1].getComponent(\"PrefabState\").isBox = true;\r\n                                Global.game1Main.groundChild[nArrayList[l] - 1][nArrayRow[l] - 1].getComponent(\"PrefabState\").stringColor = this.stringColor;\r\n                                this.isCollision = true;\r\n                        \r\n                                cc.log(\"ssssssssssssssssssssssssssssssssssssssssssssss\");\r\n                              \r\n                            }\r\n                            else {\r\n                                this.arrayChangeNode.push({ \"row\": nArrayRow[l] - 1, \"col\": nArrayList[l] - 1, \"color\": \"white\" });\r\n                                // Global.game1Main.groundChild[nArrayList[l] - 1][nArrayRow[l] - 1].getComponent(\"PrefabState\").isBox = false;\r\n                                this.arrayChangeNode.push({ \"row\": nArrayRow[l] - 2, \"col\": nArrayList[l] - 1, \"color\": this.stringColor });\r\n                                // Global.game1Main.groundChild[nArrayList[l] - 1][nArrayRow[l] - 2].getComponent(\"PrefabState\").isBox = true;\r\n                                // Global.game1Main.groundChild[nArrayList[l] - 1][nArrayRow[l] - 2].getComponent(\"PrefabState\").stringColor = this.stringColor;\r\n                            }\r\n                        }\r\n                    }\r\n                    this.node.y -= Global.nWidth;\r\n                    this.isDownState = true;\r\n                }\r\n            }\r\n        }\r\n        this.isDown = true;\r\n    },\r\n    //遍历数组并将方格的属性置为true\r\n    TravelOnloda:function(){\r\n        var blockChild = this.node.getChildren();\r\n        //  //判断俄罗斯方块是否结束地面\r\n        //  var isCollisionGround=false;\r\n        for (var i = 0; i <= 3; i++) {\r\n            var nY = (blockChild[i].getPositionY() + this.node.getPositionY() - this.node.parent.parent.getChildByName(\"GroundParent\").getPositionY()) / Global.nWidth + 1;\r\n            var nX=(blockChild[i].getPositionX() + this.node.getPositionX() - this.node.parent.parent.getChildByName(\"GroundParent\").getPositionX()) / Global.nWidth + 1;\r\n            Global.game1Main.groundChild[nX-1][nY-1].getComponent(\"PrefabState\").isBox=true;\r\n            Global.game1Main.groundChild[nX-1][nY-1].getComponent(\"PrefabState\").stringColor=this.stringColor;\r\n        }\r\n    },\r\n    //根据形状判断俄罗斯方块下落时是否可以下落\r\n    GetShape: function (stringBlock, nArray, nx, ny, nRotate1) {\r\n        //判断下落快中是否有行数大于20行的\r\n        if (ny > 20) {\r\n            this.isOver = true;\r\n        }\r\n        switch (stringBlock) {\r\n            case \"L\":\r\n                if (nRotate1 == 0 || nRotate1 == 360) {\r\n                    switch (nArray) {\r\n                        case 0:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 1:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 2:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                    }\r\n\r\n                    if (this.nBox == 3) {\r\n                        this.DownBlock();\r\n                    }\r\n                    else {\r\n                        if (nArray == 3) {\r\n                            if (this.isOver) {\r\n                                //  this.isGameOver=true;\r\n                            }\r\n                          \r\n                            this.isCollision = true;\r\n                            //初始化触碰1秒计时\r\n                            this.fCollisionTime = 0;\r\n                        }\r\n                    }\r\n                }\r\n                else if (nRotate1 == 90) {\r\n                    switch (nArray) {\r\n                        case 0:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 3:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                    }\r\n\r\n                    if (this.nBox == 2) {\r\n                        this.DownBlock();\r\n                    }\r\n                    else {\r\n                        if (nArray == 3) {\r\n                            if (this.isOver) {\r\n                                // this.isGameOver=true;\r\n                            }\r\n                         \r\n                            this.isCollision = true;\r\n                            //初始化触碰1秒计时\r\n                            this.fCollisionTime = 0;\r\n                        }\r\n                    }\r\n\r\n                }\r\n                else if (nRotate1 == 180) {\r\n                    switch (nArray) {\r\n                        case 0:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 1:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 3:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                    }\r\n\r\n                    if (this.nBox == 3) {\r\n                        this.DownBlock();\r\n                    }\r\n                    else {\r\n                        if (nArray == 3) {\r\n                            if (this.isOver) {\r\n                                // this.isGameOver=true;\r\n                            }\r\n                      \r\n                            this.isCollision = true;\r\n                            //初始化触碰1秒计时\r\n                            this.fCollisionTime = 0;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    switch (nArray) {\r\n                        case 2:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 3:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                    }\r\n\r\n                    if (this.nBox == 2) {\r\n                        this.DownBlock();\r\n                    }\r\n                    else {\r\n                        if (nArray == 3) {\r\n                            if (this.isOver) {\r\n                                // this.isGameOver=true;\r\n                            }\r\n                       \r\n                            this.isCollision = true;\r\n                            //初始化触碰1秒计时\r\n                            this.fCollisionTime = 0;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case \"Long\":\r\n                if (nRotate1 == 0 || nRotate1 == 360) {\r\n                    switch (nArray) {\r\n                        case 0:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 1:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 2:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break; ``\r\n                        case 3:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                    }\r\n                    if (this.nBox == 4) {\r\n                        this.DownBlock();\r\n\r\n                    }\r\n                    else {\r\n                        if (nArray == 3) {\r\n                            if (this.isOver) {\r\n                                // this.isGameOver=true;\r\n                            }\r\n                        \r\n                            this.isCollision = true;\r\n                            //初始化触碰1秒计时\r\n                            this.fCollisionTime = 0;\r\n                        }\r\n                    }\r\n                }\r\n                else if (nRotate1 == 90) {\r\n                    if (nArray == 3) {\r\n                        cc.log(nArray);\r\n                        this.AddBoxNumber(nx, ny);\r\n                    }\r\n                    if (this.nBox == 1) {\r\n                        this.DownBlock();\r\n                    }\r\n                    else {\r\n                        if (nArray == 3) {\r\n                            if (this.isOver) {\r\n                                // this.isGameOver=true;\r\n                            }\r\n                     \r\n                            this.isCollision = true;\r\n                            //初始化触碰1秒计时\r\n                            this.fCollisionTime = 0;\r\n                        }\r\n                    }\r\n\r\n                }\r\n                else if (nRotate1 == 180) {\r\n                    switch (nArray) {\r\n                        case 0:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 1:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 2:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 3:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                    }\r\n                    if (this.nBox == 4) {\r\n                        this.DownBlock();\r\n\r\n                    }\r\n                    else {\r\n                        if (nArray == 3) {\r\n                            if (this.isOver) {\r\n                                // this.isGameOver=true;\r\n                            }\r\n                        \r\n                            this.isCollision = true;\r\n                            //初始化触碰1秒计时\r\n                            this.fCollisionTime = 0;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if (nArray == 0) {\r\n                        cc.log(nArray);\r\n                        this.AddBoxNumber(nx, ny);\r\n                    }\r\n                    if (this.nBox == 1) {\r\n                        this.DownBlock();\r\n                    }\r\n                    else {\r\n                        if (nArray == 3) {\r\n                            if (this.isOver) {\r\n                                // this.isGameOver=true;\r\n                            }\r\n                     \r\n                            this.isCollision = true;\r\n                            //初始化触碰1秒计时\r\n                            this.fCollisionTime = 0;\r\n                        }\r\n                    }\r\n\r\n                }\r\n                break;\r\n            case \"Square\":\r\n                switch (nArray) {\r\n                    case 0:\r\n                        cc.log(nArray);\r\n                        this.AddBoxNumber(nx, ny);\r\n                        break;\r\n                    case 1:\r\n                        cc.log(nArray);\r\n                        this.AddBoxNumber(nx, ny);\r\n                        break;\r\n                }\r\n                if (this.nBox == 2) {\r\n                    this.DownBlock();\r\n                }\r\n                else {\r\n                    if (nArray == 3) {\r\n                        if (this.isOver) {\r\n                            // this.isGameOver=true;\r\n                        }\r\n                    \r\n                        this.isCollision = true;\r\n                        //初始化触碰1秒计时\r\n                        this.fCollisionTime = 0;\r\n                    }\r\n                }\r\n                break;\r\n            case \"T\":\r\n                if (nRotate1 == 0 || nRotate1 == 360) {\r\n                    switch (nArray) {\r\n                        case 0:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 2:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 3:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n\r\n                    }\r\n\r\n                    if (this.nBox == 3) {\r\n                        this.DownBlock();\r\n                    }\r\n                    else {\r\n                        if (nArray == 3) {\r\n                            if (this.isOver) {\r\n                                // this.isGameOver=true;\r\n                            }\r\n                         \r\n                            this.isCollision = true;\r\n                            //初始化触碰1秒计时\r\n                            this.fCollisionTime = 0;\r\n                        }\r\n                    }\r\n                }\r\n                else if (nRotate1 == 90) {\r\n                    switch (nArray) {\r\n                        case 2:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 3:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                    }\r\n\r\n                    if (this.nBox == 2) {\r\n\r\n                        this.DownBlock();\r\n                    }\r\n                    else {\r\n                        if (nArray == 3) {\r\n                            if (this.isOver) {\r\n                                // this.isGameOver=true;\r\n                            }\r\n                         \r\n                            this.isCollision = true;\r\n                            //初始化触碰1秒计时\r\n                            this.fCollisionTime = 0;\r\n                        }\r\n                    }\r\n\r\n                }\r\n                else if (nRotate1 == 180) {\r\n                    switch (nArray) {\r\n                        case 0:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 1:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 3:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                    }\r\n\r\n                    if (this.nBox == 3) {\r\n                        this.DownBlock();\r\n                    }\r\n                    else {\r\n                        if (nArray == 3) {\r\n                            if (this.isOver) {\r\n                                // this.isGameOver=true;\r\n                            }\r\n                       \r\n                            this.isCollision = true;\r\n                            //初始化触碰1秒计时\r\n                            this.fCollisionTime = 0;\r\n                        }\r\n                    }\r\n\r\n                }\r\n                else {\r\n                    switch (nArray) {\r\n                        case 0:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 2:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                    }\r\n\r\n                    if (this.nBox == 2) {\r\n                        this.DownBlock();\r\n                    }\r\n                    else {\r\n                        if (nArray == 3) {\r\n                            if (this.isOver) {\r\n                                // this.isGameOver=true;\r\n                            }\r\n                       \r\n                            this.isCollision = true;\r\n                            //初始化触碰1秒计时\r\n                            this.fCollisionTime = 0;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case \"Z\":\r\n                if (nRotate1 == 0 || nRotate1 == 360) {\r\n                    switch (nArray) {\r\n                        case 0:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 2:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 3:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                    }\r\n                    if (this.nBox == 3) {\r\n                        this.DownBlock();\r\n                    }\r\n                    else {\r\n                        if (nArray == 3) {\r\n                            if (this.isOver) {\r\n                                // this.isGameOver=true;\r\n                            }\r\n                          \r\n                            this.isCollision = true;\r\n                            //初始化触碰1秒计时\r\n                            this.fCollisionTime = 0;\r\n                        }\r\n                    }\r\n                }\r\n                else if (nRotate1 == 90) {\r\n                    switch (nArray) {\r\n                        case 1:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 3:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                    }\r\n                    if (this.nBox == 2) {\r\n                        this.DownBlock();\r\n                    }\r\n                    else {\r\n\r\n                        if (nArray == 3) {\r\n                            if (this.isOver) {\r\n                                // this.isGameOver=true;\r\n                            }\r\n                        \r\n                            this.isCollision = true;\r\n                            //初始化触碰1秒计时\r\n                            this.fCollisionTime = 0;\r\n                        }\r\n                    }\r\n\r\n                }\r\n                else if (nRotate1 == 180) {\r\n                    switch (nArray) {\r\n                        case 0:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 1:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 3:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                    }\r\n                    if (this.nBox == 3){\r\n                        this.DownBlock();\r\n                    }\r\n                    else {\r\n                        if (nArray == 3) {\r\n                            if (this.isOver) {\r\n                                // this.isGameOver=true;\r\n                            }\r\n                            this.isCollision = true;\r\n                            //初始化触碰1秒计时\r\n                            this.fCollisionTime = 0;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    switch (nArray) {\r\n                        case 0:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 2:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                    }\r\n                    if (this.nBox == 2) {\r\n                        this.DownBlock();\r\n                    }\r\n                    else {\r\n                        if (nArray == 3) {\r\n                            if (this.isOver) {\r\n                                // this.isGameOver=true;\r\n                            }\r\n                          \r\n                            this.isCollision = true;\r\n                            //初始化触碰1秒计时\r\n                            this.fCollisionTime = 0;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    },\r\n    //俄罗斯方块下落\r\n    BlockDown: function () {\r\n        console.log(\"生成方块立即下落时候父节点是：\",this.node.parent);\r\n        console.log(\"生成方块立即下落时候父节点的显隐状态：\",this.node.parent.active);\r\n        //判断俄罗斯方块是否移动过一次\r\n        var isMove = true;\r\n        //获取节点子节点数组\r\n        var blockChild = this.node.getChildren();\r\n        //  //判断俄罗斯方块是否结束地面\r\n        //  var isCollisionGround=false;\r\n        //判断俄罗斯方块中是否含有22行\r\n        for (var i = 0; i <= 3; i++) {\r\n            var nY = (blockChild[i].getPositionY() + this.node.getPositionY() - this.node.parent.parent.getChildByName(\"GroundParent\").getPositionY()) / Global.nWidth + 1;\r\n            console.log(\"下落的块的行数\",nY);\r\n            if (nY == 22) {\r\n                isMove = false;\r\n            }\r\n        }\r\n        if (!isMove) {\r\n            //初始化俄罗斯方块中第21行方块的数组下表\r\n            var nBoxArray = [];\r\n            //初始化俄罗斯方块中第21行方块的数组列\r\n            var nXArray = [];\r\n            //初始化俄罗斯方块中第21行方块的数组行\r\n            var nYArray = [];\r\n            //遍历俄罗斯方块并并判断第21行的下面是否为true\r\n            for (var i = 0; i <= 3; i++) {\r\n                //获取此时组成俄罗斯方块元素的行列\r\n                var nX = (blockChild[i].getPositionX() + this.node.getPositionX() - this.node.parent.parent.getChildByName(\"GroundParent\").getPositionX()) / Global.nWidth + 1;\r\n                var nY = (blockChild[i].getPositionY() + this.node.getPositionY() - this.node.parent.parent.getChildByName(\"GroundParent\").getPositionY()) / Global.nWidth + 1;\r\n                cc.log(nX);\r\n                cc.log(nY);\r\n                if (nY == 21) {\r\n                    if (Global.game1Main.groundChild[nX - 1][nY - 2].getComponent(\"PrefabState\").isBox) {\r\n                        cc.log(\"BlockDown\"+nY);\r\n                        cc.log();\r\n                        this.isGameOver = true;\r\n                        return;\r\n                    }\r\n                    else {\r\n                        nBoxArray.push(i);\r\n                        nXArray.push(nX);\r\n                        nYArray.push(nY);\r\n                    }\r\n                    console.log(\"nBoxArray is \",nBoxArray);\r\n                    console.log(\"nXArray is \",nXArray);\r\n                    console.log(\"nYArray is \",nYArray);\r\n                }\r\n                if (i == 3 && this.isGameOver == false) {\r\n                    //初始化变化方块数组\r\n                    this.arrayChangeNode = [];\r\n                    this.node.y -= Global.nWidth;\r\n                    if (nBoxArray.length >= 2) {\r\n                        for (var j = 0; j <= nBoxArray.length - 1; j++) {\r\n                            // Global.game1Main.groundChild[nXArray[j] - 1][nYArray[j] - 2].getComponent(\"PrefabState\").stringColor = this.stringColor;\r\n                            // Global.game1Main.groundChild[nXArray[j] - 1][nYArray[j] - 2].getComponent(\"PrefabState\").isBox = true;\r\n                            this.arrayChangeNode.push({ \"row\": nYArray[j] - 2, \"col\": nXArray[j] - 1, \"color\": this.stringColor });\r\n                        }\r\n                    }\r\n                    if (nBoxArray.length == 1) {\r\n                        cc.log(nXArray[0] - 1);\r\n                        cc.log(nYArray[0] - 2);\r\n                        cc.log(Global.game1Main.groundChild[nXArray[0] - 1][nYArray[0] - 2].getComponent(\"PrefabState\").stringColor);\r\n                        // Global.game1Main.groundChild[nXArray[0] - 1][nYArray[0] - 2].getComponent(\"PrefabState\").isBox = true;\r\n                        this.arrayChangeNode.push({ \"row\": nYArray[0] - 2, \"col\": nXArray[0] - 1, \"color\": this.stringColor });\r\n                    }\r\n                    //初始化计时器\r\n                    this.fDownTime = 0;\r\n                    this.isDownState = true;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            console.log(\"该预制体节点的父节点是：\",this.node.parent.active);\r\n            console.log(\"该预制体节点的父节点的显隐状态是：\",this.node.parent.active);\r\n            //     //获取此时组成俄罗斯方块元素的行列\r\n            //    var nX=(blockChild[i].getPositionX()+this.node.getPositionX()-cc.find(\"GroundParent\").getPositionX())/65+1;\r\n            //    var nY=(blockChild[i].getPositionY()+this.node.getPositionY()-cc.find(\"GroundParent\").getPositionY())/65+1; \r\n            //存取俄罗斯方块的行数\r\n            var nArrayRow = [];\r\n            //存取俄罗斯方块的列数\r\n            var nArrayList = [];\r\n            //将俄罗斯方块的行列存入数组中\r\n            for (var i = 0; i <= 3; i++) {\r\n                //获取此时组成俄罗斯方块元素的行列\r\n                var nX = (blockChild[i].getPositionX() + this.node.getPositionX() - this.node.parent.parent.getChildByName(\"GroundParent\").getPositionX()) / Global.nWidth + 1;\r\n                var nY = (blockChild[i].getPositionY() + this.node.getPositionY() - this.node.parent.parent.getChildByName(\"GroundParent\").getPositionY()) / Global.nWidth + 1;\r\n                nArrayList.push(nX);\r\n                nArrayRow.push(nY);\r\n            }\r\n            //从小到大排序行数\r\n            for (var j = 0; j <= 3; j++) {\r\n                if (j <= 2) {\r\n                    for (var k = j + 1; k <= 3; k++) {\r\n                        if (nArrayRow[k] < nArrayRow[j]) {\r\n                            var nOldY = nArrayRow[j];\r\n                            nArrayRow[j] = nArrayRow[k];\r\n                            nArrayRow[k] = nOldY;\r\n                            var nOldX = nArrayList[j];\r\n                            nArrayList[j] = nArrayList[k];\r\n                            nArrayList[k] = nOldX;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            //    if(Global.game1Main.groundChild[nArrayList[0]-1][nArrayRow[0]-2].getComponent(\"PrefabState\").isBox&&nArrayRow[3]>20)\r\n            //    {\r\n            //        this.isGameOver=true;\r\n            //    }\r\n            if (this.isGameOver == false) {\r\n                if (nArrayRow[0] == 1) {\r\n                    cc.log(\"==========================================================================\");\r\n                   \r\n                    //    this.fCollisionTime=0;\r\n                    this.isCollision = true;\r\n                    console.log(\"方块触底，方块的显隐状态是：\",this.node.active);\r\n                    return;\r\n                }\r\n                else {\r\n                    this.isOver = false;\r\n                    for (var i = 0; i <= 3; i++) {\r\n                        if (this.isGameOver) {\r\n                            return;\r\n                        }\r\n                        //获取此时组成俄罗斯方块元素的行列\r\n                        var nX = (blockChild[i].getPositionX() + this.node.getPositionX() - this.node.parent.parent.getChildByName(\"GroundParent\").getPositionX()) / Global.nWidth + 1;\r\n                        var nY = (blockChild[i].getPositionY() + this.node.getPositionY() - this.node.parent.parent.getChildByName(\"GroundParent\").getPositionY()) / Global.nWidth + 1;\r\n                        if (i == 0) {\r\n                            this.nBox = 0;\r\n                            this.isDown = false;\r\n                        }\r\n                        this.GetShape(this.stringBoloekShape, i, nX, nY, this.nRotateAngle);\r\n                        if (i == 3) {\r\n                            this.fDownTime = 0;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    //遍历全局字块数组并消除整行方块isBox都为true的节点\r\n    TraversalNodeBox: function (nPositionY) {\r\n        // var boxParent1=this.boxParent.getChildren();\r\n        var nLength = this.boxParent1.length;\r\n        //存储被销毁的俄罗斯方块数组的下标\r\n        var nDestroy = [];\r\n        cc.log(nPositionY + \"nPositionY\");\r\n        for (var j = 0; j <= nLength - 1; j++) {\r\n            cc.log(this.boxParent1[j].getPositionY());\r\n        }\r\n        //    cc.log(boxParent1[0].getPositionY());\r\n        //    cc.log(nPositionY);\r\n        for (var i = 0; i <= nLength - 1; i++) {\r\n            // var boxParent1=this.boxParent.getChildren();\r\n            if (this.boxParent1[i].getPositionY() == nPositionY) {\r\n                //销毁该俄罗斯方块自方块\r\n                this.boxParent1[i].destroy();\r\n            }\r\n        }\r\n    },\r\n    update(dt) {\r\n        if(Global.startWar){\r\n            if (this.isShow == false && this.isStartDown && this.isGameOver == false) {\r\n                //获取节点子节点数组\r\n                var blockChild = this.node.getChildren();\r\n                var isActive = false;\r\n                for (var i = 0; i <= 3; i++) {\r\n                    var nY = (blockChild[i].getPositionY() + this.node.getPositionY() - this.node.parent.parent.getChildByName(\"GroundParent\").getPositionY()) / Global.nWidth + 1;\r\n                    if (nY == 22 || nY == 21) {\r\n                        isActive = true;\r\n                        blockChild[i].active = false;\r\n                    }\r\n                    else {\r\n                        blockChild[i].active = true;\r\n                    }\r\n                    if (i == 3 && isActive == false) {\r\n                        this.isShow = true;\r\n                    }\r\n                }\r\n            }\r\n            if (this.isStartDown && this.isGameOver == false) {\r\n                //物体下落,开始计时\r\n                this.fDownTime += dt;\r\n                if (this.fDownTime >= Global.nTimeInteval && this.isStationary == false) {\r\n                    //  cc.log(this.stringBoloekShape);\r\n                    //  cc.log(this.nRotateAngle);\r\n                    this.BlockDown();\r\n                }\r\n                if (this.isCollision && this.isGameOver == false) {\r\n                    var blockChild = this.node.getChildren();\r\n                    //判断俄罗斯方块中是否有大于20行的\r\n                    for (var i = 0; i <= 3; i++) {\r\n                        var nY = (blockChild[i].getPositionY() + this.node.getPositionY() - this.node.parent.parent.getChildByName(\"GroundParent\").getPositionY()) / Global.nWidth + 1;\r\n                        if (nY>20) {\r\n                            //看完视频\r\n                            // if(Global.videoAdIsClick){\r\n                            //     this.isGameOver = false;\r\n                            //     Global.videoAdIsClick = null;\r\n                            // }else if(Global.videoAdIsClick !== null){\r\n                            //     this.isGameOver=true;\r\n                            // }\r\n                            this.isGameOver = true;\r\n                            this.isOver = true;\r\n                            return;\r\n                        }\r\n                    }\r\n                    this.TravelOnloda();\r\n                    this.isStationary = true;\r\n                    this.isCollision = false;\r\n                }\r\n            }\r\n        }\r\n    },\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        levelLabel : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        scoreLabel : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        }\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        if(this.node.name === \"over4\"){\r\n            //表示是第四个游戏结束了\r\n            // game4.prototype.over();\r\n            //显示分数\r\n\r\n        }else if(this.node.name === \"over3\"){\r\n            // game4.prototype.over();\r\n        }\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\nconst Game3 = require(\"../game3/game\")\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        nodeCanvas: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        //生成敌人背景的预制体\r\n        prefabEnemy: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        //敌人预制体数组\r\n        prefabEnemy1:{\r\n            default:[],\r\n            type:[cc.Prefab]\r\n        },\r\n        \r\n        username : cc.Label,\r\n        //敌人父体节点\r\n        nodeEnemyParent: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        //生成自己背景的预制体\r\n        prefabUser: {\r\n            default: null,\r\n            type: cc.Prefab,\r\n        },\r\n        nodeUserParent: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        //获取自己背景框节点\r\n        groundUser: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        //获取敌人背景框节点\r\n        groundEnemy: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        //获取L形状方块预制体\r\n        prefabL: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        //获取正方形方块预制体\r\n        prefabSquare: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        //获取Z形状方块预制体\r\n        prefabZ: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        }, //获取长条形状方块预制体\r\n        prefabLong: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        //获取T形状方块预制体\r\n        prefabT: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        next1Node: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        blockParent: {\r\n            default: null,\r\n            type: cc.Node\r\n        }\r\n        ,\r\n        nodeDownButton: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        nodeMove: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        boxParent: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        punishPrefab: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        //结束场景\r\n        overBackGround:{\r\n            default:null,\r\n            type:cc.Node\r\n        },\r\n        //点击事件音效\r\n        clickAudio : {\r\n            url : cc.AudioClip,\r\n            default: null,\r\n        },\r\n        //失败音效\r\n        loseAudio : {\r\n            url : cc.AudioClip,\r\n            default  : null,\r\n        },\r\n        //消除音效\r\n        removeAudio : {\r\n            url : cc.AudioClip,\r\n            default : null,\r\n        },\r\n        //暂停界面\r\n        pauseMenu : cc.Node,\r\n        pauseRestart : cc.Node,\r\n        pauseReturn : cc.Node,\r\n        pauseGiveIn : cc.Node,\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n        //黑色背景\r\n        darkNode        : cc.Node,\r\n        //notice\r\n        noticeDark      : cc.Node,\r\n        operationNode   : cc.Node,\r\n        //用户名节点\r\n        usernameNode    : cc.Node,\r\n        //用户头像节点\r\n        userPictureNode : cc.Node,\r\n        //提示框\r\n        noticePrefab    : cc.Prefab,\r\n        //用户分数\r\n        userScore       : cc.Node,\r\n        //游戏结束失败节点\r\n        overNodeLose    : cc.Node,\r\n    },\r\n    pauseFunction : function(){\r\n        //显示暂停菜单\r\n        this.pauseMenu.active = true;\r\n    },\r\n    // LIFE-CYCLE CALLBACKS:\r\n    onLoad() {\r\n        if(Global.advertisement !== null){\r\n            //隐藏广告\r\n            Global.advertisement.hide();\r\n        }\r\n        var self = this;\r\n        this.showNoticeHelp = true;\r\n        this.noticeBlock = Game3.prototype.setPrefabPosition.call(self,self.noticePrefab,0,0,self.node);\r\n        console.log(\"提示按钮是：\",this.noticeBlock);\r\n        console.log(\"this is \",this);\r\n        this.noticeBlock.active = true;\r\n        this.noticeBlock.on(\"touchstart\",function(){\r\n            this.noticeDark.active = false;\r\n            this.operationNode.active = false;\r\n            this.showNoticeHelp = false;\r\n            this.noticeBlock.active = false;\r\n            Global.startWar = true;\r\n        }.bind(this));\r\n        this.noticeDark.on(\"touchstart\",function(){\r\n            this.noticeDark.active = false;\r\n            this.operationNode.active = false;\r\n            this.showNoticeHelp = false;\r\n            this.noticeBlock.active = false;\r\n            Global.startWar = true;\r\n        }.bind(this));\r\n        this.operationNode.on(\"touchstart\",function(){\r\n            this.noticeDark.active =false;\r\n            this.operationNode.active = false;\r\n            this.showNoticeHelp = false;\r\n            this.noticeBlock.active = false;\r\n            Global.startWar = true;\r\n        }.bind(this));\r\n        this.pauseMenu.active = false;\r\n        this.nLine = 0;\r\n        //发送给服务器消息要初始化地图\r\n        cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg({ \"tag1\": 10, \"type\": \"\", \"score\": cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nUserScore, \"nMapRow\": \"\", \"nMapCol\": \"\", \"loading1\": 1 });\r\n        // // Global.CreatBackGround(this.groundChild,12,6,this.groundPrefab,this.nodeUserParent,Global.nWidthPuYo);\r\n        //显示自己的名字\r\n        // this.username.string = cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser;\r\n        cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").showUsername(cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser,this.usernameNode);\r\n        //初始化自己背景父节点的位置\r\n        Global.SetBackground(this.groundUser, this.nodeUserParent, Global.nWidth, Global.nSide);\r\n        //初始化敌人背景父节点的位置\r\n        Global.SetBackground(this.groundEnemy, this.nodeEnemyParent, Global.nServerWidth, Global.nSide);\r\n        //初始h背景子节点\r\n        this.groundChild = [];\r\n        //显示自己的游戏背景\r\n        Global.CreatBackGround(this.groundChild, 20, 10, this.prefabUser, this.nodeUserParent, Global.nWidth);\r\n        //初始化d敌人背景子节点\r\n        this.enemyGroundChild = [];\r\n        this.arrayChangeNode = [];\r\n        //判断敌人是否消行\r\n        this.isDisppearEnemy = false;\r\n        //判断是否旋转状态\r\n        this.isRotateState = false;\r\n        //判断是否左右移动状态\r\n        this.isMoveState = false;\r\n        //判断敌人是否消除\r\n        this.isDisppearState = false;\r\n        this.girdSize = 50;\r\n        this.isOver=false;\r\n        //判断是否惩罚\r\n        this.isPunish = false;\r\n        //判断玩家是否胜利\r\n        this.isWin=false;\r\n        if (cc.sys.isNative) {\r\n            var self = this;\r\n            //判断手指是否离开滑动节点\r\n            //获取出点的世界坐标\r\n            this.positionTouchX = 0;\r\n            this.isOutSlide = true;\r\n            //判断手指是否离开下落节点\r\n            this.isOutDown = true;\r\n                 //显示用户信息\r\n              cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").LoadUser(cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").pictureUser,cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser,this.usernameNode,this.userPictureNode);\r\n            \r\n              //  //旋转触屏\r\n            //  this.nodeRotateButton.on(cc.Node.EventType.TOUCH_START, function (event) {\r\n\r\n            //      self.rotateBlock();\r\n            //   }, this);\r\n            //下落触屏 \r\n            //当手指落在下落节点上时\r\n            this.nodeDownButton.on(cc.Node.EventType.TOUCH_START, function (event) {\r\n                self.isOutDown = false;\r\n            }, this);\r\n            //当手指离开下落节点上时\r\n            this.nodeDownButton.on(cc.Node.EventType.TOUCH_END, function (event) {\r\n                self.isOutDown = true;\r\n            }, this);\r\n            //左右滑动触屏\r\n            //当手指落在滑动节点上时\r\n            this.nodeMove.on(cc.Node.EventType.TOUCH_START, function (event) {\r\n                self.isOutSlide = false;\r\n                self.positionTouchX = event.getLocationX();\r\n\r\n            }, this);\r\n            //当手指在滑动节点上移动时\r\n            this.nodeMove.on(cc.Node.EventType.TOUCH_MOVE, function (event) {\r\n                self.isOutSlide = false;\r\n                self.positionTouchX = event.getLocationX();\r\n            }, this);\r\n            //当手指离开滑动节点时\r\n            this.nodeMove.on(cc.Node.EventType.TOUCH_END, function (event) {\r\n                self.isOutSlide = true;\r\n            }, this);\r\n        }\r\n        else {\r\n            //获取出点的世界坐标\r\n            this.positionTouchX = 0;\r\n            //判断手指是否离开滑动节点\r\n            this.isOutSlide = true;\r\n            //判断手指是否落在滑动节点\r\n            this.isOutDown = true;\r\n            //当手指落在滑动节点上时\r\n            this.nodeMove.on(cc.Node.EventType.TOUCH_START, function (event) {\r\n               \r\n\r\n            }, this);\r\n            //当手指在滑动节点上移动时\r\n            this.nodeMove.on(cc.Node.EventType.TOUCH_MOVE, function (event) {\r\n                self.isOutSlide = false;\r\n                self.positionTouchX = event.getLocationX();\r\n            }, this);\r\n            //当手指离开滑动节点时\r\n            this.nodeMove.on(cc.Node.EventType.TOUCH_END, function (event) {\r\n                self.isOutSlide = false;\r\n                self.positionTouchX = event.getLocationX();\r\n            }, this);\r\n            this.nodeMove.on(cc.Node.EventType.TOUCH_CANCEL, function (event) {\r\n                self.isOutSlide = false;\r\n                self.positionTouchX = event.getLocationX();\r\n            }, this);\r\n            //当手指落在下落节点上时\r\n            this.nodeDownButton.on(cc.Node.EventType.TOUCH_START, function (event) {\r\n                self.isOutDown = false;\r\n            }, this);\r\n            //当手指离开下落节点上时\r\n            this.nodeDownButton.on(cc.Node.EventType.TOUCH_END, function (event) {\r\n                self.isOutDown = true;\r\n            }, this);\r\n        }\r\n        //判断是否第一次生成俄罗斯方块\r\n        this.isFirst = false;\r\n        // //显示用户信息\r\n        // cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").LoadUser(cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").pictureUser,cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser,cc.find(\"Canvas/UserName\"),cc.find(\"UserPicture\"),cc.find(\"UserPicture1\"));\r\n        Global.game1Main = this;\r\n        //  this.nRotateAngle1=0;\r\n        //  this.nRotateAngle2=0;\r\n        //初始化当前俄罗斯方块颜色\r\n        this.stringColor = \"\";\r\n        //初始化当前俄罗斯方块形状\r\n        this.stringShape = \"\";\r\n        //初始化当前俄罗斯方块角度\r\n        this.stringRotate = \"\";\r\n        // cc.log(this.nodeCanvas.getComponent(\"Game1Main\").stringShape);\r\n        //初始化旋转角度\r\n        //  this.nRotateAngle=0; \r\n        this.nCreat = 0;\r\n        //判断是否发送服务\r\n        this.isSend=false;\r\n        //  //随机生成俄罗斯方块\r\n        //  this.GetBlock(); \r\n        this.boxParent1 = this.boxParent.getChildren();\r\n        //初始化比赛结果\r\n        this.lose=false;\r\n        //  //显示敌人的游戏场景\r\n        //  Global.CreatBackGround( this.enemyGroundChild2,20,10,this.prefabEnemy,this.nodeEnemyParent,Global.nServerWidth);\r\n        //给服务器发送游戏 场景信息\r\n        //重新开始界面\r\n        this.pauseGiveIn.on(\"touchstart\",function(){\r\n            // this.pauseMenu.active = false;\r\n            self.pauseMenu.active = false;\r\n            // //向服务器发送投降消息\r\n            // self.gameBye();\r\n            var jsonData = {\r\n                tag1            : 5,\r\n                score           : \"\",\r\n                type            : \"1\",\r\n                state1          : \"\",\r\n                changeMapList1  : [],\r\n                removeMapList1  : 0,\r\n                nMapRow         : \"\",\r\n                nMapCol         : \"\",\r\n                loading1        : \"\",\r\n            }\r\n            cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(jsonData);\r\n            //显示失败\r\n            this.playAudio(this.loseAudio);\r\n            //自己失败显示失败\r\n            this.overNodeLose.active = true;\r\n            //显示分数\r\n            this.overNodeLose.getChildByName(\"Score\").getComponent(cc.Label).string = this.score.toString();\r\n            //回到多人选择界面\r\n            cc.director.loadScene(\"PersonsChoose\");\r\n        }.bind(this));\r\n        this.pauseRestart.on('touchstart',function(){\r\n            cc.director.resume();\r\n            self.pauseMenu.active = false;\r\n            //发送消息给服务器\r\n            var jsonData = {\r\n                tag1            : 5,\r\n                score           : \"\",\r\n                type            : \"1\",\r\n                state1          : \"\",\r\n                changeMapList1  : [],\r\n                removeMapList1  : 0,\r\n                nMapRow         : \"\",\r\n                nMapCol         : \"\",\r\n                loading1        : \"\",\r\n            }\r\n            cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(jsonData);\r\n            //加载多人选择界面\r\n            cc.director.loadScene(\"PersonsChoose\");\r\n        }.bind(this));\r\n        //返回按钮\r\n        this.pauseReturn.on(\"touchstart\",function(){\r\n            cc.director.resume();\r\n            self.pauseMenu.active = false;\r\n            //发送消息给服务器\r\n            var jsonData = {\r\n                tag1            : 5,\r\n                score           : \"\",\r\n                type            : \"1\",\r\n                state1          : \"\",\r\n                changeMapList1  : [],\r\n                removeMapList1  : 0,\r\n                nMapRow         : \"\",\r\n                nMapCol         : \"\",\r\n                loading1        : \"\",\r\n            }\r\n            cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(jsonData);\r\n            //加载多人选择界面\r\n            cc.director.loadScene(\"PersonsChoose\");\r\n        }.bind(this));\r\n    },\r\n    //随机生成俄罗斯方块\r\n    GetBlock: function () {\r\n        //声明颜色数组\r\n        this.colorBlock = [\"blue\", \"green\", \"red\"];\r\n        //声明形状数组\r\n        this.shapeBlock = [\"T\", \"L\", \"Long\", \"Z\", \"Square\"];\r\n        //声明角度数组\r\n        this.rotateBlock = [\"0\", \"180\"];\r\n        this.nColor = Math.floor(cc.random0To1() * 3);\r\n        this.nShape = Math.floor(cc.random0To1() * 5);\r\n        this.nRotate = Math.floor(cc.random0To1() * 2);\r\n        //初始化声称俄罗斯方块的个数\r\n        if (this.isFirst == false) {\r\n            //根据俄罗斯方块形状生成\r\n            this.IsShape(this.shapeBlock, this.nShape);\r\n            this.nRotate = Math.floor(cc.random0To1() * 2);\r\n            this.nColor = Math.floor(cc.random0To1() * 3);\r\n            this.nShape = Math.floor(cc.random0To1() * 5);\r\n            //根据俄罗斯方块形状生成\r\n            this.IsShape(this.shapeBlock, this.nShape);\r\n        }\r\n        else {\r\n            //根据俄罗斯方块形状生成\r\n            this.IsShape(this.shapeBlock, this.nShape);\r\n        }\r\n    },\r\n/**\r\n * modified by lck 2018/7/12\r\n * start\r\n */\r\n    //初始化敌人地图针对游戏2和游戏4\r\n    initRivalMap : function(up,lr,back,row,col){\r\n        //找到对手游戏\r\n        var gameNode = this.groundEnemy;\r\n        //初始化y坐标(从下往上生成网格)\r\n        var y = gameNode.height/2 - this.girdSize/2 - up;\r\n        //初始化x坐标\r\n        var x = -gameNode.width/2 + this.girdSize/2 + lr;\r\n        console.log(\"--->>>>x is \" + x);\r\n        console.log(\"--->>>>row is \" + row);\r\n        console.log(\"--->>>>col is \" + col);\r\n        this.enemyGroundChild = [];\r\n        this.map = [];\r\n        //12行6列的网格\r\n        for(let i = 0;i < row;i++){\r\n            //设置它的y坐标\r\n            var tempY = y - i * this.girdSize - 1;\r\n            tempY = Number(tempY.toFixed(2));\r\n            console.log(\"--->>>>tempY is \" + tempY);\r\n            this.enemyGroundChild[i] = [];\r\n            this.map[i] = [];\r\n            for(let j = 0; j < col;j++){\r\n                var outArr = this.enemyGroundChild[i];\r\n                var mapData = this.map[i];\r\n                var tempX = x + j * this.girdSize + 1;\r\n                tempX = Number(tempX.toFixed(2));\r\n                console.log(\"--->>>>tempX is \" + tempX);\r\n                //y坐标不变，x坐标要变\r\n                var tempPrefab = this.setPrefabPosition(back,tempX,tempY,gameNode);\r\n                if(arguments.length === 6){\r\n                    tempPrefab.getComponent(arguments[5]).isFilled = 0;\r\n                    // tempPrefab.isFilled = 0;\r\n                    // console.log(\"tempPrefab.isFilled is \" + tempPrefab.isFilled);\r\n                    tempPrefab.getComponent(arguments[5]).type = -1;\r\n                    tempPrefab.getComponent(arguments[5]).innerNode = null;\r\n                }else if(arguments.length === 5){\r\n                    // var node = new Shape(tempPrefab,-1);\r\n                    tempPrefab.getComponent(\"Back\").isFilled = 0;\r\n                    // tempPrefab.isFilled = 0;\r\n                    // console.log(\"tempPrefab.isFilled is \" + tempPrefab.isFilled);\r\n                    tempPrefab.getComponent(\"Back\").type = -1;\r\n                    tempPrefab.getComponent(\"Back\").innerNode = null;\r\n                }\r\n                // var shape = new Shape(tempPrefab,-1);\r\n                outArr[j]=tempPrefab;\r\n                mapData[j] = 0;\r\n            }\r\n        }\r\n        console.log(\"enemyGroundChild is \" +this.enemyGroundChild);\r\n    },\r\n     /**\r\n    @param prefab:将要生成预制节点的预制体\r\n    @param x     :将要生成预制节点的x坐标\r\n    @param y     :将要生成预制节点的y坐标\r\n    @param parentNode : 生成的预制节点的父节点\r\n     */\r\n    setPrefabPosition : function(prefab,x,y,parentNode){\r\n        var prefab = this.createPrefab(prefab);\r\n        prefab.setPosition(x,y);\r\n        parentNode.addChild(prefab);\r\n        return prefab;\r\n    },\r\n    //创建一个预制体节点\r\n    createPrefab : function(prefab){\r\n        var prefabNode = cc.instantiate(prefab);\r\n        return prefabNode;\r\n    },\r\n/**\r\n * modified by lck 2018/7/12\r\n * end\r\n */\r\n    //遍历全局字块数组并消除整行方块isBox都为true的节点\r\n    TraversalNodeBox: function (nPositionY) {\r\n        // var boxParent1=this.boxParent.getChildren();\r\n        var nLength = this.boxParent1.length;\r\n        //存储被销毁的俄罗斯方块数组的下标\r\n        var nDestroy = [];\r\n        cc.log(nPositionY + \"nPositionY\");\r\n        for (var j = 0; j <= nLength - 1; j++) {\r\n            cc.log(this.boxParent1[j].getPositionY());\r\n        }\r\n        //    cc.log(boxParent1[0].getPositionY());\r\n        //    cc.log(nPositionY);\r\n        for (var i = 0; i <= nLength - 1; i++) {\r\n            // var boxParent1=this.boxParent.getChildren();\r\n            if (this.boxParent1[i].getPositionY() == nPositionY) {\r\n                //销毁该俄罗斯方块自方块\r\n                this.boxParent1[i].destroy();\r\n            }\r\n        }\r\n    },\r\n    //俄罗斯方块旋转\r\n    RotateBlock: function () {\r\n        if (this.nodeBlock.getComponent(\"OperateBlock\").isStationary == false) {\r\n            if (this.nodeBlock.getComponent(\"OperateBlock\").stringBoloekShape == \"Square\") {\r\n                return;\r\n            }\r\n            else {\r\n                this.playAudio(this.clickAudio);\r\n                this.TraverseRotate();\r\n            }\r\n        }\r\n    },\r\n    //返回触摸点对应的俄罗斯方块的列数\r\n    GetTouchLine: function (worldPosition) {\r\n        //将触摸点的横坐标转化为本地坐标\r\n        var nodePosition = worldPosition - (this.nodeMove.getPositionX() + this.nodeCanvas.getPositionX());\r\n        cc.log(nodePosition);\r\n        if (nodePosition > 0) {\r\n            var nWidth1 = Math.floor(nodePosition / (this.nodeMove.width / 20));\r\n            if (nWidth1 == 0 || nWidth1 == 1) {\r\n                this.nLine = 6;\r\n            }\r\n            else if (nWidth1 == 2 || nWidth1 == 3) {\r\n                this.nLine = 7;\r\n            }\r\n            else if (nWidth1 == 4 || nWidth1 == 5) {\r\n                this.nLine = 8;\r\n            }\r\n            else if (nWidth1 == 6 || nWidth1 == 7) {\r\n                this.nLine = 9;\r\n            }\r\n            else {\r\n                this.nLine = 10;\r\n            }\r\n            cc.log(this.nLine);\r\n            return this.nLine;\r\n        }\r\n        if (nodePosition < 0) {\r\n            var nWidth1 = Math.floor((-nodePosition) / (this.nodeMove.width / 20));\r\n            if (nWidth1 == 0 || nWidth1 == 1) {\r\n                this.nLine = 5;\r\n            }\r\n            else if (nWidth1 == 2 || nWidth1 == 3) {\r\n                this.nLine = 4;\r\n            }\r\n            else if (nWidth1 == 4 || nWidth1 == 5) {\r\n                this.nLine = 3;\r\n            }\r\n            else if (nWidth1 == 6 || nWidth1 == 7) {\r\n                this.nLine = 2;\r\n            }\r\n            else {\r\n                this.nLine = 1;\r\n            }\r\n            cc.log(this.nLine);\r\n            return this.nLine;\r\n        }\r\n    },\r\n    TraverseRotate: function () {\r\n        //获取此方块的数组\r\n        var nodeBoxArray = this.nodeBlock.getChildren();\r\n        //判断俄罗斯方块旋转之后是否含有方块\r\n        var isHasBox = false;\r\n        //判断俄罗斯方块旋转之后是否超过墙\r\n        var isOutWall = false;\r\n        //判断俄罗斯方块旋转之后是否超过背景的上方或下方、\r\n        var isOutGround = false;\r\n        //存储俄罗斯方块未旋转前的行列\r\n        var nRowY = [];\r\n        var nLineX = [];\r\n        //存入俄罗斯方块旋转后子元素的行和列\r\n        var arrayX = [];\r\n        var arrayY = [];\r\n        //将俄罗斯方块的行数从小到大排列\r\n        for (var j = 0; j <= 3; j++) {\r\n            var nX1 = (nodeBoxArray[j].getPositionX() + this.nodeBlock.getPositionX() - this.nodeUserParent.getPositionX()) / Global.nWidth + 1;\r\n            var nY1 = (nodeBoxArray[j].getPositionY() + this.nodeBlock.getPositionY() - this.nodeUserParent.getPositionY()) / Global.nWidth + 1;\r\n            nLineX.push(nX1);\r\n            nRowY.push(nY1);\r\n            if (j == 3) {\r\n                for (var k = 0; k <= 3; k++) {\r\n                    if (k <= 2) {\r\n                        for (var l = k + 1; l <= 3; l++) {\r\n                            if (nRowY[l] < nRowY[k]) {\r\n                                var oldX = nLineX[k];\r\n                                nLineX[k] = nLineX[l];\r\n                                nLineX[l] = oldX;\r\n                                var oldY = nRowY[k];\r\n                                nRowY[k] = nRowY[l];\r\n                                nRowY[l] = oldY;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (this.nodeBlock.getComponent(\"OperateBlock\").stringBoloekShape == \"Long\") {\r\n            if (nRowY[0] == 21) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            if (nRowY[0] >= 19) {\r\n                return;\r\n            }\r\n        }\r\n        this.arrayChangeNode = [];\r\n        for (var i = 0; i <= 3; i++) {\r\n            //判断旋转的字块是否为原点\r\n            var isZero = false;\r\n            //获取旋转后的坐标 \r\n            var v2RotateX = nodeBoxArray[i].getPositionY();\r\n            var v2RotateY = -nodeBoxArray[i].getPositionX();\r\n            //当旋转后的坐标与旋转前的坐标相同时\r\n            if (v2RotateX == nodeBoxArray[i].getPositionX() && v2RotateY == nodeBoxArray[i].getPositionY()) {\r\n                //将旋转前的方块置为false\r\n                var nX1 = (nodeBoxArray[i].getPositionX() + this.nodeBlock.getPositionX() - this.nodeUserParent.getPositionX()) / Global.nWidth + 1;\r\n                var nY1 = (nodeBoxArray[i].getPositionY() + this.nodeBlock.getPositionY() - this.nodeUserParent.getPositionY()) / Global.nWidth + 1;\r\n                nLineX.push(nX1);\r\n                nRowY.push(nY1);\r\n                this.arrayChangeNode.push({ \"row\": nY1 - 1, \"col\": nX1 - 1, \"color\": \"white\" });\r\n                // this.groundChild[nX1 - 1][nY1 - 1].getComponent(\"PrefabState\").isBox = false;\r\n                isZero = true;\r\n            }\r\n            else {\r\n                //将旋转前的方块置为false\r\n                var nX1 = (nodeBoxArray[i].getPositionX() + this.nodeBlock.getPositionX() - this.nodeUserParent.getPositionX()) / Global.nWidth + 1;\r\n                var nY1 = (nodeBoxArray[i].getPositionY() + this.nodeBlock.getPositionY() - this.nodeUserParent.getPositionY()) / Global.nWidth + 1;\r\n                nLineX.push(nX1);\r\n                nRowY.push(nY1);\r\n                this.arrayChangeNode.push({ \"row\": nY1 - 1, \"col\": nX1 - 1, \"color\": \"white\" });\r\n                // this.groundChild[nX1 - 1][nY1 - 1].getComponent(\"PrefabState\").isBox = false;\r\n            }\r\n            // //旋转坐标\r\n            // nodeBoxArray[i].setPosition(cc.p(nodeBoxArray[i].getPositionY(),-nodeBoxArray[i].getPositionX()));\r\n            //获取旋转后组成俄罗斯方块元素的行列\r\n            var nX = (v2RotateX + this.nodeBlock.getPositionX() - this.nodeUserParent.getPositionX()) / Global.nWidth + 1;\r\n            var nY = (v2RotateY + this.nodeBlock.getPositionY() - this.nodeUserParent.getPositionY()) / Global.nWidth + 1;\r\n            arrayX.push(nX);\r\n            arrayY.push(nY);\r\n            //当俄罗斯方块旋转后超过场景上方或下方时\r\n            if (nY > 20 || nY < 1) {\r\n                isOutGround = true;\r\n            }\r\n            //当超出墙壁时\r\n            if (nX > 10 || nX < 1) {\r\n                isOutWall = true;\r\n            }\r\n            else {\r\n                if (isOutGround == false) {\r\n                    if (this.groundChild[nX - 1][nY - 1].getComponent(\"PrefabState\").isBox && isZero == false) {\r\n                        isHasBox = true;\r\n                    }\r\n                }\r\n            }\r\n            if (i == 3) {\r\n                if (isHasBox == false && isOutWall == false && isOutGround == false) {\r\n                    //旋转俄罗斯方块\r\n                    for (var i = 0; i <= 3; i++) {\r\n                        //  var nX=(nodeBoxArray[i].getPositionX()+this.nodeBlock.getPositionX()-this.nodeUserParent.getPositionX())/65+1;\r\n                        //  var nY=(nodeBoxArray[i].getPositionY()+this.nodeBlock.getPositionY()-this.nodeUserParent.getPositionY())/65+1; \r\n                        //  this.groundChild[nX-1][nY-1].getComponent(\"PrefabState\").isBox=false;\r\n                        nodeBoxArray[i].setPosition(cc.p(nodeBoxArray[i].getPositionY(), -nodeBoxArray[i].getPositionX()));\r\n                        var nX1 = (nodeBoxArray[i].getPositionX() + this.nodeBlock.getPositionX() - this.nodeUserParent.getPositionX()) / Global.nWidth + 1;\r\n                        var nY1 = (nodeBoxArray[i].getPositionY() + this.nodeBlock.getPositionY() - this.nodeUserParent.getPositionY()) / Global.nWidth + 1;\r\n                        this.arrayChangeNode.push({ \"row\": nY1 - 1, \"col\": nX1 - 1, \"color\": this.nodeBlock.getComponent(\"OperateBlock\").stringColor });\r\n                        // this.groundChild[nX1 - 1][nY1 - 1].getComponent(\"PrefabState\").isBox = true;\r\n                        // this.groundChild[nX1 - 1][nY1 - 1].getComponent(\"PrefabState\").stringColor = this.nodeBlock.getComponent(\"OperateBlock\").stringColor;\r\n                    }\r\n                    this.isRotateState = true;\r\n                    //初始化 1s计时器\r\n                    this.nodeBlock.getComponent(\"OperateBlock\").fCollisionTime = 0;\r\n                    this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle += 90;\r\n                    if (this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle == 360) {\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle = 0;\r\n                    }\r\n                }\r\n                if (isHasBox) {\r\n                    //将置为false的方块还原属性\r\n                    for (var i = 0; i <= 3; i++) {\r\n                        this.arrayChangeNode.push({ \"row\": nRowY[i] - 1, \"col\": nLineX[i] - 1, \"color\": this.nodeBlock.getComponent(\"OperateBlock\").stringColor });\r\n                        // this.groundChild[nLineX[i] - 1][nRowY[i] - 1].getComponent(\"PrefabState\").isBox = true;\r\n                        // this.groundChild[nLineX[i] - 1][nRowY[i] - 1].getComponent(\"PrefabState\").stringColor = this.nodeBlock.getComponent(\"OperateBlock\").stringColor;\r\n                    }\r\n                }\r\n                //当旋转以后超过游戏场景上方或下方\r\n                if (isOutGround) {\r\n                    for (var j = 0; j <= 3; j++) {\r\n                        if (j == 3) {\r\n                            //将旋转后的行数从小到大排列\r\n                            for (var k = 0; k <= 3; k++) {\r\n                                if (k <= 2) {\r\n                                    for (var l = k + 1; l <= 3; l++) {\r\n                                        if (arrayY[l] < arrayY[k]) {\r\n                                            var oldX = arrayX[k];\r\n                                            arrayX[k] = arrayX[l];\r\n                                            arrayX[l] = oldX;\r\n\r\n                                            var oldY = arrayY[k];\r\n                                            arrayY[k] = arrayY[l];\r\n                                            arrayY[l] = oldY;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                if (k == 3) {\r\n\r\n                                    if (arrayY[3] > 20) {\r\n                                        //向下移动的单位个数\r\n                                        var nMove = arrayY[3] - 20;\r\n                                        //存取移动后的行 ，列\r\n                                        var nMoveX = [];\r\n                                        var nMoveY = [];\r\n                                        //存取移动过后的位置\r\n                                        var arrayMoveX = [];\r\n                                        var arrayMoveY = [];\r\n                                        //判断旋转移动后是否有方块\r\n                                        var isHasBox = false;\r\n                                        for (var l = 0; l <= 3; l++) {\r\n                                            //  //获取旋转前的行列\r\n                                            //  var nX0=(nodeBoxArray[i].getPositionX()+this.nodeBlock.getPositionX()-this.nodeUserParent.getPositionX())/65+1;\r\n                                            //  var nY0=(nodeBoxArray[i].getPositionY()+this.nodeBlock.getPositionY()-this.nodeUserParent.getPositionY())/65+1;\r\n                                            //  this.groundChild[nX0-1][nY0-1].getComponent(\"PrefabState\").isBox=false;\r\n                                            //获取旋转后的坐标 \r\n                                            var v2RotateX = nodeBoxArray[l].getPositionY();\r\n                                            var v2RotateY = -nodeBoxArray[l].getPositionX();\r\n                                            // //获取移动后的坐标\r\n                                            var v2RotateY1 = v2RotateY - Global.nWidth * nMove;\r\n                                            //获取移动后俄罗斯方块元素的行列\r\n                                            var nX1 = (v2RotateX + this.nodeBlock.getPositionX() - this.nodeUserParent.getPositionX()) / Global.nWidth + 1;\r\n\r\n                                            var nY1 = (v2RotateY1 + this.nodeBlock.getPositionY() - this.nodeUserParent.getPositionY()) / Global.nWidth + 1;\r\n\r\n                                            if (this.groundChild[nX1 - 1][nY1 - 1].getComponent(\"PrefabState\").isBox) {\r\n                                                isHasBox = true;\r\n                                            }\r\n                                            //获取本地坐标\r\n                                            var positionX = v2RotateX;\r\n                                            var positionY = v2RotateY1;\r\n                                            arrayMoveX.push(positionX);\r\n                                            arrayMoveY.push(positionY);\r\n                                            //  nodeBoxArray[i].setPosition(cc.p(positionX,positionY));\r\n                                            nMoveX.push(nX1);\r\n                                            nMoveY.push(nY1);\r\n                                            if (l == 3) {\r\n                                                if (isHasBox) {\r\n\r\n                                                    //还原未旋转移动前的box的true属性\r\n                                                    for (var j = 0; j <= 3; j++) {\r\n                                                        this.arrayChangeNode.push({ \"row\": nRowY[j] - 1, \"col\": nLineX[j] - 1, \"color\": this.nodeBlock.getComponent(\"OperateBlock\").stringColor });\r\n                                                        // this.groundChild[nLineX[j] - 1][nRowY[j] - 1].getComponent(\"PrefabState\").isBox = true;\r\n                                                        // this.groundChild[nLineX[j] - 1][nRowY[j] - 1].getComponent(\"PrefabState\").stringColor = this.nodeBlock.getComponent(\"OperateBlock\").stringColor;\r\n                                                    }\r\n                                                    return;\r\n                                                }\r\n                                                else {\r\n                                                    //初始化 1s计时器\r\n                                                    this.nodeBlock.getComponent(\"OperateBlock\").fCollisionTime = 0;\r\n                                                    this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle += 90;\r\n                                                    if (this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle == 360) {\r\n                                                        this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle = 0;\r\n                                                    }\r\n                                                    for (var i = 0; i <= 3; i++) {\r\n                                                        //获取旋转后的坐标 \r\n                                                        var v2RotateX = nodeBoxArray[i].getPositionY();\r\n                                                        var v2RotateY = -nodeBoxArray[i].getPositionX();\r\n                                                        nodeBoxArray[i].setPosition(cc.p(v2RotateX, v2RotateY));\r\n                                                        if (i == 3) {\r\n                                                            this.nodeBlock.y -= Global.nWidth * nMove;\r\n                                                        }\r\n                                                        this.arrayChangeNode.push({ \"row\": nMoveY[i] - 1, \"col\": nMoveX[i] - 1, \"color\": this.nodeBlock.getComponent(\"OperateBlock\").stringColor });\r\n                                                        //将旋转移动后的方块置为true\r\n                                                        // this.groundChild[nMoveX[i] - 1][nMoveY[i] - 1].getComponent(\"PrefabState\").isBox = true;\r\n                                                        // this.groundChild[nMoveX[i] - 1][nMoveY[i] - 1].getComponent(\"PrefabState\").stringColor = this.nodeBlock.getComponent(\"OperateBlock\").stringColor;\r\n                                                        this.isRotateState = true;\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    if (arrayY[0] < 1) {\r\n                                        //向上移动的单位个数\r\n                                        var nMove = 1 - arrayY[0];\r\n                                        //存取移动后的行 ，列\r\n                                        var nMoveX = [];\r\n                                        var nMoveY = [];\r\n                                        //存取移动过后的位置\r\n                                        var arrayMoveX = [];\r\n                                        var arrayMoveY = [];\r\n                                        //判断旋转移动后是否有方块\r\n                                        var isHasBox = false;\r\n                                        for (var l = 0; l <= 3; l++) {\r\n                                            //获取旋转后的坐标 \r\n                                            var v2RotateX = nodeBoxArray[l].getPositionY();\r\n                                            var v2RotateY = -nodeBoxArray[l].getPositionX();\r\n                                            //获取移动后的坐标\r\n                                            var v2RotateY1 = v2RotateY + Global.nWidth * nMove;\r\n                                            //获取移动后俄罗斯方块元素的行列\r\n                                            var nX1 = (v2RotateX + this.nodeBlock.getPositionX() - this.nodeUserParent.getPositionX()) / Global.nWidth + 1;\r\n                                            var nY1 = (v2RotateY1 + this.nodeBlock.getPositionY() - this.nodeUserParent.getPositionY()) / Global.nWidth + 1;\r\n\r\n                                            if (this.groundChild[nX1 - 1][nY1 - 1].getComponent(\"PrefabState\").isBox) {\r\n                                                isHasBox = true;\r\n                                            }\r\n                                            //获取本地坐标\r\n                                            var positionX = v2RotateX;\r\n                                            var positionY = v2RotateY1;\r\n                                            arrayMoveX.push(positionX);\r\n                                            arrayMoveY.push(positionY);\r\n                                            //  nodeBoxArray[i].setPosition(cc.p(positionX,positionY));\r\n                                            nMoveX.push(nX1);\r\n                                            nMoveY.push(nY1);\r\n                                            if (l == 3) {\r\n                                                if (isHasBox) {\r\n                                                    //还原未旋转移动前的box的true属性\r\n                                                    for (var j = 0; j <= 3; j++) {\r\n                                                        this.arrayChangeNode.push({ \"row\": nRowY[j] - 1, \"col\": nLineX[j] - 1, \"color\": this.nodeBlock.getComponent(\"OperateBlock\").stringColor });\r\n                                                        // this.groundChild[nLineX[j] - 1][nRowY[j] - 1].getComponent(\"PrefabState\").isBox = true;\r\n                                                        // this.groundChild[nLineX[j] - 1][nRowY[j] - 1].getComponent(\"PrefabState\").stringColor = this.nodeBlock.getComponent(\"OperateBlock\").stringColor;\r\n                                                    }\r\n                                                    return;\r\n                                                }\r\n                                                else {\r\n                                                    //初始化 1s计时器\r\n                                                    this.nodeBlock.getComponent(\"OperateBlock\").fCollisionTime = 0;\r\n                                                    this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle += 90;\r\n                                                    if (this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle == 360) {\r\n                                                        this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle = 0;\r\n                                                    }\r\n                                                    for (var i = 0; i <= 3; i++) {\r\n                                                        //获取旋转后的坐标 \r\n                                                        var v2RotateX = nodeBoxArray[i].getPositionY();\r\n                                                        var v2RotateY = -nodeBoxArray[i].getPositionX();\r\n                                                        nodeBoxArray[i].setPosition(cc.p(v2RotateX, v2RotateY));\r\n                                                        if (i == 3) {\r\n                                                            this.nodeBlock.y += Global.nWidth * nMove;\r\n                                                        }\r\n                                                        this.arrayChangeNode.push({ \"row\": nMoveY[i] - 1, \"col\": nMoveX[i] - 1, \"color\": this.nodeBlock.getComponent(\"OperateBlock\").stringColor });\r\n                                                        //将旋转移动后的方块置为true\r\n                                                        // this.groundChild[nMoveX[i] - 1][nMoveY[i] - 1].getComponent(\"PrefabState\").isBox = true;\r\n                                                        // this.groundChild[nMoveX[i] - 1][nMoveY[i] - 1].getComponent(\"PrefabState\").stringColor = this.nodeBlock.getComponent(\"OperateBlock\").stringColor;\r\n                                                        this.isRotateState = true;\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                }\r\n                //当旋转以后超过墙时\r\n                if (isOutWall) {\r\n                    for (var j = 0; j <= 3; j++) {\r\n                        if (j == 3) {\r\n                            //将旋转后的列数从小到大排列\r\n                            for (var k = 0; k <= 3; k++) {\r\n                                if (k <= 2) {\r\n                                    for (var l = k + 1; l <= 3; l++) {\r\n                                        if (arrayX[l] < arrayX[k]) {\r\n                                            var oldX = arrayX[k];\r\n                                            arrayX[k] = arrayX[l];\r\n                                            arrayX[l] = oldX;\r\n                                            var oldY = arrayY[k];\r\n                                            arrayY[k] = arrayY[l];\r\n                                            arrayY[l] = oldY;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                if (k == 3) {\r\n                                    cc.log(arrayX);\r\n                                    if (arrayX[3] > 10) {\r\n                                        cc.log(\"777777777777777777777777\");\r\n                                        //向左移动的单位个数\r\n                                        var nMove = arrayX[3] - 10;\r\n                                        //存取移动后的行 ，列\r\n                                        var nMoveX = [];\r\n                                        var nMoveY = [];\r\n                                        //存取移动过后的位置\r\n                                        var arrayMoveX = [];\r\n                                        var arrayMoveY = [];\r\n                                        //判断旋转移动后是否有方块\r\n                                        var isHasBox = false;\r\n                                        for (var l = 0; l <= 3; l++) {\r\n                                            //  //获取旋转前的行列\r\n                                            //  var nX0=(nodeBoxArray[i].getPositionX()+this.nodeBlock.getPositionX()-this.nodeUserParent.getPositionX())/65+1;\r\n                                            //  var nY0=(nodeBoxArray[i].getPositionY()+this.nodeBlock.getPositionY()-this.nodeUserParent.getPositionY())/65+1;\r\n                                            //  this.groundChild[nX0-1][nY0-1].getComponent(\"PrefabState\").isBox=false;\r\n                                            //获取旋转后的坐标 \r\n                                            var v2RotateX = nodeBoxArray[l].getPositionY();\r\n                                            var v2RotateY = -nodeBoxArray[l].getPositionX();\r\n                                            //获取移动后的坐标\r\n                                            var v2RotateX1 = v2RotateX - Global.nWidth * nMove;\r\n                                            //获取移动后俄罗斯方块元素的行列\r\n                                            var nX1 = (v2RotateX1 + this.nodeBlock.getPositionX() - this.nodeUserParent.getPositionX()) / Global.nWidth + 1;\r\n\r\n                                            var nY1 = (v2RotateY + this.nodeBlock.getPositionY() - this.nodeUserParent.getPositionY()) / Global.nWidth + 1;\r\n                                            if (this.groundChild[nX1 - 1][nY1 - 1].getComponent(\"PrefabState\").isBox) {\r\n                                                cc.log(\"666666666666\");\r\n                                                isHasBox = true;\r\n                                            }\r\n                                            //获取本地坐标\r\n                                            var positionX = v2RotateX1;\r\n                                            var positionY = v2RotateY;\r\n                                            arrayMoveX.push(positionX);\r\n                                            arrayMoveY.push(positionY);\r\n                                            //  nodeBoxArray[i].setPosition(cc.p(positionX,positionY));\r\n                                            nMoveX.push(nX1);\r\n                                            nMoveY.push(nY1);\r\n                                            if (l == 3) {\r\n                                                if (isHasBox) {\r\n                                                    //还原未旋转移动前的box的true属性\r\n                                                    for (var j = 0; j <= 3; j++) {\r\n                                                        this.arrayChangeNode.push({ \"row\": nRowY[j] - 1, \"col\": nLineX[j] - 1, \"color\": this.nodeBlock.getComponent(\"OperateBlock\").stringColor });\r\n                                                        // this.groundChild[nLineX[j] - 1][nRowY[j] - 1].getComponent(\"PrefabState\").isBox = true;\r\n                                                        // this.groundChild[nLineX[j] - 1][nRowY[j] - 1].getComponent(\"PrefabState\").stringColor = this.nodeBlock.getComponent(\"OperateBlock\").stringColor;\r\n                                                    }\r\n                                                    return;\r\n                                                }\r\n                                                else {\r\n                                                    cc.log(\"55555555555\");\r\n                                                    //初始化 1s计时器\r\n                                                    this.nodeBlock.getComponent(\"OperateBlock\").fCollisionTime = 0;\r\n                                                    this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle += 90;\r\n                                                    if (this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle == 360) {\r\n                                                        this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle = 0;\r\n                                                    }\r\n                                                    for (var i = 0; i <= 3; i++) {\r\n                                                        //获取旋转后的坐标 \r\n                                                        var v2RotateX = nodeBoxArray[i].getPositionY();\r\n                                                        var v2RotateY = -nodeBoxArray[i].getPositionX();\r\n                                                        nodeBoxArray[i].setPosition(cc.p(v2RotateX, v2RotateY));\r\n                                                        if (i == 3) {\r\n                                                            this.nodeBlock.x -= Global.nWidth * nMove;\r\n                                                        }\r\n                                                        this.arrayChangeNode.push({ \"row\": nMoveY[i] - 1, \"col\": nMoveX[i] - 1, \"color\": this.nodeBlock.getComponent(\"OperateBlock\").stringColor });\r\n                                                        //将旋转移动后的方块置为true\r\n                                                        // this.groundChild[nMoveX[i] - 1][nMoveY[i] - 1].getComponent(\"PrefabState\").isBox = true;\r\n                                                        // this.groundChild[nMoveX[i] - 1][nMoveY[i] - 1].getComponent(\"PrefabState\").stringColor = this.nodeBlock.getComponent(\"OperateBlock\").stringColor;\r\n                                                        this.isRotateState = true;\r\n                                                    }\r\n\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    if (arrayX[0] < 1) {\r\n                                        //向右移动的单位个数\r\n                                        var nMove = 1 - arrayX[0];\r\n                                        //存取移动后的行 ，列\r\n                                        var nMoveX = [];\r\n                                        var nMoveY = [];\r\n                                        //存取移动过后的位置\r\n                                        var arrayMoveX = [];\r\n                                        var arrayMoveY = [];\r\n                                        //判断旋转移动后是否有方块\r\n                                        var isHasBox = false;\r\n                                        for (var l = 0; l <= 3; l++) {\r\n                                            //获取旋转后的坐标 \r\n                                            var v2RotateX = nodeBoxArray[l].getPositionY();\r\n                                            var v2RotateY = -nodeBoxArray[l].getPositionX();\r\n                                            //获取移动后的坐标\r\n                                            var v2RotateX1 = v2RotateX + Global.nWidth * nMove;\r\n\r\n                                            //获取移动后俄罗斯方块元素的行列\r\n                                            var nX1 = (v2RotateX1 + this.nodeBlock.getPositionX() - this.nodeUserParent.getPositionX()) / Global.nWidth + 1;\r\n\r\n                                            var nY1 = (v2RotateY + this.nodeBlock.getPositionY() - this.nodeUserParent.getPositionY()) / Global.nWidth + 1;\r\n                                            if (this.groundChild[nX1 - 1][nY1 - 1].getComponent(\"PrefabState\").isBox) {\r\n                                                isHasBox = true;\r\n                                            }\r\n                                            //获取本地坐标\r\n                                            var positionX = v2RotateX1;\r\n                                            var positionY = v2RotateY;\r\n                                            arrayMoveX.push(positionX);\r\n                                            arrayMoveY.push(positionY);\r\n                                            //  nodeBoxArray[i].setPosition(cc.p(positionX,positionY));\r\n                                            nMoveX.push(nX1);\r\n                                            nMoveY.push(nY1);\r\n                                            if (l == 3) {\r\n                                                if (isHasBox) {\r\n                                                    //还原未旋转移动前的box的true属性\r\n                                                    for (var j = 0; j <= 3; j++) {\r\n                                                        this.arrayChangeNode.push({ \"row\": nRowY[j] - 1, \"col\": nLineX[j] - 1, \"color\": this.nodeBlock.getComponent(\"OperateBlock\").stringColor });\r\n                                                        // this.groundChild[nLineX[j] - 1][nRowY[j] - 1].getComponent(\"PrefabState\").isBox = true;\r\n                                                        // this.groundChild[nLineX[j] - 1][nRowY[j] - 1].getComponent(\"PrefabState\").stringColor = this.nodeBlock.getComponent(\"OperateBlock\").stringColor;\r\n                                                    }\r\n                                                    return;\r\n                                                }\r\n                                                else {\r\n                                                    //初始化 1s计时器\r\n                                                    this.nodeBlock.getComponent(\"OperateBlock\").fCollisionTime = 0;\r\n                                                    this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle += 90;\r\n                                                    if (this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle == 360) {\r\n                                                        this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle = 0;\r\n                                                    }\r\n                                                    for (var i = 0; i <= 3; i++) {\r\n                                                        //获取旋转后的坐标 \r\n                                                        var v2RotateX = nodeBoxArray[i].getPositionY();\r\n                                                        var v2RotateY = -nodeBoxArray[i].getPositionX();\r\n                                                        nodeBoxArray[i].setPosition(cc.p(v2RotateX, v2RotateY));\r\n                                                        if (i == 3) {\r\n                                                            this.nodeBlock.x += Global.nWidth * nMove;\r\n                                                        }\r\n                                                        this.arrayChangeNode.push({ \"row\": nMoveY[i] - 1, \"col\": nMoveX[i] - 1, \"color\": this.nodeBlock.getComponent(\"OperateBlock\").stringColor });\r\n                                                        // //将旋转移动后的方块置为true\r\n                                                        // this.groundChild[nMoveX[i] - 1][nMoveY[i] - 1].getComponent(\"PrefabState\").isBox = true;\r\n                                                        // this.groundChild[nMoveX[i] - 1][nMoveY[i] - 1].getComponent(\"PrefabState\").stringColor = this.nodeBlock.getComponent(\"OperateBlock\").stringColor;\r\n                                                        this.isRotateState = true;\r\n                                                    }\r\n\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    //根据俄罗斯方块类型设置位置\r\n    setBlockPosition: function (stringShape1, stringRotate) {\r\n        switch (stringShape1) {\r\n            case \"Square\":\r\n                //获取方块的世界坐标\r\n                var v2WorldY = this.nodeUserParent.getPositionY() + 20 * Global.nWidth + Global.nWidth / 2;\r\n                //    var nRandom=Global.nWidth*3+Math.floor(cc.random0To1()*6)*Global.nWidth;\r\n                //    var v1WorldX=(nRandom+nRandom+Global.nWidth)/2;\r\n                var v1WorldX = this.nodeUserParent.getPositionX() + Global.nWidth / 2 + 4 * Global.nWidth;\r\n                cc.log(v1WorldX);\r\n                cc.log(v2WorldY);\r\n                return cc.p(v1WorldX, v2WorldY);\r\n                break;\r\n            case \"T\":\r\n                switch (stringRotate) {\r\n                    case \"0\":\r\n                        //获取方块的世界坐标              \r\n                        var v2WorldY = this.nodeUserParent.getPositionY() + 21 * Global.nWidth;\r\n                        var v1WorldX = this.nodeUserParent.getPositionX() + 5 * Global.nWidth;\r\n                        cc.log(v1WorldX);\r\n                        cc.log(v2WorldY);\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                    case \"180\":\r\n                        //获取方块的世界坐标    \r\n                        var v2WorldY = this.nodeUserParent.getPositionY() + 20 * Global.nWidth;\r\n                        var v1WorldX = this.nodeUserParent.getPositionX() + 5 * Global.nWidth;\r\n                        cc.log(v1WorldX);\r\n                        cc.log(v2WorldY);\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                }\r\n                break;\r\n            case \"L\":\r\n                switch (stringRotate) {\r\n                    case \"0\":\r\n                        //获取方块的世界坐标\r\n                        var v2WorldY = this.nodeUserParent.getPositionY() + 20 * Global.nWidth;\r\n                        var v1WorldX = this.nodeUserParent.getPositionX() + 4 * Global.nWidth;\r\n                        cc.log(v1WorldX);\r\n                        cc.log(v2WorldY);\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                    case \"180\":\r\n                        //获取方块的世界坐标    \r\n                        var v2WorldY = this.nodeUserParent.getPositionY() + 21 * Global.nWidth;\r\n                        var v1WorldX = this.nodeUserParent.getPositionX() + 6 * Global.nWidth;\r\n                        cc.log(v1WorldX);\r\n                        cc.log(v2WorldY);\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                }\r\n                break;\r\n            case \"Long\":\r\n                switch (stringRotate) {\r\n                    case \"0\":\r\n                        var v2WorldY = this.nodeUserParent.getPositionY() + 20 * Global.nWidth;\r\n                        var v1WorldX = this.nodeUserParent.getPositionX() + 4 * Global.nWidth;\r\n                        cc.log(v1WorldX);\r\n                        cc.log(v2WorldY);\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                    case \"180\":\r\n                        var v2WorldY = this.nodeUserParent.getPositionY() + 20 * Global.nWidth;\r\n                        var v1WorldX = this.nodeUserParent.getPositionX() + 5 * Global.nWidth;\r\n                        cc.log(v1WorldX);\r\n                        cc.log(v2WorldY);\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                }\r\n\r\n                break;\r\n            case \"Z\":\r\n                switch (stringRotate) {\r\n                    case \"0\":\r\n                        //获取方块的世界坐标\r\n                        var v2WorldY = this.nodeUserParent.getPositionY() + 21 * Global.nWidth;\r\n                        var v1WorldX = this.nodeUserParent.getPositionX() + 4 * Global.nWidth;\r\n                        cc.log(v1WorldX);\r\n                        cc.log(v2WorldY);\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                    case \"180\":\r\n                        //获取方块的世界坐标    \r\n                        var v2WorldY = this.nodeUserParent.getPositionY() + 20 * Global.nWidth;\r\n                        var v1WorldX = this.nodeUserParent.getPositionX() + 4 * Global.nWidth;\r\n                        cc.log(v1WorldX);\r\n                        cc.log(v2WorldY);\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                }\r\n                break;\r\n        }\r\n    },\r\n    //当俄罗斯方块落下后初始化信息\r\n    OnLoadBlock: function (stringShape, nBlock, stringRotate, stringColor3) {\r\n        switch (stringShape) {\r\n            //  this.shapeBlock=[\"T\",\"L\",\"Long\",\"Z\",\"Square\"];\r\n            case \"Long\":\r\n                switch (nBlock) {\r\n                    case 0:\r\n                        this.nodeBlock.destroy();\r\n                        //生成俄罗斯方块\r\n                        this.nodeBlock = cc.instantiate(this.prefabLong);\r\n                        //获取此时方块的形状\r\n                        this.nodeBlock.parent = this.blockParent;\r\n                        this.TarvelFalse();\r\n                        //随机方块位置\r\n                        this.nodeBlock.setPosition(this.setBlockPosition(\"Long\", stringRotate));\r\n                        cc.log(this.nodeBlock.getPosition());\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").stringColor = stringColor3;\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").stringBoloekShape = stringShape;\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle = parseInt(stringRotate);\r\n                        // this.nodeBlock.getComponent(\"OperateBlock\").isStartDown = true;\r\n                        break;\r\n                    case 1:\r\n\r\n                        this.nodeBlock1.destroy();\r\n                        this.nodeBlock1 = cc.instantiate(this.prefabLong);\r\n                        //获取此时方块的形状\r\n                        this.nodeBlock1.parent = this.blockParent;\r\n                        //随机方块位置\r\n                        this.nodeBlock1.setPosition(this.setBlock1Position(\"Long\", this.next1Node, stringRotate));\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").stringColor = stringColor3;\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").nRotateAngle = parseInt(stringRotate);\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").stringBoloekShape = stringShape;\r\n                        break;\r\n                }\r\n                break;\r\n            case \"Z\":\r\n                switch (nBlock) {\r\n                    case 0:\r\n                        this.nodeBlock.destroy();\r\n                        //生成俄罗斯方块\r\n                        this.nodeBlock = cc.instantiate(this.prefabZ);\r\n                        //获取此时方块的形状\r\n                        this.nodeBlock.parent = this.blockParent;\r\n                        this.TarvelFalse();\r\n                        //随机方块位置\r\n                        this.nodeBlock.setPosition(this.setBlockPosition(\"Z\", stringRotate));\r\n                        cc.log(this.nodeBlock.getPosition());\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").stringColor = stringColor3;\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").stringBoloekShape = stringShape;\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle = parseInt(stringRotate);\r\n                        // this.nodeBlock.getComponent(\"OperateBlock\").isStartDown = true;\r\n                        break;\r\n                    case 1:\r\n                        this.nodeBlock1.destroy();\r\n                        this.nodeBlock1 = cc.instantiate(this.prefabZ);\r\n                        //获取此时方块的形状\r\n                        this.nodeBlock1.parent = this.blockParent;\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").stringColor = stringColor3;\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").nRotateAngle = parseInt(stringRotate);\r\n                        //随机方块位置\r\n                        this.nodeBlock1.setPosition(this.setBlock1Position(\"Z\", this.next1Node, stringRotate));\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").nRotateAngle = parseInt(stringRotate);\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").stringBoloekShape = stringShape;\r\n                        break;\r\n\r\n                }\r\n                break;\r\n            case \"Square\":\r\n                switch (nBlock) {\r\n                    case 0:\r\n                        this.nodeBlock.destroy();\r\n                        //生成俄罗斯方块\r\n                        this.nodeBlock = cc.instantiate(this.prefabSquare);\r\n                        //获取此时方块的形状\r\n                        this.nodeBlock.parent = this.blockParent;\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").stringColor = stringColor3;\r\n                        this.TarvelFalse();\r\n                        //随机方块位置\r\n                        this.nodeBlock.setPosition(this.setBlockPosition(\"Square\", stringRotate));\r\n                        cc.log(this.nodeBlock.getPosition());\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").stringBoloekShape = stringShape;\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle = 0;\r\n                        // this.nodeBlock.getComponent(\"OperateBlock\").isStartDown = true;\r\n                        break;\r\n                    case 1:\r\n                        this.nodeBlock1.destroy();\r\n                        this.nodeBlock1 = cc.instantiate(this.prefabSquare);\r\n                        //获取此时方块的形状\r\n                        this.nodeBlock1.parent = this.blockParent;\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").stringColor = stringColor3;\r\n                        this.nodeBlock1.setPosition(this.setBlock1Position(\"Square\", this.next1Node, stringRotate));\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").nRotateAngle = 0;\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").stringBoloekShape = stringShape;\r\n                        break;\r\n                }\r\n                break;\r\n            case \"T\":\r\n                switch (nBlock) {\r\n                    case 0:\r\n                        this.nodeBlock.destroy();\r\n                        //生成俄罗斯方块\r\n                        this.nodeBlock = cc.instantiate(this.prefabT);\r\n                        //获取此时方块的形状\r\n                        this.nodeBlock.parent = this.blockParent;\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").stringColor = stringColor3;\r\n                        this.TarvelFalse();\r\n                        //随机方块位置\r\n                        this.nodeBlock.setPosition(this.setBlockPosition(\"T\", stringRotate));\r\n                        cc.log(this.nodeBlock.getPosition());\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle = parseInt(stringRotate);\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").stringBoloekShape = stringShape;\r\n                        // this.nodeBlock.getComponent(\"OperateBlock\").isStartDown = true;\r\n                        break;\r\n                    case 1:\r\n                        this.nodeBlock1.destroy();\r\n                        this.nodeBlock1 = cc.instantiate(this.prefabT);\r\n                        //获取此时方块的形状\r\n                        this.nodeBlock1.parent = this.blockParent;\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").stringColor = stringColor3;\r\n                        this.nodeBlock1.setPosition(this.setBlock1Position(\"T\", this.next1Node, stringRotate));\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").nRotateAngle = parseInt(stringRotate);\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").stringBoloekShape = stringShape;\r\n                        break;\r\n                }\r\n                break;\r\n            case \"L\":\r\n                switch (nBlock) {\r\n                    case 0:\r\n                        this.nodeBlock.destroy();\r\n                        //生成俄罗斯方块\r\n                        this.nodeBlock = cc.instantiate(this.prefabL);\r\n                        //获取此时方块的形状\r\n                        this.nodeBlock.parent = this.blockParent;\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").stringColor = stringColor3;\r\n                        this.TarvelFalse();\r\n                        //随机方块位置\r\n                        this.nodeBlock.setPosition(this.setBlockPosition(\"L\", stringRotate));\r\n                        cc.log(this.nodeBlock.getPosition());\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle = parseInt(stringRotate);\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").stringBoloekShape = stringShape;\r\n                        // this.nodeBlock.getComponent(\"OperateBlock\").isStartDown = true;\r\n                        break;\r\n                    case 1:\r\n                        this.nodeBlock1.destroy();\r\n                        this.nodeBlock1 = cc.instantiate(this.prefabL);\r\n                        //获取此时方块的形状\r\n                        this.nodeBlock1.parent = this.blockParent;\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").stringColor = stringColor3;\r\n                        this.nodeBlock1.setPosition(this.setBlock1Position(\"L\", this.next1Node, stringRotate));\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").nRotateAngle = parseInt(stringRotate);\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").stringBoloekShape = stringShape;\r\n                        break;\r\n                }\r\n                break;\r\n        }\r\n\r\n    },\r\n    //根据第二个俄罗斯方块的类型设置位置\r\n    setBlock1Position: function (stringShape1, nodePosition3, stringRotate) {\r\n        switch (stringShape1) {\r\n            case \"Square\":\r\n                //获取方块的世界坐标\r\n                var v2WorldY = nodePosition3.getPositionY();\r\n                var v1WorldX = nodePosition3.getPositionX();\r\n                return cc.p(v1WorldX, v2WorldY);\r\n                break;\r\n            case \"T\":\r\n                switch (stringRotate) {\r\n                    case \"0\":\r\n                        //获取方块的世界坐标\r\n                        var v2WorldY = nodePosition3.getPositionY();\r\n                        var v1WorldX = nodePosition3.getPositionX();\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                    case \"180\":\r\n                        //获取方块的世界坐标\r\n                        var v2WorldY = nodePosition3.getPositionY();\r\n                        var v1WorldX = nodePosition3.getPositionX();\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                }\r\n                break;\r\n            case \"L\":\r\n                switch (stringRotate) {\r\n                    case \"0\":\r\n\r\n                        //获取方块的世界坐标\r\n                        var v2WorldY = nodePosition3.getPositionY();\r\n                        var v1WorldX = nodePosition3.getPositionX() - Global.nWidth;\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                    case \"180\":\r\n\r\n                        //获取方块的世界坐标    \r\n                        var v2WorldY = nodePosition3.getPositionY();\r\n                        var v1WorldX = nodePosition3.getPositionX() + Global.nWidth;\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                }\r\n                break;\r\n            case \"Long\":\r\n                switch (stringRotate) {\r\n                    case \"0\":\r\n                        //获取方块的世界坐标\r\n                        var v2WorldY = nodePosition3.getPositionY();\r\n                        var v1WorldX = nodePosition3.getPositionX() - Global.nWidth;\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                    case \"180\":\r\n                        //获取方块的世界坐标    \r\n                        var v2WorldY = nodePosition3.getPositionY();\r\n                        var v1WorldX = nodePosition3.getPositionX();\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                }\r\n                return cc.p(v1WorldX, v2WorldY);\r\n                break;\r\n            case \"Z\":\r\n                switch (stringRotate) {\r\n                    case \"0\":\r\n\r\n                        //获取方块的世界坐标\r\n                        var v2WorldY = nodePosition3.getPositionY();\r\n                        var v1WorldX = nodePosition3.getPositionX() - Global.nWidth;\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                    case \"180\":\r\n\r\n                        //获取方块的世界坐标    \r\n                        var v2WorldY = nodePosition3.getPositionY();\r\n                        var v1WorldX = nodePosition3.getPositionX();\r\n                        return cc.p(v1WorldX, v2WorldY);\r\n                        break;\r\n                }\r\n                break;\r\n        }\r\n    },\r\n    //便遍历俄罗斯方块火苏组，并使它们生成时为隐藏\r\n    TarvelFalse: function () {\r\n        var blockChild = this.nodeBlock.getChildren();\r\n        for (var i = 0; i <= blockChild.length - 1; i++) {\r\n            blockChild[i].active = false;\r\n        }\r\n    },\r\n    //初始化每个俄罗斯方块的颜色\r\n    OnloadColor: function (stringColor1, nodeBlock3) {\r\n        switch (stringColor1) {\r\n            case \"1\":\r\n                nodeBlock3.getComponent(\"OperateBlock\").stringColor = \"green\";\r\n                cc.log(\"1111111111111111111111\" + nodeBlock3.getComponent(\"OperateBlock\").stringColor);\r\n                break;\r\n            case \"2\":\r\n                nodeBlock3.getComponent(\"OperateBlock\").stringColor = \"blue\";\r\n                cc.log(\"22222222222222222222\" + nodeBlock3.getComponent(\"OperateBlock\").stringColor);\r\n                break;\r\n            case \"3\":\r\n                nodeBlock3.getComponent(\"OperateBlock\").stringColor = \"red\";\r\n                cc.log(\"3333333333333333333333\" + nodeBlock3.getComponent(\"OperateBlock\").stringColor);\r\n                break;\r\n        }\r\n    },\r\n    //生成方块\r\n    CopyBlock: function (prefabLBlock, stringShape1) {\r\n        cc.log(\"bbbbbbbbbbbbbbbbbbbbbbbbbbb\");\r\n        if (this.isFirst == false) {\r\n            switch (this.nCreat) {\r\n                case 0:\r\n                    //生成俄罗斯方块\r\n                    this.nodeBlock = cc.instantiate(prefabLBlock);\r\n                    this.TarvelFalse();\r\n                    //获取此时方块的形状\r\n                    this.nodeBlock.parent = this.blockParent;\r\n                    //随机方块位置\r\n                    this.nodeBlock.setPosition(this.setBlockPosition(this.shapeBlock[this.nShape], this.rotateBlock[this.nRotate]));\r\n                    cc.log(this.nodeBlock.getPosition());\r\n                    this.nodeBlock.getComponent(\"OperateBlock\").stringBoloekShape = stringShape1;\r\n                    // this.nodeBlock.getComponent(\"OperateBlock\").isStartDown = true;\r\n                    break;\r\n                case 1:\r\n                    //生成俄罗斯方块\r\n                    this.nodeBlock1 = cc.instantiate(prefabLBlock);\r\n                    //获取此时方块的形状\r\n                    this.nodeBlock1.parent = this.blockParent;\r\n                    cc.log(\"bbbbbbbbbbbbbbbbbbbbbbbbbbb\");\r\n                    this.nodeBlock1.setPosition(this.setBlock1Position(this.shapeBlock[this.nShape], this.next1Node, this.rotateBlock[this.nRotate]));\r\n                    this.nodeBlock1.getComponent(\"OperateBlock\").stringBoloekShape = stringShape1;\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            this.OnLoadBlock(this.nodeBlock1.getComponent(\"OperateBlock\").stringBoloekShape, 0, this.nodeBlock1.getComponent(\"OperateBlock\").nRotateAngle.toString(), this.nodeBlock1.getComponent(\"OperateBlock\").stringColor);\r\n            this.OnLoadBlock(stringShape1, 1, this.rotateBlock[this.nRotate], this.colorBlock[this.nColor]);\r\n        }\r\n    },\r\n    //改变方块颜色\r\n    ChangeColor: function (stringColor1) {\r\n        if (this.isFirst == false) {\r\n            switch (this.nCreat) {\r\n                case 0:\r\n                    var nodeBlockChild = this.nodeBlock.getChildren();\r\n                    var self = this;\r\n                    cc.loader.loadRes(\"picture/\" + stringColor1, cc.SpriteFrame, function (err, txt) {\r\n                        for (var i = 0; i <= 3; i++) {\r\n                            nodeBlockChild[i].getComponent(cc.Sprite).spriteFrame = txt;\r\n                            if (i == 3) {\r\n\r\n                                //打开下落开关\r\n                                self.nodeBlock.getComponent(\"OperateBlock\").fDownTime = Global.nTimeInteval;\r\n                            }\r\n                        }\r\n                    });\r\n                    self.OnloadColor(stringColor1, self.nodeBlock);\r\n                    break;\r\n                case 1:\r\n                    var nodeBlockChild1 = this.nodeBlock1.getChildren();\r\n                    var self = this;\r\n                    cc.loader.loadRes(\"picture/\" + stringColor1, cc.SpriteFrame, function (err, txt) {\r\n                        for (var i = 0; i <= 3; i++) {\r\n                            nodeBlockChild1[i].getComponent(cc.Sprite).spriteFrame = txt;\r\n                        }\r\n                    });\r\n                    self.OnloadColor(stringColor1, self.nodeBlock1);\r\n                    break;\r\n\r\n            }\r\n        }\r\n        else {\r\n            var nodeBlockChild = this.nodeBlock.getChildren();\r\n            // var self=this;\r\n            var stringColor0 = \"\";\r\n            switch (this.nodeBlock.getComponent(\"OperateBlock\").stringColor) {\r\n                case \"red\":\r\n                    stringColor0 = \"3\";\r\n                    break;\r\n                case \"blue\":\r\n                    stringColor0 = \"2\";\r\n                    break;\r\n                case \"green\":\r\n                    stringColor0 = \"1\";\r\n                    break;\r\n            }\r\n            cc.loader.loadRes(\"picture/\" + stringColor0, cc.SpriteFrame, function (err, txt) {\r\n                for (var i = 0; i <= 3; i++) {\r\n                    nodeBlockChild[i].getComponent(cc.Sprite).spriteFrame = txt;\r\n                }\r\n            });\r\n            var nodeBlockChild1 = this.nodeBlock1.getChildren();\r\n            // var stringColor2 = \"\";\r\n            // // cc.log(this.nodeBlock2.getComponent(\"OperateBlock\").stringColor);\r\n            // switch (this.nodeBlock1.getComponent(\"OperateBlock\").stringColor) {\r\n            //     case \"red\":\r\n            //         stringColor2 = \"3\";\r\n            //         break;\r\n            //     case \"blue\":\r\n            //         stringColor2 = \"2\";\r\n            //         break;\r\n            //     case \"green\":\r\n            //         stringColor2 = \"1\";\r\n            //         break;\r\n            // }\r\n            // cc.log(stringColor2);\r\n            for (var i = 0; i <= nodeBlockChild1.length - 1; i++) {\r\n                nodeBlockChild1[i].active = false;\r\n            }\r\n            cc.loader.loadRes(\"picture/\" + stringColor1, cc.SpriteFrame, function (err, txt) {\r\n                for (var i = 0; i <= 3; i++) {\r\n                    nodeBlockChild1[i].getComponent(cc.Sprite).spriteFrame = txt;\r\n                    if (i == 3) {\r\n                        for (var j = 0; j <= nodeBlockChild1.length - 1; j++){\r\n                            nodeBlockChild1[j].active = true;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        // var self = this;\r\n        // var promise=new Promise(function(resolve,reject){\r\n        //     cc.loader.loadRes(\"picture/\"+stringColor1, cc.SpriteFrame, callback);\r\n        // })\r\n        // function callback(err, txt) {\r\n        //     if(err){\r\n        //         resolve();\r\n        //     }\r\n        //     for(var i=0;i<=3;i++)\r\n        //     {\r\n        //         nodeBlockChild[i].getComponent(cc.Sprite).spriteFrame =txt;\r\n        //         if(i==3)\r\n        //         {\r\n        //              //打开下落开关\r\n        //                this.nodeBlock.getComponent(\"OperateBlock\").fDownTime=Global.nTimeInteval;\r\n        //         }\r\n        //     }\r\n        // }\r\n    },\r\n    //判断方块角度\r\n    IsRotate: function (stringRotate, nRotate, stringShape2) {\r\n        if (stringShape2 != \"Square\") {\r\n            switch (stringRotate[nRotate]) {\r\n                case \"0\":\r\n                    this.ChangeRotate(0);\r\n                    break;\r\n                case \"180\":\r\n                    this.ChangeRotate(180);\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            switch (this.nCreat) {\r\n                case 0:\r\n                    this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle = 0;\r\n                    break;\r\n                case 1:\r\n                    this.nodeBlock1.getComponent(\"OperateBlock\").nRotateAngle = 0;\r\n                    break;\r\n            }\r\n            if (this.isFirst) {\r\n                var nodeBoxArray = this.nodeBlock.getChildren();\r\n                cc.log(\"ppppppppppppppppppppppppppppppppppppppp\"+this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle);\r\n                if (this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle == 180) {\r\n                    cc.log(\"qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\"+this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle);\r\n                    for (var i = 0; i <= 3; i++) {\r\n                        nodeBoxArray[i].setPosition(cc.p(nodeBoxArray[i].getPositionY(), -nodeBoxArray[i].getPositionX()));\r\n                        if (i == 3) {\r\n                            for (var j = 0; j <= 3; j++) {\r\n                                nodeBoxArray[j].setPosition(cc.p(nodeBoxArray[j].getPositionY(), -nodeBoxArray[j].getPositionX()));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                var nodeBoxArray1 = this.nodeBlock1.getChildren();\r\n                if (parseInt(stringRotate[nRotate]) == 180) {\r\n                    //     cc.log(\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\");\r\n                    //    this.nodeBlock1.getComponent(\"OperateBlock\").nRotateAngle=180;\r\n                    for (var i = 0; i <= 3; i++) {\r\n                        nodeBoxArray1[i].setPosition(cc.p(nodeBoxArray1[i].getPositionY(), -nodeBoxArray1[i].getPositionX()));\r\n                        if (i == 3) {\r\n                            for (var j = 0; j <= 3; j++) {\r\n                                nodeBoxArray1[j].setPosition(cc.p(nodeBoxArray1[j].getPositionY(), -nodeBoxArray1[j].getPositionX()));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                this.nodeBlock.getComponent(\"OperateBlock\").isStartDown = true;\r\n            }\r\n            this.nCreat++;\r\n            if (this.nCreat == 2) {\r\n                this.nodeBlock.getComponent(\"OperateBlock\").isStartDown = true;\r\n                this.isFirst = true;\r\n            }\r\n        }\r\n    },\r\n    //出生时根据角度改变子块位置\r\n    ChangeRotate: function (nAngle) {\r\n        if (this.isFirst == false) {\r\n            switch (this.nCreat) {\r\n                case 0:\r\n                    //获取此方块的数组\r\n                    var nodeBoxArray = this.nodeBlock.getChildren();\r\n                    if (nAngle == 180) {\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle = 180;\r\n                        for (var i = 0; i <= 3; i++) {\r\n                            nodeBoxArray[i].setPosition(cc.p(nodeBoxArray[i].getPositionY(), -nodeBoxArray[i].getPositionX()));\r\n                            if (i == 3) {\r\n                                for (var j = 0; j <= 3; j++) {\r\n                                    nodeBoxArray[j].setPosition(cc.p(nodeBoxArray[j].getPositionY(), -nodeBoxArray[j].getPositionX()));\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle = 0;\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    //获取此方块的数组\r\n                    var nodeBoxArray1 = this.nodeBlock1.getChildren();\r\n                    if (nAngle == 180) {\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").nRotateAngle = 180;\r\n                        for (var i = 0; i <= 3; i++) {\r\n                            nodeBoxArray1[i].setPosition(cc.p(nodeBoxArray1[i].getPositionY(), -nodeBoxArray1[i].getPositionX()));\r\n                            if (i == 3) {\r\n                                for (var j = 0; j <= 3; j++) {\r\n                                    nodeBoxArray1[j].setPosition(cc.p(nodeBoxArray1[j].getPositionY(), -nodeBoxArray1[j].getPositionX()));\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.nodeBlock1.getComponent(\"OperateBlock\").nRotateAngle = 0;\r\n                    }\r\n                    break;\r\n            }\r\n            this.nCreat++;\r\n            if (this.nCreat == 2) {\r\n                cc.log(this.nodeBlock.getComponent(\"OperateBlock\").stringColor);\r\n                cc.log(this.nodeBlock1.getComponent(\"OperateBlock\").stringColor);\r\n                this.nodeBlock.getComponent(\"OperateBlock\").isStartDown = true;\r\n                this.isFirst = true;\r\n            }\r\n        }\r\n        else {\r\n            var nodeBoxArray = this.nodeBlock.getChildren();\r\n            if (this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle == 180) {\r\n                // this.nodeBlock.getComponent(\"OperateBlock\").nRotateAngle = 180;\r\n                for (var i = 0; i <= 3; i++) {\r\n                    nodeBoxArray[i].setPosition(cc.p(nodeBoxArray[i].getPositionY(), -nodeBoxArray[i].getPositionX()));\r\n                    if (i == 3) {\r\n                        for (var j = 0; j <= 3; j++) {\r\n                            nodeBoxArray[j].setPosition(cc.p(nodeBoxArray[j].getPositionY(), -nodeBoxArray[j].getPositionX()));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            var nodeBoxArray1 = this.nodeBlock1.getChildren();\r\n            if (nAngle == 180) {\r\n                // this.nodeBlock1.getComponent(\"OperateBlock\").nRotateAngle = 180;\r\n                for (var i = 0; i <= 3; i++) {\r\n                    nodeBoxArray1[i].setPosition(cc.p(nodeBoxArray1[i].getPositionY(), -nodeBoxArray1[i].getPositionX()));\r\n                    if (i == 3) {\r\n                        for (var j = 0; j <= 3; j++) {\r\n                            nodeBoxArray1[j].setPosition(cc.p(nodeBoxArray1[j].getPositionY(), -nodeBoxArray1[j].getPositionX()));\r\n                        }\r\n                    }\r\n                }\r\n            }     \r\n            this.nodeBlock.getComponent(\"OperateBlock\").isStartDown = true;\r\n        }\r\n    },\r\n    //判断方块形状\r\n    IsShape: function (stringShape, nShape) {\r\n        switch (stringShape[nShape]) {\r\n            case \"T\":\r\n                //生成方块\r\n                this.CopyBlock(this.prefabT, \"T\");\r\n                //判断方块颜色\r\n                this.IsColor(this.colorBlock, this.nColor);\r\n                this.IsRotate(this.rotateBlock, this.nRotate, \"T\");\r\n                //  this.nRotateAngle   \r\n                break;\r\n            case \"L\":\r\n                this.CopyBlock(this.prefabL, \"L\");\r\n                //判断方块颜色\r\n                this.IsColor(this.colorBlock, this.nColor);\r\n                this.IsRotate(this.rotateBlock, this.nRotate, \"L\");\r\n                break;\r\n            case \"Long\":\r\n                this.CopyBlock(this.prefabLong, \"Long\");\r\n                //判断方块颜色\r\n                this.IsColor(this.colorBlock, this.nColor);\r\n                this.IsRotate(this.rotateBlock, this.nRotate, \"Long\");\r\n                break;\r\n            case \"Z\":\r\n                this.CopyBlock(this.prefabZ, \"Z\");\r\n                //判断方块颜色\r\n                this.IsColor(this.colorBlock, this.nColor);\r\n                this.IsRotate(this.rotateBlock, this.nRotate, \"Z\");\r\n                break;\r\n            case \"Square\":\r\n                this.CopyBlock(this.prefabSquare, \"Square\");\r\n                //判断方块颜色\r\n                this.IsColor(this.colorBlock, this.nColor);\r\n                this.IsRotate(this.rotateBlock, this.nRotate, \"Square\");\r\n                break;\r\n        }\r\n    },\r\n    //判断方块颜色\r\n    IsColor: function (stringColor, nColor) {\r\n        switch (stringColor[nColor]) {\r\n            case \"blue\":\r\n                this.ChangeColor(\"2\");\r\n                break;\r\n            case \"green\":\r\n                this.ChangeColor(\"1\");\r\n                break;\r\n            case \"red\":\r\n                this.ChangeColor(\"3\");\r\n                break;\r\n        }\r\n    },\r\n    start() {\r\n\r\n    },\r\n    //返回触摸点对应的俄罗斯方块的列数\r\n    GetTouchLine: function (worldPosition) {\r\n        //将触摸点的横坐标转化为本地坐标\r\n        var nodePosition = worldPosition - (this.nodeMove.getPositionX() + this.nodeCanvas.getPositionX());\r\n        if (nodePosition > 0) {\r\n            var nWidth1 = Math.floor(nodePosition / (this.nodeMove.width / 20));\r\n            //初始化列数\r\n            var nLine = 0;\r\n            if (nWidth1 == 0 || nWidth1 == 1) {\r\n                nLine = 6;\r\n            }\r\n            else if (nWidth1 == 2 || nWidth1 == 3) {\r\n                nLine = 7;\r\n\r\n            }\r\n            else if (nWidth1 == 4 || nWidth1 == 5) {\r\n                nLine = 8;\r\n\r\n            }\r\n            else if (nWidth1 == 6 || nWidth1 == 7) {\r\n                nLine = 9;\r\n            }\r\n            else {\r\n                nLine = 10;\r\n            }\r\n            cc.log(nLine);\r\n            return nLine;\r\n        }\r\n        if (nodePosition < 0) {\r\n            var nWidth1 = Math.floor((-nodePosition) / (this.nodeMove.width / 20));\r\n            //初始化列数\r\n            var nLine = 0;\r\n            if (nWidth1 == 0 || nWidth1 == 1) {\r\n                nLine = 5;\r\n\r\n            }\r\n            else if (nWidth1 == 2 || nWidth1 == 3) {\r\n                nLine = 4;\r\n\r\n            }\r\n            else if (nWidth1 == 4 || nWidth1 == 5) {\r\n                nLine = 3;\r\n\r\n            }\r\n            else if (nWidth1 == 6 || nWidth1 == 7) {\r\n                nLine = 2;\r\n\r\n            }\r\n            else {\r\n                nLine = 1;\r\n            }\r\n            cc.log(nLine);\r\n            return nLine;\r\n        }\r\n    },\r\n    //获取俄罗斯方块的列数\r\n    GetBlockLine: function () {\r\n        var nLine = (this.nodeBlock.getPositionX() - this.nodeUserParent.getPositionX()) / Global.nWidth + 1;\r\n        return nLine;\r\n    },\r\n    //物体下落后将状态发送到服务器\r\n    SendMsgDown: function () {\r\n        //获取节点子节点数组\r\n        var blockChild = this.nodeBlock.getChildren();\r\n        //  //判断俄罗斯方块是否结束地面\r\n        //  var isCollisionGround=false;\r\n        //判断俄罗斯方块中是否含有22行\r\n        //初始化俄罗斯方块数组列\r\n        var nXArray = [];\r\n        //初始化俄罗斯方块数组行\r\n        var nYArray = [];\r\n        for (var i = 0; i <= 3; i++) {\r\n            var nX = (blockChild[i].getPositionX() + this.node.getPositionX() - this.nodeUserParent.getPositionX()) / Global.nWidth + 1;\r\n            var nY = (blockChild[i].getPositionY() + this.node.getPositionY() - this.nodeUserParent.getPositionY()) / Global.nWidth + 1;\r\n            if (nY = 20) {\r\n                nXArray.push(nX);\r\n                nYArray.push(nY);\r\n            }\r\n            if (nY <= 19) {\r\n                nXArray.push(nX);\r\n                nYArray.push(nY);\r\n            }\r\n        }\r\n    },\r\n    playAudio : function(audioSource){\r\n        cc.audioEngine.play(audioSource,false,1);\r\n    },\r\n    //快速下落\r\n    DownQuick: function () {\r\n        if (this.nodeBlock.getComponent(\"OperateBlock\").isCollision == false) {\r\n            this.playAudio(this.clickAudio);\r\n            this.nodeBlock.getComponent(\"OperateBlock\").fDownTime = Global.nTimeInteval;\r\n        }\r\n    },\r\n    //获取子块在地板父体下的坐标\r\n    GetBoxNode: function (childBox) {\r\n        //获取子块在地板附体下的行列\r\n        var nX = (childBox.getPositionX() + this.nodeBlock.getPositionX() - this.nodeUserParent.getPositionX()) / Global.nWidth + 1;\r\n        var nY = (childBox.getPositionY() + this.nodeBlock.getPositionY() - this.nodeUserParent.getPositionY()) / Global.nWidth + 1;\r\n        cc.log(nX);\r\n        cc.log(nY);\r\n        var x = this.groundChild[nX - 1][nY - 1].getPositionX();\r\n        var y = this.groundChild[nX - 1][nY - 1].getPositionY();\r\n        return cc.p(x, y);\r\n    },\r\n    //根据服务器给的惩罚行数向上移动俄罗斯方块\r\n    PunishUp: function (nDisappearAll) {\r\n        this.arrayChangeNode = [];\r\n        console.log(\"in punishUp nDisappearAll is \",nDisappearAll);\r\n        for (var i = 19; i >= 0; i--) {\r\n            inner:\r\n            for (var j = 0; j <= 9; j++) {\r\n                console.log(\"in punishUp 第\"+i+\"行,第\"+ j + \"列的坐标为(\" + this.groundChild[j][i].x,this.groundChild[j][i].y + \")\");\r\n                console.log(\"in punishUp \" + this.groundChild[j][i].getComponent(\"PrefabState\").isBox);\r\n                if (this.groundChild[j][i].getComponent(\"PrefabState\").isBox) {\r\n                    if (i + nDisappearAll >= 20) {\r\n                        Console.log(nDisappearAll+\"GetBoxNode\");\r\n                        Console.log(i+\"GetBoxNode\");\r\n                        this.isOver=true;\r\n                        continue inner;\r\n                    }\r\n                    for (var l = 0; l <= this.boxParent1.length - 1; l++) {\r\n                        if (this.boxParent1[l].getPositionY() == this.groundChild[j][i].getPositionY() && this.boxParent1[l].getPositionX() == this.groundChild[j][i].getPositionX()) {\r\n                            this.boxParent1[l].setPosition(cc.p(this.groundChild[j][i].getPositionX(), this.groundChild[j][i].getPositionY() + Global.nWidth * nDisappearAll));\r\n                        } \r\n                    }\r\n                    this.arrayChangeNode.push({ \"row\": i, \"col\": j, \"color\": \"white\" });\r\n                    this.groundChild[j][i].getComponent(\"PrefabState\").isBox = false;\r\n                    this.arrayChangeNode.push({ \"row\": i + nDisappearAll, \"col\": j, \"color\": this.groundChild[j][i].getComponent(\"PrefabState\").stringColor });\r\n                    // if((i+nDisappearAll) != 20){\r\n                    //这里该值为undefined\r\n                    console.log(\"in punishUp 当前惩罚行列节点值 \",this.groundChild[j][i + nDisappearAll]);\r\n                    if(this.groundChild[j][i + nDisappearAll] != undefined){\r\n                        this.groundChild[j][i + nDisappearAll].getComponent(\"PrefabState\").isBox = true;\r\n                        this.groundChild[j][i + nDisappearAll].getComponent(\"PrefabState\").stringColor = this.groundChild[j][i].getComponent(\"PrefabState\").stringColor;\r\n                    }    \r\n                    if(i==0&&j==9)\r\n                    {\r\n                        if(this.isOver)\r\n                        {\r\n                            console.log(\"ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\");\r\n                            this.nodeBlock.getComponent(\"OperateBlock\").isGameOver=true;\r\n                        }\r\n                    }\r\n                    // } \r\n                    // this.isMoveState=true;\r\n                    // this.isDisppearState=true;\r\n                }\r\n                // if(i==19&&j==9)\r\n                // {\r\n                //     this.DisappearBox();\r\n                // }\r\n            }\r\n        }\r\n\r\n    },\r\n    //遍历全局字块数组并将最高消层数以上的方块下落\r\n    BoxDown: function (nMaxDisappea, nDisappearAll) {\r\n        //存取消行行行列\r\n        this.nDissppearRow = [{ \"row\": nDisappearAll, \"col\": \"\" }];\r\n        for (var i = nMaxDisappea + 1; i <= 19; i++) {\r\n            for (var j = 0; j <= 9; j++) {\r\n                if (this.groundChild[j][i].getComponent(\"PrefabState\").isBox) {\r\n                    for (var l = 0; l <= this.boxParent1.length - 1; l++) {\r\n                        if (this.boxParent1[l].getPositionY() == this.groundChild[j][i].getPositionY() && this.boxParent1[l].getPositionX() == this.groundChild[j][i].getPositionX()) {\r\n                            this.boxParent1[l].setPosition(cc.p(this.groundChild[j][i].getPositionX(), this.groundChild[j][i].getPositionY() - Global.nWidth * nDisappearAll));\r\n                        }\r\n                    }\r\n                    this.arrayChangeNode.push({ \"row\": i, \"col\": j, \"color\": \"white\" });\r\n                    this.groundChild[j][i].getComponent(\"PrefabState\").isBox = false;\r\n                    this.arrayChangeNode.push({ \"row\": i - nDisappearAll, \"col\": j, \"color\": this.groundChild[j][i].getComponent(\"PrefabState\").stringColor });\r\n                    this.groundChild[j][i - nDisappearAll].getComponent(\"PrefabState\").isBox = true;\r\n                    this.groundChild[j][i - nDisappearAll].getComponent(\"PrefabState\").stringColor = this.groundChild[j][i].getComponent(\"PrefabState\").stringColor;\r\n                }\r\n                // if(i==19&&j==9)\r\n                // {\r\n                //     this.DisappearBox();\r\n                // }\r\n            }\r\n        }\r\n        //显示分数\r\n        this.ShowScore(nDisappearAll,this.userScore);\r\n        cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg({ \"tag1\": 11, \"type\": \"1\", \"score\": cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nUserScore, \"nDisappear1\": nDisappearAll });\r\n        //发送服务器请求\r\n        // this.isMoveState=true;\r\n        this.isDisppearState = true;\r\n    },\r\n    //根据消行层数显示自分数\r\n    ShowScore: function (nDissppearRow1, nodeScore) {\r\n        let nodeScoreString = nodeScore.getComponent(cc.Label).string;\r\n        console.log(\"nodeScoreString is \",nodeScoreString);\r\n        if(nodeScoreString !== \"\"){\r\n            switch (nDissppearRow1) {\r\n                case 1:\r\n                    nodeScoreString = (parseInt(nodeScoreString) + 40).toString();\r\n                    console.log(\"nodeScoreString is \",nodeScoreString);\r\n                    nodeScore.getComponent(cc.Label).string = nodeScoreString;\r\n                    break;\r\n                case 2:\r\n                    nodeScoreString = (parseInt(nodeScoreString) + 90).toString();\r\n                    console.log(\"nodeScoreString is \",nodeScoreString);\r\n                    nodeScore.getComponent(cc.Label).string = nodeScoreString;\r\n                    break;\r\n                case 3:\r\n                    nodeScoreString = (parseInt(nodeScoreString) + 150).toString();\r\n                    console.log(\"nodeScoreString is \",nodeScoreString);\r\n                    nodeScore.getComponent(cc.Label).string = nodeScoreString;\r\n                    break;\r\n                case 4:\r\n                    nodeScoreString = (parseInt(nodeScoreString) + 220).toString();\r\n                    console.log(\"nodeScoreString is \",nodeScoreString);\r\n                    nodeScore.getComponent(cc.Label).string = nodeScoreString;\r\n                    break;\r\n            }\r\n        }\r\n    },\r\n    //俄罗斯方块向右移动\r\n    MoveRight: function (nLine, nLine1) {\r\n        if (nLine == nLine1) {\r\n            return;\r\n        }\r\n        //存取俄罗斯方块的行数\r\n        var nArrayRow = [];\r\n        //存取俄罗斯方块的列数\r\n        var nArrayList = [];\r\n        //获取节点子节点数组\r\n        var blockChild = this.nodeBlock.getChildren();\r\n        //将俄罗斯方块的行列存入数组中\r\n        for (var i = 0; i <= 3; i++) {\r\n            //获取此时组成俄罗斯方块元素的行列\r\n            var nX = (blockChild[i].getPositionX() + this.nodeBlock.getPositionX() - this.nodeUserParent.getPositionX()) / Global.nWidth + 1;\r\n            var nY = (blockChild[i].getPositionY() + this.nodeBlock.getPositionY() - this.nodeUserParent.getPositionY()) / Global.nWidth + 1;\r\n            //    cc.log(nX);\r\n            //    cc.log(nY);\r\n            nArrayList.push(nX);\r\n            nArrayRow.push(nY);\r\n        }\r\n        //从小到大排序行数\r\n        for (var j = 0; j <= 3; j++) {\r\n            if (j <= 2) {\r\n                for (var k = j + 1; k <= 3; k++) {\r\n                    if (nArrayRow[k] < nArrayRow[j]) {\r\n                        var nOldY = nArrayRow[j];\r\n                        nArrayRow[j] = nArrayRow[k];\r\n                        nArrayRow[k] = nOldY;\r\n                        var nOldX = nArrayList[j];\r\n                        nArrayList[j] = nArrayList[k];\r\n                        nArrayList[k] = nOldX;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (nArrayRow[0] <= 19 || (nArrayRow[0] == 20 && this.nodeBlock.getComponent(\"OperateBlock\").stringBoloekShape == \"Long\")) {\r\n            //从小到大排序列数\r\n            for (var j = 0; j <= 3; j++) {\r\n                if (j <= 2) {\r\n                    for (var k = j + 1; k <= 3; k++) {\r\n                        if (nArrayList[k] < nArrayList[j]) {\r\n                            var nOldY = nArrayRow[j];\r\n                            nArrayRow[j] = nArrayRow[k];\r\n                            nArrayRow[k] = nOldY;\r\n                            var nOldX = nArrayList[j];\r\n                            nArrayList[j] = nArrayList[k];\r\n                            nArrayList[k] = nOldX;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (nArrayList[3] == 10) {\r\n                return;\r\n            }\r\n            else {\r\n                this.arrayChangeNode = [];\r\n                //判断方块的下一列是否有方块\r\n                var isHas = false;\r\n                for (var i = 3; i >= 0; i--) {\r\n                    cc.log(nArrayList[i] - 1);\r\n                    cc.log(nArrayRow[i] - 1);\r\n                    this.arrayChangeNode.push({ \"row\": nArrayRow[i] - 1, \"col\": nArrayList[i] - 1, \"color\": \"white\" });\r\n                    // //将俄罗斯方块所在方格置为false\r\n                    // this.groundChild[nArrayList[i] - 1][nArrayRow[i] - 1].getComponent(\"PrefabState\").isBox = false;\r\n                    //判断方块的下一列的方块属性是否为true\r\n                    if (this.groundChild[nArrayList[i]][nArrayRow[i] - 1].getComponent(\"PrefabState\").isBox) {\r\n                        isHas = true;\r\n                    }\r\n                    if (i == 0) {\r\n                        if (isHas) {\r\n                            // for (var j = 0; j <= 3; j++) {\r\n\r\n                            //     //将俄罗斯方块所在方格置为true\r\n                            //     this.groundChild[nArrayList[j] - 1][nArrayRow[j] - 1].getComponent(\"PrefabState\").isBox = true;\r\n                            // }\r\n                            return;\r\n                        }\r\n                        else {\r\n                            for (var k = 0; k <= 3; k++) {\r\n                                this.arrayChangeNode.push({ \"row\": nArrayRow[k] - 1, \"col\": nArrayList[k], \"color\": this.nodeBlock.getComponent(\"OperateBlock\").stringColor });\r\n                                // //将下一列的方块所在方格置为true\r\n                                // this.groundChild[nArrayList[k]][nArrayRow[k] - 1].getComponent(\"PrefabState\").isBox = true;\r\n                                if (k == 3) {\r\n                                    //俄罗斯方块向右移动\r\n                                    this.nodeBlock.x += Global.nWidth;\r\n                                    this.isMoveState = true;\r\n                                    if (this.nodeBlock.getComponent(\"OperateBlock\").isCollision) {\r\n                                        //初始化 1s计时器\r\n                                        this.nodeBlock.getComponent(\"OperateBlock\").fDownTime = 0;\r\n                                        this.nodeBlock.getComponent(\"OperateBlock\").fCollisionTime = 0;\r\n                                    }\r\n                                    //   //初始化 1s计时器\r\n                                    //   this.nodeBlock.getComponent(\"OperateBlock\").fCollisionTime=0;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return;\r\n\r\n        }\r\n    },\r\n    //俄罗斯方块向左移动\r\n    MoveLeft: function (nLine, nLine1) {\r\n        if (nLine == nLine1) {\r\n            return;\r\n        }\r\n        //存取俄罗斯方块的行数\r\n        var nArrayRow = [];\r\n        //存取俄罗斯方块的列数\r\n        var nArrayList = [];\r\n        //获取节点子节点数组\r\n        var blockChild = this.nodeBlock.getChildren();\r\n        //将俄罗斯方块的行列存入数组中\r\n        for (var i = 0; i <= 3; i++) {\r\n            //获取此时组成俄罗斯方块元素的行列\r\n            var nX = (blockChild[i].getPositionX() + this.nodeBlock.getPositionX() - this.nodeUserParent.getPositionX()) / Global.nWidth + 1;\r\n            var nY = (blockChild[i].getPositionY() + this.nodeBlock.getPositionY() - this.nodeUserParent.getPositionY()) / Global.nWidth + 1;\r\n            nArrayList.push(nX);\r\n            nArrayRow.push(nY);\r\n        }       //从小到大排序行数\r\n        for (var j = 0; j <= 3; j++) {\r\n            if (j <= 2) {\r\n                for (var k = j + 1; k <= 3; k++) {\r\n                    if (nArrayRow[k] < nArrayRow[j]) {\r\n                        var nOldY = nArrayRow[j];\r\n                        nArrayRow[j] = nArrayRow[k];\r\n                        nArrayRow[k] = nOldY;\r\n                        var nOldX = nArrayList[j];\r\n                        nArrayList[j] = nArrayList[k];\r\n                        nArrayList[k] = nOldX;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (nArrayRow[0] <= 19 || (nArrayRow[0] == 20 && this.nodeBlock.getComponent(\"OperateBlock\").stringBoloekShape == \"Long\")) {\r\n            //从小到大排序列数\r\n            for (var j = 0; j <= 3; j++) {\r\n                if (j <= 2) {\r\n                    for (var k = j + 1; k <= 3; k++) {\r\n                        if (nArrayList[k] < nArrayList[j]) {\r\n                            var nOldY = nArrayRow[j];\r\n                            nArrayRow[j] = nArrayRow[k];\r\n                            nArrayRow[k] = nOldY;\r\n                            var nOldX = nArrayList[j];\r\n                            nArrayList[j] = nArrayList[k];\r\n                            nArrayList[k] = nOldX;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (nArrayList[0] == 1) {\r\n                return;\r\n            }\r\n            else {\r\n                this.arrayChangeNode = [];\r\n                //判断方块的前一列是否有方块\r\n                var isHas = false;\r\n                for (var i = 0; i <= 3; i++) {\r\n                    this.arrayChangeNode.push({ \"row\": nArrayRow[i] - 1, \"col\": nArrayList[i] - 1, \"color\": \"white\" });\r\n                    // //将俄罗斯方块所在方格置为false\r\n                    // this.groundChild[nArrayList[i] - 1][nArrayRow[i] - 1].getComponent(\"PrefabState\").isBox = false;\r\n                    //判断方块的前一列的方块属性是否为true\r\n                    if (this.groundChild[nArrayList[i] - 2][nArrayRow[i] - 1].getComponent(\"PrefabState\").isBox) {\r\n                        isHas = true;\r\n                    }\r\n                    if (i == 3) {\r\n                        if (isHas) {\r\n                            // for (var j = 0; j <= 3; j++) {\r\n                            //     this.arrayChangeNode.push({ \"row\": nArrayRow[j] - 1, \"col\": nArrayList[j] - 1, \"color\": this.nodeBlock.getComponent(\"OperateBlock\").stringColor });\r\n                            //     //将俄罗斯方块所在方格置为false\r\n                            //     this.groundChild[nArrayList[j] - 1][nArrayRow[j] - 1].getComponent(\"PrefabState\").isBox = true;\r\n                            // }\r\n                            return;\r\n                        }\r\n                        else {\r\n                            for (var k = 0; k <= 3; k++) {\r\n                                this.arrayChangeNode.push({ \"row\": nArrayRow[k] - 1, \"col\": nArrayList[k] - 2, \"color\": this.nodeBlock.getComponent(\"OperateBlock\").stringColor });\r\n                                // //将前一列的方块所在方格置为true\r\n                                // this.groundChild[nArrayList[k] - 2][nArrayRow[k] - 1].getComponent(\"PrefabState\").isBox = true;\r\n                                if (k == 3) {\r\n                                    this.isMoveState = true;\r\n                                    //俄罗斯方块向左移动\r\n                                    this.nodeBlock.x -= Global.nWidth;\r\n                                    if (this.nodeBlock.getComponent(\"OperateBlock\").isCollision) {\r\n                                        //初始化 1s计时器\r\n                                        this.nodeBlock.getComponent(\"OperateBlock\").fDownTime = 0;\r\n                                        this.nodeBlock.getComponent(\"OperateBlock\").fCollisionTime = 0;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n    },\r\n    //遍历游戏场景的字块中的isBox属性是否为true,并消除代码\r\n    DisappearBox: function () {\r\n        \r\n        this.arrayChangeNode = [];\r\n        this.nDissppearRow = [{ \"row\": 0, \"col\": \"\" }];\r\n        //初始化消行行数\r\n        var nDisappear = [];\r\n        for (var i = 0; i <= 19; i++) {\r\n            for (var j = 0; j <= 9; j++) {\r\n                if (j == 0) {\r\n                    //判断i行有多少个true\r\n                    this.nTrue = 0;\r\n                }\r\n                if (this.groundChild[j][i].getComponent(\"PrefabState\").isBox) {\r\n                    this.nTrue++;\r\n                }\r\n                if (j == 9) {\r\n                    for (var a = 0; a <= 9; a++) {\r\n                        cc.log(this.groundChild[a][i].getComponent(\"PrefabState\").isBox);\r\n                    }\r\n                    if (this.nTrue == 10) {\r\n\r\n                        cc.log(\"ppppppppppppppppppppppppppppppppppppp\");\r\n                        //遍历全局字块数组并消除整行方块isBox都为true的节点\r\n                        this.TraversalNodeBox(this.groundChild[j][i].getPositionY());\r\n                        //将消除的方块的isBox重置false\r\n                        for (var k = 0; k <= 9; k++) {\r\n                            this.arrayChangeNode.push({ \"row\": i, \"col\": k, \"color\": \"white\" });\r\n                            this.groundChild[k][i].getComponent(\"PrefabState\").isBox = false;\r\n                        }\r\n                        nDisappear.push(i);\r\n                    }\r\n                    if (i == 19 && nDisappear.length != 0) {\r\n                        this.playAudio(this.removeAudio);\r\n                        //当消行层总数为1行是\r\n                        if (nDisappear.length == 1) {\r\n                            this.BoxDown(nDisappear[0], nDisappear.length);\r\n                        }\r\n                        else {\r\n                            //从小到达排序行数\r\n                            for (var k = 0; k <= nDisappear.length - 1; k++) {\r\n                                for (var l = k + 1; l <= nDisappear.length - 1; l++) {\r\n                                    if (k <= 2) {\r\n                                        if (nDisappear[l] < nDisappear[k]) {\r\n                                            var nMin = nDisappear[k];\r\n                                            nDisappear[k] = nDisappear[l];\r\n                                            nDisappear[l] = nMin;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            this.BoxDown(nDisappear[nDisappear.length - 1], nDisappear.length);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        //当敌人消行是\r\n        if (this.isDisppearEnemy) {\r\n            console.log(\"=======================this.isDisppearEnemy\");\r\n            //判断此时方块落下时是否消行\r\n            cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg({ \"tag1\": 12, \"type\": \"1\", \"score\": cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nUserScore, \"nMapRow\": \"\", \"nMapCol\": \"\", \"changeMapList1\": this.arrayChangeNode, \"removeRow\": nDisappear.length });\r\n            if (this.nDissppearRow != 0) {\r\n                cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg({ \"tag1\": 9, \"type\": \"1\", \"score\": cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nUserScore, \"nMapRow\": \"\", \"nMapCol\": \"\", \"changeMapList1\": this.arrayChangeNode, \"state1\": 1 });\r\n            }\r\n            this.isDisppearEnemy = false;\r\n        }\r\n    },\r\n    update(dt) {\r\n        if(Global.advertisement !== null){\r\n            //隐藏广告\r\n            Global.advertisement.hide();\r\n        }\r\n        if(!this.showNoticeHelp){\r\n            if(this.isWin)\r\n            {\r\n                this.nodeBlock.getComponent(\"OperateBlock\").isGameOver=true;\r\n                //显示广告\r\n                // cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").showAdvice();\r\n                this.playAudio(this.loseAudio);\r\n                return;\r\n            }\r\n            if (this.nodeBlock.getComponent(\"OperateBlock\").isGameOver&&this.isSend==false) {\r\n                this.lose=true;\r\n                cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg({ \"tag1\": 4, \"type\": \"1\", \"score\": cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nUserScore, \"nMapRow\": \"\", \"nMapCol\": \"\", \"result_score\":this.userScore.getComponent(cc.Label).string});\r\n                cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg({ \"tag1\": 13, \"type\": \"1\", \"score\": cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nUserScore, \"nMapRow\": \"\", \"nMapCol\": \"\", \"result\":-1 });\r\n                cc.log(\"=======================================================\");\r\n                // cc.find(\"New Sprite(Splash)\").opacity = 120;\r\n                this.darkNode.active = true;\r\n                this.overBackGround.active = true;\r\n                this.isSend=true;\r\n                // //显示激励视频\r\n                cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").showAdvice(\"adunit-cba9712c1d68c59d\");\r\n                return;\r\n            }\r\n            if (this.isMoveState) {\r\n                cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg({ \"tag1\": 9, \"type\": \"1\", \"score\": cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nUserScore, \"nMapRow\": \"\", \"nMapCol\": \"\", \"changeMapList1\": this.arrayChangeNode });\r\n                this.isMoveState = false;\r\n            }\r\n            if (this.nodeBlock.getComponent(\"OperateBlock\").isDownState) {\r\n                cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg({ \"tag1\": 9, \"type\": \"1\", \"score\": cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nUserScore, \"nMapRow\": \"\", \"nMapCol\": \"\", \"changeMapList1\": this.nodeBlock.getComponent(\"OperateBlock\").arrayChangeNode });\r\n                this.nodeBlock.getComponent(\"OperateBlock\").isDownState = false;\r\n            }\r\n            if (this.isRotateState) {\r\n                cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg({ \"tag1\": 9, \"type\": \"1\", \"score\": cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nUserScore, \"nMapRow\": \"\", \"nMapCol\": \"\", \"changeMapList1\": this.arrayChangeNode });\r\n                this.isRotateState = false;\r\n            }\r\n            if (this.isDisppearState && this.isDisppearEnemy == false) {\r\n                for(var i=0;i<=this.arrayChangeNode.length-1;i++)\r\n                {\r\n                    console.log(JSON.stringify(this.arrayChangeNode[i])+\"isDisppearState11111111111111111111111111\");\r\n                }\r\n               \r\n                cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg({ \"tag1\": 9, \"type\": \"1\", \"score\": cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nUserScore, \"nMapRow\": \"\", \"nMapCol\": \"\", \"changeMapList1\": this.arrayChangeNode, \"state1\": 1 });\r\n                cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg({ \"tag1\": 6, \"type\": \"1\", \"score\": cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nUserScore, \"nMapRow\": \"\", \"nMapCol\": \"\", \"changeMapList1\": this.arrayChangeNode, \"removeMapList1\": this.nDissppearRow });\r\n                this.isDisppearState = false;\r\n            }\r\n            if (this.isPunish) {\r\n                cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg({ \"tag1\": 9, \"type\": \"1\", \"score\": cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nUserScore, \"nMapRow\": \"\", \"nMapCol\": \"\", \"changeMapList1\": this.arrayChangeNode });\r\n                this.isPunish = false;\r\n            }\r\n            if (cc.sys.isNative) {\r\n                if (this.isOutSlide == false) {\r\n                    //当触摸点的列大于俄罗斯方块的列数\r\n                    if (this.GetTouchLine(this.positionTouchX) > this.GetBlockLine()) {\r\n                        //执行向右移动代码\r\n                        this.MoveRight(this.GetTouchLine(this.positionTouchX), this.GetBlockLine());\r\n                        this.isOutSlide = true;\r\n                    }\r\n                    if (this.GetTouchLine(this.positionTouchX) < this.GetBlockLine()) {\r\n                        //执行向左移动代码\r\n                        this.MoveLeft(this.GetTouchLine(this.positionTouchX), this.GetBlockLine());\r\n                        this.isOutSlide = true;\r\n                    }\r\n                }\r\n                //快速下落\r\n                if (this.isOutDown == false) {\r\n                    this.DownQuick();\r\n                }\r\n            }\r\n            else {\r\n                if (this.isOutSlide == false) {\r\n                    //当触摸点的列大于俄罗斯方块的列数\r\n                    if (this.GetTouchLine(this.positionTouchX) > this.GetBlockLine()) {\r\n                        //执行向右移动代码\r\n                        this.MoveRight(this.GetTouchLine(this.positionTouchX), this.GetBlockLine());\r\n                        this.isOutSlide = true;\r\n    \r\n                    }\r\n                    if (this.GetTouchLine(this.positionTouchX) < this.GetBlockLine()) {\r\n                        //执行向左移动代码\r\n                        this.MoveLeft(this.GetTouchLine(this.positionTouchX), this.GetBlockLine());\r\n                        this.isOutSlide = true;\r\n                    }\r\n                }\r\n                //快速下落\r\n                if (this.isOutDown == false) {\r\n                    this.DownQuick();\r\n                }\r\n            }\r\n            if (this.nodeBlock.getComponent(\"OperateBlock\").isStationary) {\r\n                // this.boxParent1=this.boxParent.getChildren();\r\n                //获取此方块的数组\r\n                var nodeBoxArray = this.nodeBlock.getChildren();\r\n                for (var i = 0; i <= 3; i++) {\r\n                    nodeBoxArray[0].setPosition(this.GetBoxNode(nodeBoxArray[0]));\r\n                    cc.log(nodeBoxArray[0].getPosition());\r\n                    nodeBoxArray[0].parent = this.boxParent;\r\n                    if (i == 3) {\r\n                        this.nodeBlock.getComponent(\"OperateBlock\").isChangeParent = true;\r\n                    }\r\n                }\r\n            }\r\n            if (this.nodeBlock.getComponent(\"OperateBlock\").isChangeParent) {\r\n                //消除以后落下俄罗斯方块\r\n                this.DisappearBox();\r\n                var nodeBoxArray1 = this.boxParent.getChildren();\r\n                // this.nodeBlock.getComponent(\"OperateBlock\").isStationary=false;\r\n                // this.nodeBlock.getComponent(\"OperateBlock\").isChangeParent=false;\r\n                cc.log(this.nodeBlock.getChildren());\r\n                //生成新的俄罗斯方块\r\n                this.GetBlock();\r\n                this.isOutDown = true;\r\n                this.isOutSlide = true;\r\n                this.nodeBlock.getComponent(\"OperateBlock\").isStationary = false;\r\n                this.nodeBlock.getComponent(\"OperateBlock\").isChangeParent = false;\r\n            }\r\n        }\r\n    },\r\n    share : function(){\r\n        if(CC_WECHATGAME){\r\n            console.log(\"首页share\");\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").shareFriends();\r\n        }else if(cc.sys.isNative){\r\n            //原生平台分享\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nativeShare();\r\n        }\r\n    }\r\n    // },\r\n});\r\n","// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        //方块预制体的属性\r\n        isBox:false,\r\n        isFilled:0,\r\n        type : -1,\r\n        innerNode : null,\r\n\r\n\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n       this.stringColor=\"\";\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n   //点击back\r\n   PressBack:function(){\r\n       cc.director.loadScene(\"Main\");\r\n   },\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n    \r\n    properties: {\r\n        //获取暂停界面节点\r\n        nodeStop:{\r\n            default:null,\r\n            type:cc.Node\r\n        },\r\n        darkNode : cc.Node,\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        // var self=this;\r\n        // this.isPress=false;\r\n        // this.node.on(cc.Node.EventType.MOUSE_DOWN, function (event) {\r\n        //       cc.log(\"aaaaaaaaa\");\r\n        //     self.isPress=true;\r\n        //   }, this);\r\n        //   // 使用枚举类型来注册\r\n        //   this.node.on(cc.Node.EventType.MOUSE_UP, function (event) {\r\n        //     self.isPress=false;\r\n        //   }, this);\r\n\r\n    },\r\n  //按下暂停按钮\r\n  PressPause:function(){\r\n    \r\n      //显示暂停界面\r\n      this.nodeStop.active=true;\r\n      cc.director.pause();   \r\n  },\r\n  //按下继续\r\n  PressContinue:function(){\r\n      //恢复游戏主循环\r\n     cc.director.resume();\r\n     this.nodeStop.active=false;\r\n     this.darkNode.active = false;\r\n  },\r\n    //按下返回\r\n    PressBack:function(){\r\n        cc.director.resume(); \r\n        cc.director.loadScene(\"OneChoose\");\r\n    },\r\n      //按下重新开始\r\n    PressRestart:function(){\r\n        //恢复游戏主循环\r\n        cc.director.resume();\r\n        cc.director.loadScene(\"Game1\");\r\n        this.darkNode.active = false;\r\n    },\r\n    //点击 再来一局\r\n    PressNext:function(){\r\n        if(cc.sys.isNative){\r\n            cc.director.resume();\r\n        }\r\n        this.darkNode.active = false;\r\n        //给服务器发送消息\r\n        cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg({\"tag1\":1,\"type\":\"1\",\"score\":\"\",\"nMapRow\":\"\",\"nMapCol\":\"\"});\r\n        console.log(\"进入游戏匹配界面\");\r\n        cc.director.loadScene(\"MatchUser\");\r\n\r\n    },\r\n    PressTuiChu:function(){\r\n        if(cc.sys.isNative){\r\n            cc.director.resume();\r\n        }\r\n        this.darkNode.active = false;\r\n        cc.director.loadScene(\"PersonsChoose\");\r\n    },\r\n    start () {\r\n        // if(this.isPress)\r\n        // {\r\n        //     Global.game1Main.DownQuick();\r\n        // }\r\n    },\r\n    update (dt) {\r\n        \r\n        // if(this.isPress)\r\n        // {\r\n        //     Global.game1Main.DownQuick();\r\n        // }\r\n    },\r\n});\r\n","// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\nwindow.Global = {\r\n    //声明全局Game1Main\r\n     game1Main:null,\r\n     //单机版小方块的宽度\r\n     nWidth:72,\r\n     //单机板浦友浦友的小块宽度\r\n     nWidthPuYo:120,        \r\n     //俄罗斯方块下落时间间隔\r\n     nTimeInteval:0.7,  \r\n     //游戏界面背景框边的长度\r\n     nSide:8,\r\n     //噗呦噗呦背景狂的长度\r\n     nSide1:12,   \r\n     //微信是否登录成功\r\n     wechatSuccess : false,    \r\n     //开始对战\r\n     startWar : false,      \r\n     advertisement : null,\r\n     videoAdIsClick : false, \r\n     //生成对手游戏背景\r\n     CreatBackGround:function(arrayBackGround,nRow,nLine,prefab,groundParent,width){\r\n         cc.log(\"arrayBackGround111111111111111111111\"+arrayBackGround);\r\n         cc.log(\"nRow111111111111111111111111\"+nRow);\r\n         cc.log(\"nLine111111111111111111\"+nLine);\r\n         cc.log(prefab+\"prefab1111111111111111111111111111\")\r\n        for(var i=0;i<=nLine-1;i++)\r\n        {\r\n            arrayBackGround[i]=[];\r\n        }\r\n        for(var i=0;i<=nLine-1;i++)\r\n        {\r\n            for(var j=0;j<=nRow-1;j++)\r\n            {\r\n                var groundNode=cc.instantiate(prefab);\r\n                groundNode.parent=groundParent;\r\n                groundNode.setPosition(cc.p(i*width,j*width));\r\n                arrayBackGround[i].push(groundNode);\r\n                if(i === 0 && j === 0){\r\n                    console.log(\"第0列第0行的节点坐标是\",arrayBackGround[i][j].x,arrayBackGround[i][j].y);\r\n                }\r\n            }\r\n        }  \r\n     },\r\n     //从小到大排序数组行数\r\n     SortArray:function(nArrayLength,nLineX,nRowY){\r\n        for(var k=0;k<=nArrayLength-1;k++)\r\n        {\r\n            if(k<=nArrayLength-2)\r\n            {\r\n                for(var l=k+1;l<=3;l++)\r\n                {\r\n                    if(nRowY[l]<nRowY[k])\r\n                    {\r\n                        var oldX=nLineX[k];\r\n                        nLineX[k]=nLineX[l];\r\n                        nLineX[l]=oldX;\r\n                         var oldY=nRowY[k];\r\n                         nRowY[k]=nRowY[l];\r\n                         nRowY[l]=oldY;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n     },\r\n     //设置背景父节点位置 父节点 和背景节点在同一个坐标系里\r\n     SetBackground:function(nodeBox,groundParent,nBox,nSide){\r\n        var x=nodeBox.getPositionX()-nodeBox.width/2+nSide+nBox/2;\r\n        var y=nodeBox.getPositionY()-nodeBox.height/2+nSide+nBox/2;\r\n        groundParent.setPosition(x,y);\r\n\r\n     },\r\n      //网络板小方块的快宽度\r\n      nServerWidth : 30,\r\n      nServerFigureWidth : 50,\r\n      //初始化敌人地图\r\n    /**\r\n     *@param  {外框上边缘的厚度} up\r\n     * @param  {外框左右边缘的厚度} lr\r\n     * @param  {背景网格的预制体} back\r\n     * @param  {行数} row\r\n     * @param  {列数} col\r\n     */\r\n    initMapForEnemy : function(up,lr,back,row,col){\r\n        //初始化y坐标(从下往上生成网格)\r\n        var y = -this.nodeHeight/2 + this.girdSize/2 + up;\r\n        //初始化x坐标\r\n        var x = -this.nodeWidth/2 + this.girdSize/2 + lr;\r\n        console.log(\"--->>>>x is \" + x);\r\n        console.log(\"--->>>>row is \" + row);\r\n        console.log(\"--->>>>col is \" + col);\r\n        this.backGroundArr = [];\r\n        this.map = [];\r\n        //12行6列的网格\r\n        for(var i = 0;i < col;i++){\r\n            //设置它的y坐标\r\n            var tempX =x + i * this.girdSize + 1;\r\n            tempX = Number(tempX.toFixed(2));\r\n            console.log(\"--->>>>tempX is \" + tempX);\r\n            this.backGroundArr[i] = [];\r\n            this.map[i] = [];\r\n            for(var j = 0; j < row;j++){\r\n                var outArr = this.backGroundArr[i];\r\n                var mapData = this.map[i];\r\n                var tempY = y + j * this.girdSize + 1;\r\n                tempY = Number(tempY.toFixed(2));\r\n                console.log(\"--->>>>tempY is \" + tempY);\r\n                //y坐标不变，x坐标要变\r\n                var tempPrefab = this.setPrefabPosition(back,tempX,tempY,this.node);\r\n                if(arguments.length === 6){\r\n                    tempPrefab.getComponent(arguments[5]).isFilled = 0;\r\n                    // tempPrefab.isFilled = 0;\r\n                    // console.log(\"tempPrefab.isFilled is \" + tempPrefab.isFilled);\r\n                    tempPrefab.getComponent(arguments[5]).type = -1;\r\n                    tempPrefab.getComponent(arguments[5]).innerNode = null;\r\n                }else if(arguments.length === 5){\r\n                    // var node = new Shape(tempPrefab,-1);\r\n                    tempPrefab.getComponent(\"Back\").isFilled = 0;\r\n                    // tempPrefab.isFilled = 0;\r\n                    // console.log(\"tempPrefab.isFilled is \" + tempPrefab.isFilled);\r\n                    tempPrefab.getComponent(\"Back\").type = -1;\r\n                    tempPrefab.getComponent(\"Back\").innerNode = null;\r\n                }\r\n                \r\n                // var shape = new Shape(tempPrefab,-1);\r\n                outArr[j]=tempPrefab;\r\n                mapData[j] = 0;\r\n            }\r\n        }\r\n        console.log(\"backGroundArr is \" +this.backGroundArr);\r\n    }\r\n};\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad() {\r\n        //初始化旋转后的实际x坐标\r\n        this.nPositionX = 0;\r\n        //初始化旋转后的实际y坐标\r\n        this.nPositionY = 0;\r\n        //初始化碰撞开关\r\n        this.isCollision = false;\r\n        //获取 此噗呦块的形状\r\n        this.stringBoloekShape = \"\";\r\n        this.nRotateAngle = 0;\r\n        //初始化结束游戏开关\r\n        this.isGameOver = false;\r\n        this.isStationary = false;\r\n        //初始化颜色数量\r\n        this.nColor = 0;\r\n        //获取此噗呦块的字数组\r\n        this.puyouChild = this.node.getChildren();\r\n        //初始化数组的行]\r\n        this.nRow = [];\r\n        //初始化数组的列\r\n        this.nLine = [];\r\n        this.isChangeParent = false;\r\n        //初始化噗呦块碰撞后的帧数\r\n        this.nCollisionBack = 0;\r\n        // Global.SortArray(this.puyouChild.length, this.nRow, this.nLine);\r\n        //控制噗呦块的下落速度\r\n        this.nDownSpeed=24;\r\n    },\r\n    BlockDown: function () {\r\n        //判断噗呦方块是否移动过一次\r\n        var isMove = true;\r\n        //获取节点子节点数组\r\n        var blockChild = this.node.getChildren();\r\n        //  //判断噗呦方块是否结束地面\r\n        //  var isCollisionGround=false;\r\n        //判断噗呦方块中是否含有22行\r\n        for (var i = 0; i <= blockChild.length - 1; i++) {\r\n            var nY = (blockChild[i].getPositionY() + this.node.getPositionY() - cc.find(\"GroundParent\").getPositionY()) / Global.nWidthPuYo + 1;\r\n            cc.log(nY + \"=======================================================================\");\r\n            if (nY == 14) {\r\n                isMove = false;\r\n            }\r\n        }\r\n        if (isMove == false) {\r\n            //初始化噗呦方块中第21行方块的数组下表\r\n            var nBoxArray = [];\r\n            //初始化噗呦方块中第21行方块的数组列\r\n            var nXArray = [];\r\n            //初始化噗呦方块中第21行方块的数组行\r\n            var nYArray = [];\r\n            //遍历噗呦方块并并判断第21行的下面是否为true\r\n            for (var i = 0; i <= blockChild.length - 1; i++) {\r\n                this.CountPosition(blockChild[i]);\r\n                //获取此时组成噗呦方块元素的行列\r\n                var nX = (this.nPositionX + this.node.getPositionX() - cc.find(\"GroundParent\").getPositionX()) / Global.nWidthPuYo + 1;\r\n                var nY = (this.nPositionY + this.node.getPositionY() - cc.find(\"GroundParent\").getPositionY()) / Global.nWidthPuYo + 1;\r\n                if (nY == 13) {\r\n                    if (Global.game1Main.userGroundChild[nX - 1][nY - 2].getComponent(\"BoxState\").isBox) {\r\n                        this.isGameOver = true;\r\n                    }\r\n                    //    else\r\n                    //    {\r\n                    //        nBoxArray.push(i);\r\n                    //        nXArray.push(nX);\r\n                    //        nYArray.push(nY);\r\n                    //    }\r\n                }\r\n                // if(i==3&&this.isGameOver==false)\r\n                // {\r\n                // //初始化变化方块数组\r\n                // this.arrayChangeNode=[];\r\n                // // this.node.y -=Global.nWidthPuYo;\r\n                // if(nBoxArray.length>=2)\r\n                // {\r\n                //    for(var j=0;j<=nBoxArray.length-1;j++)\r\n                //    {\r\n                //       Global.game1Main.userGroundChild[nXArray[j]-1][nYArray[j]-2].getComponent(\"BoxState\").stringColor=this.stringColor;\r\n                //       Global.game1Main.userGroundChild[nXArray[j]-1][nYArray[j]-2].getComponent(\"BoxState\").isBox=true;    \r\n                //       this.arrayChangeNode.push({\"row\":nYArray[j]-2,\"col\":nXArray[j]-1,\"color\":this.stringColor}); \r\n                //    }\r\n                // }\r\n                // if(nBoxArray.length==1)\r\n                // {\r\n                //     cc.log(nXArray[0]-1);\r\n                //     cc.log(nYArray[0]-2);\r\n                //     cc.log(Global.game1Main.userGroundChild[nXArray[0]-1][nYArray[0]-2].getComponent(\"BoxState\").stringColor);\r\n                //     Global.game1Main.userGroundChild[nXArray[0]-1][nYArray[0]-2].getComponent(\"BoxState\").stringColor=this.stringColor;\r\n                //     Global.game1Main.userGroundChild[nXArray[0]-1][nYArray[0]-2].getComponent(\"BoxState\").isBox=true;  \r\n                //     this.arrayChangeNode.push({\"row\":nYArray[0]-2,\"col\":nXArray[0]-1,\"color\":this.stringColor}); \r\n                // }\r\n                // this.node.y -=Global.nWidth;\r\n                // this.isDownState=true;\r\n                // }     \r\n            }\r\n        }\r\n        else {\r\n            //存取噗呦块的行数\r\n            var nArrayRow = [];\r\n            //存取噗呦方块的列数\r\n            var nArrayList = [];\r\n            //存取噗呦方块的下标\r\n            this.arratSubScript = [];\r\n            this.arrayX = [];\r\n            this.arrayY = [];\r\n            //将噗呦方块的行列存入数组中\r\n            for (var i = 0; i <= blockChild.length - 1; i++) {\r\n                this.CountPosition(blockChild[i]);\r\n                //获取此时组成噗呦方块元素的行列\r\n                var nX = (this.nPositionX + this.node.getPositionX() - cc.find(\"GroundParent\").getPositionX()) / Global.nWidthPuYo + 1;\r\n                var nY = (this.nPositionY + this.node.getPositionY() - cc.find(\"GroundParent\").getPositionY()) / Global.nWidthPuYo + 1;\r\n                nArrayList.push(nX);\r\n                nArrayRow.push(nY);\r\n                this.arratSubScript.push(i);\r\n            }\r\n\r\n            //从小到大排序行数\r\n            for (var j = 0; j <= blockChild.length - 1; j++) {\r\n                if (j <= blockChild.length - 2) {\r\n                    for (var k = j + 1; k <= blockChild.length - 1; k++) {\r\n                        if (nArrayRow[k] < nArrayRow[j]) {\r\n                            var nOldY = nArrayRow[j];\r\n                            nArrayRow[j] = nArrayRow[k];\r\n                            nArrayRow[k] = nOldY;\r\n                            var nOldX = nArrayList[j];\r\n                            nArrayList[j] = nArrayList[k];\r\n                            nArrayList[k] = nOldX;\r\n                            var nSubScript = this.arratSubScript[j];\r\n                            this.arratSubScript[j] = this.arratSubScript[k];\r\n                            this.arratSubScript[k] = nSubScript;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (this.isGameOver == false) {\r\n                if (nArrayRow[0] == 1) {\r\n                    for (var i = 0; i <= nArrayRow.length - 1; i++) {\r\n                        this.arrayX.push(nArrayList[i]);\r\n                        this.arrayY.push(nArrayRow[i]);\r\n                    }\r\n                    //    this.fCollisionTime=0;\r\n                    this.isCollision = true;\r\n                    return;\r\n                }\r\n                else {\r\n                    this.isOver = false;\r\n                    //存取该块的行列数组\r\n                    // var blockChild=this.node.getChildren();\r\n                    for (var i = 0; i <= blockChild.length - 1; i++) {\r\n                        this.CountPosition(blockChild[i]);\r\n                        //获取此时组成噗呦方块元素的行列\r\n                        var nX = (this.nPositionX + this.node.getPositionX() - cc.find(\"GroundParent\").getPositionX()) / Global.nWidthPuYo + 1;\r\n                        var nY = (this.nPositionY + this.node.getPositionY() - cc.find(\"GroundParent\").getPositionY()) / Global.nWidthPuYo + 1;\r\n                        if (i == 0) {\r\n                            this.nBox = 0;\r\n                            // this.isDown = false;\r\n                        }\r\n                        this.GetShape(this.stringBoloekShape, i, nX, nY, this.nRotateAngle);\r\n                        if (i == blockChild.length - 1) {\r\n                            for (var i = 0; i <= nArrayRow.length - 1; i++) {\r\n                                this.arrayX.push(nArrayList[i]);\r\n                                this.arrayY.push(nArrayRow[i]);\r\n                            }\r\n                        }\r\n                        // if (i == blockChild.length-1) {\r\n                        //     this.fDownTime = 0;\r\n                        // }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    AddBoxNumber: function (a, b) {\r\n        cc.log(a);\r\n        // cc.log(b);\r\n        // cc.log( this.node.getPositionY());\r\n        if (Global.game1Main.userGroundChild[a - 1][b - 2].getComponent(\"BoxState\").isBox == false) {\r\n            this.nBox++;\r\n        }\r\n        else {\r\n            if (b == 13) {\r\n                // cc.log(this.nRotateAngle);\r\n                // cc.log(this.stringBoloekShape);\r\n                // cc.log(\"0-------------------------------------\");\r\n                this.isGameOver = true;\r\n            }\r\n        }\r\n    },\r\n    //下落物体并将物体的false置为true\r\n    DownBlock: function () {\r\n        // if (this.isDown == false) {\r\n        //     //存取噗呦方块的行数\r\n        //     var nArrayRow = [];\r\n        //     //存取噗呦方块的列数\r\n        //     var nArrayList = [];\r\n        //     //获取节点子节点数组\r\n        //     var blockChild = this.node.getChildren();\r\n        //     this.arrayChangeNode = [];\r\n        //     for (var i = 0; i <= blockChild.length - 1; i++) {\r\n        //         //获取此时组成噗呦方块元素的行列\r\n        //         var nX = (blockChild[i].getPositionX() + this.node.getPositionX() - cc.find(\"GroundParent\").getPositionX()) / Global.nWidthPuYo + 1;\r\n        //         var nY = (blockChild[i].getPositionY() + this.node.getPositionY() - cc.find(\"GroundParent\").getPositionY()) / Global.nWidthPuYo + 1;\r\n        //         if (nY <= 12) {\r\n        //             Global.game1Main.userGroundChild[nX - 1][nY - 1].getComponent(\"BoxState\").isBox = true;\r\n        //             Global.game1Main.userGroundChild[nX - 1][nY - 1].getComponent(\"BoxState\").stringColor = blockChild[i].getComponent(\"InitPrefabState\").stringColor;\r\n        //         }\r\n        //     }\r\n        // }\r\n        // this.isDown = true;\r\n    },\r\n    GetShape: function (stringBlock, nArray, nx, ny, nRotate1) {\r\n        // //判断下落快中是否有行数大于20行的\r\n        // if (ny > 20) {\r\n        //     this.isOver = true;\r\n        // }\r\n        switch (stringBlock) {\r\n            case \"L\":\r\n                if (nRotate1 == 0 || nRotate1 == 360) {\r\n                    switch (nArray) {\r\n                        case 0:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 2:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                    }\r\n\r\n                    if (this.nBox == 2) {\r\n                        this.DownBlock();\r\n                    }\r\n                    else {\r\n                        if (nArray == 2) {\r\n\r\n                            if (this.isOver) {\r\n                                //  this.isGameOver=true;\r\n                            }\r\n                            this.isCollision = true;\r\n\r\n                        }\r\n                    }\r\n                }\r\n                else if (nRotate1 == 90) {\r\n                    switch (nArray) {\r\n                        case 1:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 2:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                    }\r\n\r\n                    if (this.nBox == 2) {\r\n                        this.DownBlock();\r\n                    }\r\n                    else {\r\n                        if (nArray == 2) {\r\n                            if (this.isOver) {\r\n                                // this.isGameOver=true;\r\n                            }\r\n                            this.isCollision = true;\r\n\r\n                        }\r\n                    }\r\n\r\n                }\r\n                else if (nRotate1 == 180) {\r\n                    switch (nArray) {\r\n                        case 1:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 2:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                    }\r\n\r\n                    if (this.nBox == 2) {\r\n                        this.DownBlock();\r\n                    }\r\n                    else {\r\n                        if (nArray == 2) {\r\n                            if (this.isOver) {\r\n                                // this.isGameOver=true;\r\n                            }\r\n                            this.isCollision = true;\r\n\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    switch (nArray) {\r\n                        case 0:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 1:\r\n                            cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                    }\r\n\r\n                    if (this.nBox == 2) {\r\n                        this.DownBlock();\r\n                    }\r\n                    else {\r\n                        if (nArray == 2) {\r\n                            if (this.isOver) {\r\n                                // this.isGameOver=true;\r\n                            }\r\n                            this.isCollision = true;\r\n\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case \"Long\":\r\n                if (nRotate1 == 0 || nRotate1 == 360) {\r\n                    if (nArray == 0) {\r\n\r\n                        this.AddBoxNumber(nx, ny);\r\n                    }\r\n                    if (this.nBox == 1) {\r\n                        this.DownBlock();\r\n                    }\r\n                    else {\r\n                        if (nArray == 1) {\r\n                            if (this.isOver) {\r\n                                // this.isGameOver=true;\r\n                            }\r\n                            this.isCollision = true;\r\n                        }\r\n                    }\r\n                }\r\n                else if (nRotate1 == 90) {\r\n\r\n                    // if (nArray == 0) {\r\n                    //     this.AddBoxNumber(nx, ny);\r\n                    // }\r\n                    switch (nArray) {\r\n                        case 0:\r\n\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 1:\r\n\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                    }\r\n                   \r\n                    if (this.nBox == 2) {\r\n                        this.DownBlock();\r\n                    }\r\n                    else {\r\n                        if (nArray == 1) {\r\n                            if (this.isOver) {\r\n                                // this.isGameOver=true;\r\n                            }\r\n                            this.isCollision = true;\r\n                        }\r\n                    }\r\n                }\r\n                else if (nRotate1 == 180) {\r\n                    if (nArray == 1) {\r\n                        this.AddBoxNumber(nx, ny);\r\n                        cc.log(this.nBox + \"this.nBox \");\r\n                    }\r\n                    if (this.nBox == 1) {\r\n                        this.DownBlock();\r\n                    }\r\n                    \r\n                    else {\r\n                        if (nArray == 1) {\r\n                            if (this.isOver) {\r\n                                // this.isGameOver=true;\r\n                            }\r\n                            this.isCollision = true;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    cc.log(\"===============\");\r\n                    switch (nArray) {\r\n                        case 0:\r\n                            cc.log(\"00000000000000\");\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 1:\r\n                            cc.log(\"1111111111111111\");\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                    }\r\n                    if (this.nBox == 2) {\r\n                        this.DownBlock();\r\n                    }\r\n                    else {\r\n                        if (nArray == 1) {\r\n                            if (this.isOver) {\r\n                                // this.isGameOver=true;\r\n                            }\r\n                            this.isCollision = true;\r\n                        }\r\n                    }\r\n\r\n                }\r\n                break;\r\n            case \"Square\":\r\n            cc.log(\"Square\");\r\n                if (this.nColor == 1) {\r\n                    switch (nArray) {\r\n                        case 0:\r\n                        cc.log(this.nBox +\"Square\");\r\n                        cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                        case 1:\r\n                        cc.log(this.nBox +\"Square\");\r\n                        cc.log(nArray);\r\n                            this.AddBoxNumber(nx, ny);\r\n                            break;\r\n                    }\r\n                    if (this.nBox == 2) {\r\n                        this.DownBlock();\r\n                    }\r\n                    else {\r\n                        if (nArray == 3) {\r\n                            if (this.isOver) {\r\n                                // this.isGameOver=true;\r\n                            }\r\n                            this.isCollision = true;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if (nRotate1 == 0 || nRotate1 == 360) {\r\n                        switch (nArray) {\r\n                            case 0:\r\n                                this.AddBoxNumber(nx, ny);\r\n                                break;\r\n                            case 1:\r\n                                this.AddBoxNumber(nx, ny);\r\n                                break;\r\n                        }\r\n                        if (this.nBox == 2) {\r\n                            this.DownBlock();\r\n                        }\r\n                        else {\r\n                            if (nArray == 3) {\r\n                                if (this.isOver) {\r\n                                    // this.isGameOver=true;\r\n                                }\r\n                                this.isCollision = true;\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (nRotate1 == 90) {\r\n                        switch (nArray) {\r\n                            case 1:\r\n                                this.AddBoxNumber(nx, ny);\r\n                                break;\r\n                            case 3:\r\n                                this.AddBoxNumber(nx, ny);\r\n                                break;\r\n                        }\r\n                        if (this.nBox == 2) {\r\n                            this.DownBlock();\r\n                        }\r\n                        else {\r\n                            if (nArray == 3) {\r\n                                if (this.isOver) {\r\n                                    // this.isGameOver=true;\r\n                                }\r\n                                this.isCollision = true;\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                    else if (nRotate1 == 180) {\r\n                        switch (nArray) {\r\n                            case 2:\r\n                                this.AddBoxNumber(nx, ny);\r\n                                break;\r\n                            case 3:\r\n                                this.AddBoxNumber(nx, ny);\r\n                                break;\r\n                        }\r\n                        if (this.nBox == 2) {\r\n                            this.DownBlock();\r\n                        }\r\n                        else {\r\n                            if (nArray == 3) {\r\n                                if (this.isOver) {\r\n                                    // this.isGameOver=true;\r\n                                }\r\n                                this.isCollision = true;\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        switch (nArray) {\r\n                            case 0:\r\n                                this.AddBoxNumber(nx, ny);\r\n                                break;\r\n                            case 2:\r\n                                this.AddBoxNumber(nx, ny);\r\n                                break;\r\n                        }\r\n                        if (this.nBox == 2) {\r\n                            this.DownBlock();\r\n                        }\r\n                        else {\r\n                            if (nArray == 3) {\r\n                                if (this.isOver) {\r\n                                    // this.isGameOver=true;\r\n                                }\r\n                                this.isCollision = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    },\r\n    start() {\r\n\r\n    },\r\n    //判断噗呦块是否满足下落判定条件\r\n    IsDown: function () {\r\n        for (var i = 0; i <= this.puyouChild.length - 1; i++) {\r\n            this.CountPosition(this.puyouChild[i]);\r\n            if ((this.nPositionY + this.node.getPositionY() - cc.find(\"GroundParent\").getPositionY()) % Global.nWidthPuYo == 0) {\r\n                this.isDown = true;\r\n            }\r\n        }\r\n    },\r\n    CountPosition: function (nodePuyo) {\r\n        if (this.stringBoloekShape == \"Long\" && this.nColor == 2) {\r\n            this.nPositionX = nodePuyo.getPositionX();\r\n            this.nPositionY = nodePuyo.getPositionY();\r\n        }\r\n        else {\r\n            switch (this.nRotateAngle) {\r\n                case 0:\r\n                    //赋值实际坐标\r\n                    this.nPositionX = nodePuyo.getPositionX();\r\n                    this.nPositionY = nodePuyo.getPositionY();\r\n                    break;\r\n                case 90:\r\n                    this.nPositionX = nodePuyo.getPositionY();\r\n                    this.nPositionY = -nodePuyo.getPositionX();\r\n                    break;\r\n                case 180:\r\n                    this.nPositionX = -nodePuyo.getPositionX();\r\n                    this.nPositionY = -nodePuyo.getPositionY();\r\n                    break;\r\n                case 270:\r\n                    this.nPositionX = -nodePuyo.getPositionY();\r\n                    this.nPositionY = nodePuyo.getPositionX();\r\n                    break;\r\n            }\r\n        }\r\n    },\r\n    update(dt) {\r\n        if (this.isCollision == false && this.isGameOver == false) {\r\n            //判断是否满足下落判定条件\r\n            this.isDown = false;\r\n            this.IsDown();\r\n            if (this.isDown) {\r\n                if (Global.game1Main.isRotate == false) {\r\n                    this.BlockDown();\r\n                    if (this.isCollision == false && this.isGameOver == false) {\r\n                        this.node.y -= Global.nWidthPuYo / this.nDownSpeed;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                this.node.y -= Global.nWidthPuYo / this.nDownSpeed;\r\n            }\r\n        }\r\n        if (this.isCollision) {\r\n            cc.log(\"ssssssssssss\");\r\n            this.nCollisionBack++;\r\n            if (this.nCollisionBack == 15) {\r\n                for (var i = 0; i <= this.arrayX.length - 1; i++) {\r\n                    cc.log(this.arrayX[i]);\r\n                    cc.log(this.arrayY[i]);\r\n                    Global.game1Main.userGroundChild[this.arrayX[i] - 1][this.arrayY[i] - 1].getComponent(\"BoxState\").isBox = true;\r\n                    Global.game1Main.userGroundChild[this.arrayX[i] - 1][this.arrayY[i] - 1].getComponent(\"BoxState\").stringColor = this.puyouChild[this.arratSubScript[i]].getComponent(\"InitPrefabState\").stringColor;\r\n                    if (i == this.arrayX.length - 1) {\r\n                        //打开噗呦块固定开关\r\n                        this.isStationary = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // if (this.isStationary) {\r\n        // }\r\n    },\r\n});\r\n","var Game4Fight = require(\"./Game4Fight\");\r\nvar Game3 = require(\"../FightGame3/FightGame3\");\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // back : cc.Prefab,\r\n        backArr : {\r\n            default : [],\r\n            type    : [cc.Prefab],\r\n        },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        this.nodeWidth = this.node.width;\r\n        this.nodeHeight = this.node.height;\r\n        this.up = 5;\r\n        this.lr = 4;\r\n        // this.back.width = 50;\r\n        // this.back.height = 50;\r\n        // this.back;\r\n        //初始化地图\r\n        // this.initMap(this.up,this.lr,this.back);\r\n    },\r\n    /**\r\n     * @param  {生成对手游戏的行数} rowNum\r\n     * @param  {生成对手的列数} colNum\r\n     * @param  {游戏类型} type\r\n     */\r\n    initMap(rowNum,colNum,type){\r\n        \r\n        //俄罗斯方块类型\r\n        if(type === \"1\"){\r\n            this.back = this.backArr[0];\r\n            this.girdSize = 30;\r\n        }else if(type === \"4\"){\r\n            //画像游戏类型\r\n            this.back = this.backArr[1];\r\n           this.girdSize = 50;\r\n        }else if(type === \"3\"){\r\n            //噗哟噗哟游戏类型\r\n            this.back = this.backArr[3];\r\n            this.girdSize = 50;\r\n        }else if(type === \"2\"){\r\n            //宝石方块游戏类型\r\n            this.back = this.backArr[2];\r\n            this.girdSize = 50;\r\n        }\r\n        if(type === \"4\" || type === \"2\"){\r\n            Game4Fight.prototype.initMap.call(this,this.up,this.lr,this.back,rowNum,colNum);\r\n        }else if(type === \"1\" || type === \"3\"){\r\n            Global.initMapForEnemy.call(this,this.up,this.lr,this.back,rowNum,colNum,\"PrefabState\");\r\n        }\r\n        // switch (type) {\r\n        //     case \"4\":\r\n        //         //利用第四个游戏的生成地图的方法\r\n        //         Game4Fight.prototype.initMap.call(this,this.up,this.lr,this.back,rowNum,colNum);\r\n        //         break;\r\n        //     case \"3\":\r\n        //         Game3.prototype.initMap.call\r\n        //         break;\r\n        // }\r\n        \r\n\r\n    },\r\n     /**\r\n    @param prefab:将要生成预制节点的预制体\r\n    @param x     :将要生成预制节点的x坐标\r\n    @param y     :将要生成预制节点的y坐标\r\n    @param parentNode : 生成的预制节点的父节点\r\n     */\r\n    setPrefabPosition : function(prefab,x,y,parentNode){\r\n        var prefab = this.createPrefab(prefab);\r\n        prefab.setPosition(x,y);\r\n        parentNode.addChild(prefab);\r\n        return prefab;\r\n    },\r\n    //创建一个预制体节点\r\n    createPrefab : function(prefab){\r\n        var prefabNode = cc.instantiate(prefab);\r\n        return prefabNode;\r\n    },\r\n    start () {\r\n        \r\n    },\r\n    //显示对手的游戏信息\r\n    update (dt) {\r\n        // console.log(\"对手信息\");\r\n    },\r\n});\r\n","// // Learn cc.Class:\r\n// //  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html\r\n// //  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html\r\n// // Learn Attribute:\r\n// //  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\r\n// //  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\r\n// // Learn life-cycle callbacks:\r\n// //  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\r\n// //  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\r\n\r\n// cc.Class({\r\n//     extends: cc.Component,\r\n\r\n//     properties: {\r\n//         // foo: {\r\n//         //     // ATTRIBUTES:\r\n//         //     default: null,        // The default value will be used only when the component attaching\r\n//         //                           // to a node for the first time\r\n//         //     type: cc.SpriteFrame, // optional, default is typeof default\r\n//         //     serializable: true,   // optional, default is true\r\n//         // },\r\n//         // bar: {\r\n//         //     get () {\r\n//         //         return this._bar;\r\n//         //     },\r\n//         //     set (value) {\r\n//         //         this._bar = value;\r\n//         //     }\r\n//         // },\r\n//     },\r\n\r\n//     // LIFE-CYCLE CALLBACKS:\r\n\r\n//     // onLoad () {},\r\n\r\n//     start () {\r\n\r\n//     },\r\n\r\n//     // update (dt) {},\r\n// });\r\n//创建一个形体类\r\nfunction Shape(prefabNode,type){\r\n    //预制体节点\r\n    this.prefabNode = prefabNode;\r\n    //是否允许变换\r\n    this.allowRotate = true;\r\n    //这个形状的类型\r\n    this.type = type;\r\n    this.x = this.prefabNode.x;\r\n    this.y = this.prefabNode.y;\r\n    this.waitRemove = false;\r\n}\r\n//是否填充完方格\r\nShape.prototype.isFilled = function(){\r\n\r\n}\r\nShape.prototype.setAllowRotate = function(allowRotate){\r\n    this.allowRotate = allowRotate;\r\n}\r\nmodule.exports = Shape;","// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n   \r\n        rankNode : cc.Node,\r\n        display : cc.Sprite,\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        this.display.active = false;\r\n        this.mask.active = false;\r\n        this.noticeX = this.notice.x;\r\n        this.noticeY = this.notice.y;\r\n        // if(cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").pictureUser==\"\")\r\n        // {\r\n        //     cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").pictureUser=\"http://image.baidu.com/search/detail?ct=503316480&z=0&ipn=d&word=%E5%9B%BE%E7%89%87&hs=0&pn=7&spn=0&di=135898298690&pi=0&rn=1&tn=baiduimagedetail&is=0%2C0&ie=utf-8&oe=utf-8&cl=2&lm=-1&cs=2260926939%2C1550208231&os=2086677986%2C2932337668&simid=0%2C0&adpicid=0&lpn=0&ln=30&fr=ala&fm=&sme=&cg=&bdtype=0&oriquery=&objurl=http%3A%2F%2Fimg.zcool.cn%2Fcommunity%2F01690955496f930000019ae92f3a4e.jpg%402o.jpg&fromurl=ippr_z2C%24qAzdH3FAzdH3Fooo_z%26e3Bzv55s_z%26e3Bv54_z%26e3BvgAzdH3Fo56hAzdH3FZNTAaMzMy_z%26e3Bip4s%3FfotpviPw2j%3D5g&gsm=0&islist=&querylist=\";\r\n        // }\r\n        if(cc.sys.isNative){\r\n            cc.log(cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").pictureUser+\"++++++++++++++++++++++++++++++++++++++++++++++++++++\");\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").LoadUser(cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").pictureUser,cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser,cc.find(\"Canvas/UserName\"),cc.find(\"Canvas/UserPicture\"));\r\n        }\r\n        if(wx !== undefined){\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").loadUserPictureByWx(cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").pictureUser,cc.find(\"Canvas/UserPicture\"));\r\n            this.node.getChildByName(\"UserName\").getComponent(cc.Label).string = cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser;\r\n        }\r\n        this.backButton.on(\"touchstart\",function(){\r\n            cc.audioEngine.play(this.clickAudio,false,1);\r\n            if(cc.sys.os === cc.sys.OS_ANDROID){\r\n                //返回手机桌面\r\n                cc.director.end();\r\n            }\r\n        }.bind(this));\r\n        this.notice.on(\"touchstart\",function(){\r\n            let action = cc.moveTo(0.5,cc.p(this.noticeX,this.noticeY));\r\n            this.notice.runAction(action);\r\n            this.mask.active = false;\r\n        }.bind(this));\r\n        this.mask.on(\"touchstart\",function(){\r\n            let action = cc.moveTo(0.5,cc.p(this.noticeX,this.noticeY));\r\n            this.notice.runAction(action);\r\n            this.mask.active = false;\r\n        }.bind(this));\r\n        this.shareIcon.on('touchstart',function(){\r\n            console.log(\"首页share\");\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").shareFriends();\r\n        }.bind(this));\r\n        this.shareText.on('touchstart',function(){\r\n            console.log(\"首页share\");\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").shareFriends();\r\n        }.bind(this));\r\n    },\r\n    start () {\r\n\r\n    },\r\n    // showNotice : function(){\r\n    //     cc.audioEngine.play(this.clickAudio,false,1);\r\n    //     this.mask.active= true;\r\n    //     let action = cc.moveTo(1,cc.p(545,980));\r\n    //     this.notice.runAction(action);\r\n    // },\r\n    \r\n    onDestroy : function(){\r\n\r\n    },\r\n    share : function(){\r\n        console.log(\"首页share\");\r\n        cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").shareFriends();\r\n    },\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","module.exports = {\r\n    //开始游戏\r\n    STATE_BEGIN : 0,\r\n    //游戏中\r\n    STATE_PLAY  : 1,\r\n    //游戏结束\r\n    STATE_OVER  : 2,\r\n    //消除动作\r\n    STATE_REMOVE : 3,\r\n}\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        //宝石类型\r\n        type:null,\r\n        //是否可以消除\r\n        isRemove:false,\r\n        //是否移动过\r\n        isMove : false,\r\n        //行\r\n        row : 0,\r\n        //列\r\n        col : 0,\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        //目标位置X\r\n        this.targetX = 0;\r\n        //目标位置Y\r\n        this.targetY = 0;\r\n        //行偏移量\r\n        this.offsetRow = 0;\r\n        //计时\r\n        this.time = 0;\r\n        //消除下落时间\r\n        this.xlTime = 0.1;\r\n        //是否可以消除下落\r\n        this.isRemoveDown = false;\r\n        this.hasTarget = false;\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n     //消除下落操作\r\n     afterRemoveDown : function(map,backGroundArr){\r\n        //自己向下找空穴的位置\r\n        //自己占据的地图信息改为0\r\n        // if(this.checkCanDown(map)){\r\n            this.t = 0;\r\n            map[this.row][this.col] = 0;\r\n            //改变背景方格的类型状态及内置节点的引用风\r\n            backGroundArr[this.row][this.col].getComponent(\"Back\").type = -1;\r\n            backGroundArr[this.row][this.col].getComponent(\"Back\").innerNode = null;\r\n            //向下扫描找到空穴的位置\r\n            var targetRow = this.scanDown(map,this.row,this.col);\r\n            cc.log(\"targetRow is \" + targetRow);\r\n            this.targetX = backGroundArr[targetRow][this.col].x;\r\n            this.targetY = backGroundArr[targetRow][this.col].y;\r\n            //目标行与当前行的差值\r\n            this.offsetRow = targetRow - this.row;\r\n            this.hasTarget = true;\r\n            // this.isRemoveDown = true;\r\n            var self = this;\r\n            // // for(let i = 0;i<this.offsetRow;i++){\r\n            // //     (function test(){\r\n            // //         var action = cc.moveBy(0.3,cc.p(0,-self.node.height));\r\n            // //         self.node.runAction(action);\r\n            // //     })()\r\n            // // }\r\n            // function pro(){\r\n            //     //将该节点的行设置成目标行\r\n            self.row = targetRow;\r\n            map[self.row][self.col] = 1;\r\n            //设置背景方格的类型为该节点的类型\r\n            backGroundArr[self.row][self.col].getComponent(\"Back\").type = self.type;\r\n            backGroundArr[self.row][self.col].getComponent(\"Back\").innerNode = self.node;\r\n            // }\r\n            // // this.node.stopAllActions();\r\n            // (function test(pro){\r\n            //     (function(){\r\n            //         var action = cc.moveTo(0.3,cc.p(self.targetX,self.targetY));\r\n            //         self.node.runAction(action);\r\n            //     })();\r\n            //     pro();\r\n            // })(pro);\r\n        // }\r\n    },\r\n    scanDown : function(map,row,col){\r\n         //向下寻找\r\n         while(row < 11){\r\n            row++;\r\n            if(map[row][col] === 1){\r\n                break;\r\n            }\r\n            if(row === 11){\r\n                break;\r\n            }\r\n         }\r\n         //最底下的背景方格的状态不为1\r\n         if(row === 11 && map[row][col] != 1){\r\n             return 11;\r\n         }else{\r\n            return row-1;\r\n         }\r\n    },\r\n    //检测该节点是否可以下落\r\n    checkCanDown : function(map){\r\n        if(map[this.row+1][this.col] === 1){\r\n            return false;\r\n        }else{\r\n            return true;\r\n        }\r\n    },\r\n    downShine : function(){\r\n        var self = this;\r\n          (function test(){\r\n              (function t(){\r\n                var action1 = cc.fadeTo(0.2,0);\r\n                var action2 = cc.fadeTo(0,2,70);\r\n                var action3 = cc.fadeTo(0.2,100);\r\n                var action4 = cc.fadeTo(0.2,70);\r\n                var action5 = cc.fadeTo(0.2,0);\r\n                var sequence = cc.sequence(action1,action2,action3,action4,action5);\r\n                self.node.children[0].runAction(sequence);\r\n                cc.log(\"adfadfadf\");\r\n              })();\r\n        })();\r\n    },\r\n    //节点发光\r\n    shine : function(){\r\n        var self = this;\r\n          (function test(a){\r\n              (function t(){\r\n                var action1 = cc.fadeTo(0.2,100);\r\n                var action2 = cc.fadeTo(0,2,150);\r\n                var action3 = cc.fadeTo(0.2,180);\r\n                var action4 = cc.fadeTo(0.2,200);\r\n                var sequence = cc.sequence(action1,action2,action3,action4);\r\n                self.node.children[0].runAction(sequence);\r\n                cc.log(\"adfadfadf\");\r\n              })();\r\n            a();\r\n        })(self.aaa.bind(self));\r\n    },\r\n    // LIFE-CYCLE CALLBACKS:\r\n    aaa:function(){\r\n        // this.node.destroy();\r\n        cc.log(\"发光完毕\");\r\n        this.scheduleOnce(function(){\r\n            this.node.destroy();\r\n        },0.2);\r\n        \r\n    },\r\n    update (dt) {\r\n        if(this.hasTarget){\r\n            this.t += dt;\r\n            cc.log(this.t);\r\n            cc.log(this.node.y+\"？？？？？？？？？？？？？？？？？？？？？？？？\");\r\n            cc.log(this.targetY+\"/////////////////////////\");\r\n            if(this.node.y >= this.targetY+120){\r\n                if(this.t >= 0.1){\r\n                    cc.log(\"33434343434343434434\");\r\n                    //  cc.director.getPhysicsManager().enabled = false;\r\n                    this.node.y -= 120;\r\n                    this.t = 0;\r\n                }\r\n            }\r\n        }\r\n    },\r\n});","// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        nodeChildParent:{\r\n            default:null,\r\n            type:cc.Node\r\n        },\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        this.node.setPosition(cc.p(this.nodeChildParent.getPositionX(),this.nodeChildParent.getPositionY()));\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n    onLoad () {\r\n        console.log(\"this.node is \",this.node);\r\n        this.node.setPosition(this.node.parent.getChildByName(\"GroundParent\").getPosition());\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n        clickAudio : {\r\n            url     : cc.AudioClip,\r\n            default : null,\r\n        },\r\n        help : cc.Node,\r\n        mask : cc.Node,\r\n         //获取用户名字节点\r\n        nameUser:{\r\n            default:null,\r\n            type:cc.Node\r\n        },\r\n        //获取用户头像及诶但\r\n        pictureUser:{\r\n            default:null,\r\n            type:cc.Node\r\n        },\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n        backButton : cc.Node,\r\n        notice     : cc.Node,\r\n        mask       : cc.Node,\r\n        shareIcon  : cc.Node,\r\n        shareText  : cc.Node,\r\n        helpBtn    : cc.Node,\r\n        singleBtn  : cc.Node,\r\n        warBtn     : cc.Node,\r\n        worldRank  : cc.Node,\r\n        friendRank : cc.Node,\r\n        setNotice  : cc.Node,\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        if(CC_WECHATGAME){\r\n            //显示游戏圈按钮\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").gameClubButton.show();\r\n        }\r\n        var self = this;\r\n        this.helpX = this.help.x;\r\n        this.mask.active = false;\r\n        this.mask.on(\"touchstart\",function(){\r\n            self.mask.active = false;\r\n            var runBack = cc.moveTo(0.5,cc.p(self.helpX,960));\r\n            self.help.runAction(runBack);\r\n        }.bind(this));\r\n        console.log(\"加载排行榜页面\");\r\n        this.MAIN_MENU = '';\r\n        this.topScore = 0;\r\n        this.mask.active = false;\r\n        this.noticeX = this.notice.x;\r\n        this.noticeY = this.notice.y;\r\n        //按钮能够点击\r\n        this.canClick = true;\r\n        // if(cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").pictureUser==\"\")\r\n        // {\r\n        //     cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").pictureUser=\"http://image.baidu.com/search/detail?ct=503316480&z=0&ipn=d&word=%E5%9B%BE%E7%89%87&hs=0&pn=7&spn=0&di=135898298690&pi=0&rn=1&tn=baiduimagedetail&is=0%2C0&ie=utf-8&oe=utf-8&cl=2&lm=-1&cs=2260926939%2C1550208231&os=2086677986%2C2932337668&simid=0%2C0&adpicid=0&lpn=0&ln=30&fr=ala&fm=&sme=&cg=&bdtype=0&oriquery=&objurl=http%3A%2F%2Fimg.zcool.cn%2Fcommunity%2F01690955496f930000019ae92f3a4e.jpg%402o.jpg&fromurl=ippr_z2C%24qAzdH3FAzdH3Fooo_z%26e3Bzv55s_z%26e3Bv54_z%26e3BvgAzdH3Fo56hAzdH3FZNTAaMzMy_z%26e3Bip4s%3FfotpviPw2j%3D5g&gsm=0&islist=&querylist=\";\r\n        // }\r\n        if(cc.sys.isNative){\r\n            cc.log(cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").pictureUser+\"++++++++++++++++++++++++++++++++++++++++++++++++++++\");\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").LoadUser(cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").pictureUser,cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser,cc.find(\"Canvas/UserName\"),cc.find(\"Canvas/UserPicture\"));\r\n            //加载用户姓名\r\n            let usernameNode = this.node.getChildByName(\"UserName\");\r\n            let usernameString = cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser;\r\n            //加载用户信息\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").showUsername(usernameString,usernameNode);\r\n        }\r\n        if(CC_WECHATGAME){\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").loadUserPictureByWx(cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").pictureUser,cc.find(\"Canvas/UserPicture\"));\r\n            let usernameNode = this.node.getChildByName(\"UserName\");\r\n            let usernameString = cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser;\r\n            //加载用户信息\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").showUsername(usernameString,usernameNode);\r\n        }\r\n        this.backButton.on(\"touchstart\",function(){\r\n            if(this.canClick){\r\n                cc.audioEngine.play(this.clickAudio,false,1);\r\n                if(cc.sys.os === cc.sys.OS_ANDROID){\r\n                    //返回手机桌面\r\n                    cc.director.end();\r\n                }\r\n            }\r\n        }.bind(this));\r\n        this.notice.on(\"touchstart\",function(){\r\n            let action = cc.moveTo(0.5,cc.p(this.noticeX,this.noticeY));\r\n            this.notice.runAction(action);\r\n            this.mask.active = false;\r\n            if(CC_WECHATGAME){\r\n                //显示游戏圈按钮\r\n                cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").gameClubButton.show();\r\n                if(Global.advertisement !== null){\r\n                    //显示广告\r\n                    Global.advertisement.show();\r\n                }\r\n            }\r\n        }.bind(this));\r\n        this.mask.on(\"touchstart\",function(){\r\n            let action = cc.moveTo(0.5,cc.p(this.noticeX,this.noticeY));\r\n            this.notice.runAction(action);\r\n            this.mask.active = false;\r\n            if(CC_WECHATGAME){\r\n                //显示游戏圈按钮\r\n                cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").gameClubButton.show();\r\n                if(Global.advertisement !== null){\r\n                    //显示广告\r\n                    Global.advertisement.show();\r\n                }\r\n            }\r\n        }.bind(this));\r\n        this.shareIcon.on('touchstart',function(){\r\n            if(this.canClick){\r\n                if(CC_WECHATGAME){\r\n                    console.log(\"首页share\");\r\n                    cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").shareFriends();\r\n                }else if(cc.sys.isNative){\r\n                    //原生平台分享\r\n                    cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nativeShare();\r\n                }\r\n            }\r\n        }.bind(this));\r\n        this.shareText.on('touchstart',function(){\r\n            if(this.canClick){\r\n                if(CC_WECHATGAME){\r\n                    console.log(\"首页share\");\r\n                    cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").shareFriends();\r\n                }else if(cc.sys.isNative){\r\n                    //原生平台分享\r\n                    cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nativeShare();\r\n                }\r\n            }\r\n        }.bind(this));\r\n        //显示广告\r\n        // cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").showAdvice(\"adunit-f874b1440d977650\");\r\n    },\r\n    setting : function(){\r\n        let self = this;\r\n        this.setNotice.active = true;\r\n        this.schedule(function(){\r\n            this.setNotice.active = false;\r\n            //取消所有计时器\r\n            this.unscheduleAllCallbacks();\r\n        },2);\r\n    },\r\n    start () {\r\n\r\n    },\r\n    //跳转单人选择场景\r\n    TurnOneChoose:function(){\r\n        cc.log(\"#####################\");\r\n        if(CC_WECHATGAME){\r\n            wx.showLoading({\r\n                title : '火速加载中...',\r\n                mask  : true,\r\n            })\r\n        }\r\n        cc.audioEngine.play(this.clickAudio,false,1);\r\n        //转到切换模式界面\r\n        cc.director.loadScene(\"OneChoose\",function(){\r\n            if(CC_WECHATGAME){\r\n                //隐藏加载中\r\n                wx.hideLoading();\r\n            }\r\n        });\r\n    },\r\n    //跳转多人选择场景\r\n    TurnPersonsChoose:function(){\r\n        if(CC_WECHATGAME){\r\n            wx.showLoading({\r\n                title : '火速加载中...',\r\n                mask  : true,\r\n            });\r\n        }\r\n        cc.audioEngine.play(this.clickAudio,false,1);\r\n        cc.log(\"++++++++++++++++++++++++++++++++++++++++++++++++++\");\r\n        cc.director.loadScene(\"PersonsChoose\",function(){\r\n            if(CC_WECHATGAME){\r\n                //隐藏加载中\r\n                wx.hideLoading();\r\n            }\r\n        });\r\n    },\r\n    helpFun : function(){\r\n        console.log(\"进入help\");\r\n\r\n        this.mask.active = true;\r\n        var runA = cc.moveTo(0.5,cc.p(540,960));\r\n        //显示帮助节点\r\n        this.help.runAction(runA);\r\n        if(CC_WECHATGAME){\r\n             //隐藏游戏圈按钮\r\n             cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").gameClubButton.hide();\r\n             if(Global.advertisement !== null){\r\n                 //隐藏广告\r\n                 Global.advertisement.hide();\r\n             }\r\n        }\r\n    },\r\n    //显示好友排行榜\r\n    showRank : function(){\r\n        if(CC_WECHATGAME){\r\n            //隐藏游戏圈按钮\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").gameClubButton.hide();\r\n            if(Global.advertisement !== null){\r\n                //隐藏广告\r\n                Global.advertisement.hide();\r\n            }\r\n            this.canClick = false;\r\n            //显示黑色背景\r\n            cc.find(\"PebmanentNode/dark\").active = true;\r\n            //其他按钮不允许点击\r\n            console.log(\"helpBtn is \",this.helpBtn.getComponent(cc.Button));\r\n            console.log(\"backButton is \",this.backButton.getComponent(cc.Button));\r\n            console.log(\"singleBtn  is \",this.singleBtn.getComponent(cc.Button));\r\n            console.log(\"warBtn is \",this.warBtn.getComponent(cc.Button));\r\n            this.helpBtn.getComponent(cc.Button).interactable = false;\r\n            this.backButton.getComponent(cc.Button).interactable = false;\r\n            this.singleBtn.getComponent(cc.Button).interactable = false;\r\n            this.warBtn.getComponent(cc.Button).interactable = false;\r\n            this.worldRank.getComponent(cc.Button).interactable = false;\r\n            this.friendRank.getComponent(cc.Button).interactable = false;\r\n            //显示排行榜页面\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").showRank();\r\n            //显示排行榜\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").rankNode.active = true;\r\n            \r\n        }\r\n    },\r\n    //显示世界排行\r\n    showWorldRank : function(){\r\n        if(Global.advertisement !== null){\r\n            //隐藏广告\r\n            Global.advertisement.hide();\r\n        }\r\n        this.canClick = false;\r\n        if(CC_WECHATGAME){\r\n            //隐藏游戏圈按钮\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").gameClubButton.hide();\r\n            //其他按钮不允许点击\r\n            this.helpBtn.getComponent(cc.Button).interactable = false;\r\n            this.backButton.getComponent(cc.Button).interactable = false;\r\n            this.singleBtn.getComponent(cc.Button).interactable = false;\r\n            this.warBtn.getComponent(cc.Button).interactable = false;\r\n            this.worldRank.getComponent(cc.Button).interactable = false;\r\n            this.friendRank.getComponent(cc.Button).interactable = false;\r\n            //显示世界排行榜页面\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").showWorldRank();\r\n        }\r\n    },\r\n    update (dt) {\r\n        \r\n    },\r\n    share : function(){\r\n        console.log(\"开始分享\");\r\n        if(CC_WECHATGAME){\r\n            console.log(\"首页share\");\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").shareFriends();\r\n        }else if(cc.sys.isNative){\r\n            //原生平台分享\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nativeShare();\r\n        }\r\n    },\r\n});\r\n","/*\r\n * @Author: mikey.zhaopeng \r\n * @Date: 2018-06-26 18:57:39 \r\n * @Last Modified by: mikey.zhaopeng\r\n * @Last Modified time: 2018-09-01 17:32:17\r\n */\r\n//图片加载工具\r\nvar imageLoader = require(\"./ImageLoader\");\r\ncc.Class({\r\n    extends: cc.Component,\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n        rankPrefab : cc.Prefab,\r\n        loseLink : cc.Node,\r\n        backAudio : {\r\n            url : cc.AudioClip,\r\n            default : null,\r\n        },\r\n        worldRankPrefab : cc.Prefab,\r\n        informmask : cc.Node,\r\n        informContent : cc.Node,\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        //加载游戏圈\r\n        if(CC_WECHATGAME){\r\n            let width = 0;\r\n            let height = 0;\r\n            wx.getSystemInfo({\r\n                success : function(res){\r\n                    console.log(\"手机的品牌是：\",res.brand);\r\n                    width = res.screenWidth;\r\n                    height = res.screenHeight;\r\n                    console.log(\"width is \",width);\r\n                    console.log(\"height is \",height);\r\n                },\r\n                fail : function(){\r\n\r\n                },\r\n                complete : function(){\r\n\r\n                }\r\n            })\r\n            //加入游戏圈功能\r\n            this.gameClubButton = wx.createGameClubButton({\r\n                type : \"image\",\r\n                text : \"\",\r\n                image : \"\",\r\n                icon  : 'dark',\r\n                style : {\r\n                    left : width/2+80,\r\n                    top  : height-185,\r\n                    width : 50,\r\n                    height : 50,\r\n                }\r\n\r\n            });\r\n            this.gameClubButton.hide();\r\n        }\r\n        this._isCapturing = false;\r\n        var self = this;\r\n        //将此节点作为常驻节点\r\n        cc.game.addPersistRootNode(this.node);  \r\n        this.loseLink.active = false;\r\n        //初始化用户名字\r\n        this.nameUser=\"\";\r\n        //初始化敌人的信息\r\n        this.rivalName = \"\";\r\n        //初始化用户token\r\n        this.tokenMsg=\"\";\r\n        //初始化用户头像\r\n        this.pictureUser=\"\";\r\n        //初始化用户计分\r\n        this.nUserScore=0;\r\n        //初始化玩家匹配状态\r\n        this.matchState=\"\";\r\n        //初始化服务器广播的用户自己的信息\r\n        this.userMsg;\r\n        //初始化服务器广播的敌人的信息\r\n        this.pictureEnemy=\"\";\r\n        //判断用户进入匹配界面是否加载完场景\r\n        this.isLoad=false;\r\n        //初始化用户的游戏类型\r\n        this.nGameType=\"0\";\r\n        //用户头像图片\r\n        this.userImage=null;\r\n        //对手头像图片\r\n        this.rivalImage = null;\r\n        //敌人的游戏类型\r\n        this.rivalGameType = \"0\";\r\n        this.informMessage = \"\";\r\n        this.openid = \"\";\r\n        //是否游戏结束或者死亡\r\n        this.isOver = false;\r\n        //单机版的俄罗斯方块最高分记录\r\n        this.tetrisTopScore = cc.sys.localStorage.getItem('maxScoreTetris') === undefined ? \"0\" : cc.sys.localStorage.getItem('maxScoreTetris');\r\n        //单机版的画像方块的最高分记录\r\n        this.figureTopScore = cc.sys.localStorage.getItem('maxScoreFigure') === undefined ? \"0\" : cc.sys.localStorage.getItem('maxScoreFigure');\r\n        //单机版的宝石方块的最高分记录\r\n        this.stoneTopScore = cc.sys.localStorage.getItem('maxScoreStone') === undefined ? \"0\" : cc.sys.localStorage.getItem('maxScoreStone');\r\n        this.informContentX = this.informContent.x;\r\n        this.informContentY = this.informContent.y;\r\n        if(cc.sys.os === cc.sys.OS_ANDROID){\r\n            // cc.eventManager.addListener({\r\n            //     event : cc.EventListener.KEYBOARD,\r\n            //     onKeyPressed : function(keyCode,event){\r\n            //         if(keyCode === cc.KEY.back){\r\n            //             cc.director.end();\r\n            //         }\r\n            //     },\r\n            //     onKeyReleased : function(keyCode,event){\r\n\r\n            //     },\r\n            // },this)\r\n            console.log(\"进入原生安卓环境\");\r\n            cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN,this.onKeyDown,this);\r\n            cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP,this.onKeyUp,this);\r\n        }\r\n        //断网监听\r\n        this.loseLink.on(\"touchstart\",function(){\r\n            this.loseLink.active = false;\r\n            cc.director.loadScene(\"Login\");\r\n        }.bind(this));\r\n        if(CC_WECHATGAME){\r\n            wx.showShareMenu({\r\n                withShareTicket : true\r\n            });\r\n            wx.onShareAppMessage(function(){\r\n                return {\r\n                    title : '跟我一起玩方块大爆炸吧',\r\n                    imageUrl : 'https://wx.qlogo.cn/mmhead/Q3auHgzwzM5iaibNxrPibic6NRlaOjEiaAnwBH5SkBIeVUVYXNEMUDN406w/0',\r\n                }\r\n            });\r\n        }\r\n        cc.audioEngine.play(this.backAudio,true,0.6);\r\n    },\r\n    //滚动字幕公告\r\n    rollText : function(message){\r\n        console.log(\"公告文字是：\",message);\r\n        var self = this;\r\n            if(message !== \"\"){\r\n                if(self.informContent){\r\n                    self.informContent.active = true;\r\n                }\r\n                self.informContent.getComponent(cc.Label).string = message;\r\n                self.informContent.runAction(cc.repeatForever(cc.sequence(cc.moveTo(6,cc.v2(-self.informContent.width-self.informContent.x-100,self.informContent.y)),cc.callFunc(function(){\r\n                    self.informContent.x = self.informContentX;\r\n                }))))\r\n            }else{\r\n                if(self.informContent){\r\n                    self.informContent.active = true;\r\n                }\r\n                self.informContent.getComponent(cc.Label).string = \"亲爱的用户朋友们你们好，现在小游戏需要更新请及时下线，给您带来的不便我们深感抱歉！感谢你们的支持，期待遇见更好的我，谢谢!!\";\r\n                self.informContent.runAction(cc.repeatForever(cc.sequence(cc.moveTo(6,cc.v2(-self.informContent.width-self.informContent.x-100,self.informContent.y)),cc.callFunc(function(){\r\n                    self.informContent.x = self.informContentX;\r\n                }))))\r\n            }\r\n    },\r\n    onKeyDown : function(event){\r\n        switch(event.keyCode){\r\n            case cc.KEY.back:\r\n                //如果用户点击了返回按钮退出游戏\r\n                console.log(\"开始返回手机桌面\");\r\n                cc.director.end();\r\n                break;\r\n        }\r\n    },\r\n    onKeyUp   : function(event){\r\n        switch(event.keyCode){\r\n            case cc.KEY.back:\r\n                //如果用户点击了返回按钮退出游戏\r\n                break;\r\n        }\r\n    },\r\n    onDestroy(){\r\n        console.log(\"销毁监听事件\");\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN,this.onKeyDown,this);\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP,this.onKeyUp,this);\r\n    },\r\n    //单机加载用户信息\r\n    StandAloneLoad:function(){\r\n\r\n    },\r\n    //加载一个用户信息\r\nLoadUser: function(iconUrl,nickname,nodeName,nodePicture){\r\n    // var self = this;\r\n    // this.qqNickname.getComponent(cc.Label).fontSize = 20;\r\n    if(nickname.length > 6){\r\n        nickname = nickname.substring(0,6) + '...';\r\n    }\r\n    nodeName.getComponent(cc.Label).string = nickname;\r\n    this.LoadUserPicture(iconUrl,nodePicture);\r\n    // //远程加载资源\r\n    // cc.loader.load({url:iconUrl,type:'jpg'},function(err,texture){\r\n    //      var spriteFra = nodePicture.getComponent(cc.Sprite).spriteFrame;\r\n    //      spriteFra.setTexture(texture);\r\n    // }.bind(this));\r\n},\r\n//加载两个用户头像\r\nLoadTwoUser:function(iconUrl,iconUr2,nodeName1,nickname,nodePicture1,nodePicture2){\r\n    console.log(\"in LoadTwoUser iconUrl is \" + iconUrl);\r\n    console.log(\"in LoadTwoUser iconUr2 is \" + iconUr2);\r\n    console.log(\"in LoadTwoUser nodeName1 is \" + nodeName1);\r\n    console.log(\"in LoadTwoUser nickname is \" + nickname);\r\n    console.log(\"in LoadTwoUser nodePicture1 is \" + nodePicture1);\r\n    console.log(\"in LoadTwoUser nodePicture2 is \" + nodePicture2);\r\n    // var self = this;\r\n    // this.qqNickname.getComponent(cc.Label).fontSize = 20;\r\n    nodeName1.getComponent(cc.Label).string = nickname;\r\n    console.log(nodeName1.getComponent(cc.Label).string+\"nickname5555555555555555555555\");\r\n    if(cc.sys.isNative){\r\n        this.LoadUserPicture(iconUrl,nodePicture1);\r\n        this.LoadUserPicture(iconUr2,nodePicture2);\r\n    }\r\n    if(CC_WECHATGAME){\r\n        this.loadUserPictureByWx(iconUrl,nodePicture1);\r\n        this.loadUserPictureByWx(iconUr2,nodePicture2);\r\n    }\r\n//     //远程加载资源\r\n//     cc.loader.load({url:iconUrl,type:'jpg'},function(err,texture){\r\n//          var spriteFra = nodePicture1.getComponent(cc.Sprite).spriteFrame;\r\n//          spriteFra.setTexture(texture);\r\n//     }.bind(this));\r\n//     cc.loader.load({url:iconUr2,type:'jpg'},function(err,texture){\r\n//         var spriteFra = nodePicture2.getComponent(cc.Sprite).spriteFrame;\r\n//         spriteFra.setTexture(texture);\r\n//    }.bind(this));\r\n},\r\n//加载三个用户头像\r\nLoadThreeUser:function(iconUrl,iconUr2,iconUr3,nodePicture1,nodePicture2,nodePicture3,nickname,nodeName1){\r\n    var self = this;\r\n    cc.log(iconUr3+\"4444444444444444444444444444444444444444444444444\");\r\n    cc.log(nodePicture1);\r\n    cc.log(nickname);\r\n    // this.qqNickname.getComponent(cc.Label).fontSize = 20;\r\n    nodeName1.getComponent(cc.Label).string = nickname;\r\n    this.LoadUserPicture(iconUrl,nodePicture1);\r\n    this.LoadUserPicture(iconUr2,nodePicture2);\r\n    this.LoadUserPicture(iconUr3,nodePicture3);\r\n},\r\n//加载用户头像\r\nLoadUserPicture:function(iconUr,nodePicture){\r\n    // if(iconUr!=\"\")\r\n    // {\r\n    //     cc.loader.load({url:iconUr,type:'jpg'},function(err,texture){\r\n    //         if(err){\r\n    //             console.log(\"加载头像出错\");\r\n    //         }\r\n    //         console.log(\"============================加载用户头像==========================================\");\r\n    //         //将用户的头像保存起来以后用的时候不用再重复加载了\r\n    //         console.log(\"===========================获取用户头像信息=====================================================\");\r\n    //         var sprite = nodePicture.getComponent(cc.Sprite);\r\n    //         sprite.spriteFrame = new cc.SpriteFrame(texture);\r\n    //    }.bind(this));\r\n    // }\r\n    //如果是相同的请求路径就从本地中提取图片\r\n    if(cc.sys.isNative){\r\n        imageLoader.imageLoadTool(iconUr,function(spriteFrame){\r\n              nodePicture.getComponent(cc.Sprite).spriteFrame = spriteFrame;  \r\n        }.bind(this));\r\n    }\r\n    if(CC_WECHATGAME){\r\n        this.loadUserPictureByWx(iconUr,nodePicture);\r\n    }\r\n},\r\n /**\r\n@param prefab:将要生成预制节点的预制体\r\n@param x     :将要生成预制节点的x坐标\r\n@param y     :将要生成预制节点的y坐标\r\n@param parentNode : 生成的预制节点的父节点\r\n    */\r\nsetPrefabPosition : function(prefab,x,y,parentNode){\r\n    var prefab = this.createPrefab(prefab);\r\n    prefab.setPosition(x,y);\r\n    parentNode.addChild(prefab);\r\n    return prefab;\r\n},\r\n//创建一个预制体节点\r\ncreatePrefab : function(prefab){\r\n    var prefabNode = cc.instantiate(prefab);\r\n    return prefabNode;\r\n},\r\nshowRank : function(){\r\n    //得到排行榜节点方便显示隐藏用\r\n    this.rankNode = this.setPrefabPosition(this.rankPrefab,0,400,this.node);\r\n    // //默认显示俄罗斯方块排行\r\n    // WxRankList.prototype.tetrisRank();\r\n},\r\nshowWorldRank : function(){\r\n    var self = this;\r\n    var vsNode = cc.find(\"PebmanentNode/vs\");\r\n    //显示世界排行榜页面\r\n    cc.find(\"PebmanentNode/vs\").active = true;\r\n    //显示黑色背景\r\n    cc.find(\"PebmanentNode/dark\").active = true;\r\n    // let responseData = [{\r\n    //     name : 'Eagles',\r\n    //     integral : '220',\r\n    //     avaturl : \"https://wx.qlogo.cn/mmopen/vi_32/rLH62uZPiaCJwc6SYVReibibtibUrCYj4aCh3TBL4ZGSeokVkCEL3BibLtLEHlndyFxNNz4a9bA3gAJO1t8BaQFF9KQ/132\",\r\n    // },\r\n    // {\r\n    //     name : 'WY',\r\n    //     integral : '210',\r\n    //     avaturl : \"https://wx.qlogo.cn/mmopen/vi_32/rLH62uZPiaCJwc6SYVReibibtibUrCYj4aCh3TBL4ZGSeokVkCEL3BibLtLEHlndyFxNNz4a9bA3gAJO1t8BaQFF9KQ/132\",\r\n    // }]\r\n    \r\n    // for(let i = 0;i < responseData.length;i++){\r\n    //     //获得openId\r\n    //     // let openId = responseData[i].openid;\r\n    //     //用户名\r\n    //     let name = responseData[i].name;\r\n    //     //积分\r\n    //     let integral = responseData[i].integral;\r\n    //     let url = responseData[i].avaturl;\r\n    //     //显示世界排行榜数据\r\n    //     let worldNode = self.setPrefabPosition(self.worldRankPrefab,3,385 - i * offset,vsNode);\r\n    //     console.log(\"世界排行榜节点是：\",worldNode);\r\n    //     worldNode.getChildByName(\"rankNum\").getComponent(cc.Label).string = i + 1;\r\n    //     self.loadRivalPictureByWx(url,worldNode.getChildByName(\"userImage\"));\r\n    //     worldNode.getChildByName(\"nickName\").getComponent(cc.Label).string = name;\r\n    //     worldNode.getChildByName(\"score\").getComponent(cc.Label).string = integral;\r\n    // }\r\n    //向服务器请求世界排行数据\r\n    let url = \"https://m5.ykplay.com/getWorldRankByName?openid=\"+this.openid;\r\n    console.log(\"this.openid is \",this.openid);\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange = function () {\r\n        if (xhr.readyState == 4 && (xhr.status >= 200 && xhr.status < 400)) {\r\n            var response = xhr.responseText;\r\n            console.log(response);\r\n            console.log(typeof response);\r\n            let offset = 192;\r\n            var responseData = JSON.parse(response);\r\n            console.log(\"responseData is \",responseData);\r\n            if(responseData.result === 'ok'){\r\n                if(responseData.data != null){\r\n                    for(let i = 0;i < responseData.data.length;i++){\r\n                        //获得openId\r\n                        let openId = responseData.data[i].openid;\r\n                        //用户名\r\n                        let name = responseData.data[i].name;\r\n                        console.log(\"in UserInfo name is \",name);\r\n                        let avatarUrl = responseData.data[i].avatarUrl;\r\n                        console.log(\"in UserInfo avatarUrl is \",avatarUrl);\r\n                        //积分\r\n                        let integral = responseData.data[i].integral;\r\n                        console.log(\"in UserInfo integral is \",integral);\r\n                        //显示世界排行榜数据\r\n                        let worldNode = self.setPrefabPosition(self.worldRankPrefab,0,385 - i * offset,vsNode);\r\n                        console.log(\"世界排行榜节点是：\",worldNode);\r\n                        worldNode.getChildByName(\"rankNum\").getComponent(cc.Label).string = responseData.data[i].rownum.toString();\r\n                        if(CC_WECHATGAME){\r\n                            let image =wx.createImage();\r\n                            image.onload = function(){\r\n                                let texture = new cc.Texture2D();\r\n                                texture.initWithElement(image);\r\n                                texture.handleLoadedTexture();\r\n                                worldNode.getChildByName(\"userImage\").getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);\r\n                            }\r\n                            image.src = avatarUrl;\r\n                        }\r\n                        // cc.loader.load({url:avatarUrl,type:'jpg'},function(err,tex){\r\n                        //     if(err){\r\n                        //         console.log(err);\r\n                        //     }\r\n                        //     console.log(\"tex is \",tex);\r\n                        //     let sprite = worldNode.getChildByName(\"userImage\").getComponent(cc.Sprite);\r\n                        //     console.log(\"sprite is \",sprite);\r\n                        //     sprite.spriteFrame.setTexture(tex);\r\n                        // });\r\n                        // self.loadUserPictureByWx(avatarUrl,worldNode.getChildByName(\"userImage\"));\r\n                        if(name.length >=5){\r\n                            name = name.substring(0,5) + \"...\";\r\n                            worldNode.getChildByName(\"nickName\").getComponent(cc.Label).string = name;\r\n                        }else{\r\n                            worldNode.getChildByName(\"nickName\").getComponent(cc.Label).string = name;\r\n                        }\r\n                        worldNode.getChildByName(\"score\").getComponent(cc.Label).string = integral;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    xhr.open(\"GET\", url, true);\r\n    xhr.send();\r\n},\r\ncacelShowWorldRank : function(){\r\n    //显示游戏圈按钮\r\n    cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").gameClubButton.show();\r\n    if(Global.advertisement !== null){\r\n        //显示广告\r\n        Global.advertisement.show();\r\n    }\r\n    //关闭世界排行榜页面\r\n    cc.find(\"PebmanentNode/vs\").active = false;\r\n    cc.find(\"PebmanentNode/dark\").active = false;\r\n    //将那些按钮开启\r\n    cc.find(\"Canvas/OneGame\").getComponent(cc.Button).interactable = true;\r\n    cc.find(\"Canvas/PersobsGame\").getComponent(cc.Button).interactable = true;\r\n    cc.find(\"Canvas/Help\").getComponent(cc.Button).interactable = true;\r\n    cc.find(\"Canvas/Back\").getComponent(cc.Button).interactable = true;\r\n    cc.find(\"Canvas/menuBottom/RankList\").getComponent(cc.Button).interactable = true;\r\n    cc.find(\"Canvas/menuBottom/Friend\").getComponent(cc.Button).interactable = true;\r\n    cc.find(\"Canvas\").getComponent(\"TurnScene\").canClick = true;\r\n},\r\nloadUserPictureByWx : function(iconUrl,nodePicture){\r\n    imageLoader.imageLoadToolForWechatGame(iconUrl,function(spriteFrame){\r\n        console.log(\"spriteFrame is \",spriteFrame);\r\n        nodePicture.getComponent(cc.Sprite).spriteFrame = spriteFrame;\r\n    });\r\n},\r\nLoadRivalPicture : function(iconUr,nodePicture){\r\n    if(CC_WECHATGAME){\r\n        this.loadRivalPictureByWx(iconUr,nodePicture);\r\n    }\r\n},\r\nloadRivalPictureByWx : function(iconUrl,nodePicture){\r\n    imageLoader.rivalImageForWechatGame(iconUrl,function(spriteFrame){\r\n        console.log(\"spriteFrame is \",spriteFrame);\r\n        nodePicture.getComponent(cc.Sprite).spriteFrame = spriteFrame;\r\n    });\r\n},\r\n//加载用户头像\r\nLoadUserPictureAsync:function(iconUr,nodePicture){\r\n    if(iconUr!=\"\")\r\n    {\r\n        var self = this;\r\n        //返回一个Promise\r\n        return new Promise(function(resolve,reject){\r\n            cc.loader.load({url:iconUr,type:'jpg'},function(err,texture){\r\n                if(err){\r\n                    console.log(\"加载头像出错\");\r\n                }\r\n                console.log(\"============================加载用户头像==========================================\",self.nameUser);\r\n                //将用户的头像保存起来以后用的时候不用再重复加载了\r\n                console.log(\"===========================获取用户头像信息=====================================================\",self.nameUser);\r\n                var sprite = nodePicture.getComponent(cc.Sprite);\r\n                console.log(\"广播。。sprite\"+sprite,self.nameUser);\r\n                console.log(\"广播。。nodePicture\"+nodePicture,self.nameUser);\r\n                console.log(\"广播。。texture\"+texture,self.nameUser);\r\n                sprite.spriteFrame = new cc.SpriteFrame(texture);\r\n                console.log(\"广播。。spriteFrame\"+sprite.spriteFrame,self.nameUser);\r\n                resolve(\"加载头像成功\"+self.nameUser);\r\n           }.bind(self));\r\n        });\r\n    }\r\n    console.log(\"广播。。该URL为空的\");\r\n},\r\n//分享朋友圈接口主动拉起微信分享\r\nshareFriends : function(){\r\n    if(CC_WECHATGAME){\r\n        //微信小游戏平台\r\n        wx.shareAppMessage({\r\n            title    : '今天的方块,你来了吗？',\r\n            imageUrl : 'https://wx.qlogo.cn/mmhead/Q3auHgzwzM7B4kyK03XibIzA3UGTia3BxicVjjfPYxPxIvEVDw5nOc0Ww/0',\r\n        });\r\n    }else if(cc.sys.isNative){\r\n        //如果是原生平台的话就调用原生平台的方法\r\n        this.nativeShare();\r\n    }\r\n},\r\n//原生平台分享\r\nnativeShare : function(){\r\n    // 微信分享屏幕截图  \r\n        // 网页端不支持  \r\n        if (cc.sys.isBrowser) {  \r\n            cc.log('网页端不支持微信分享~');  \r\n            return;  \r\n        }  \r\n  \r\n        // 正在截图中判断  \r\n        if (this._isCapturing) {  \r\n            return;  \r\n        }  \r\n        this._isCapturing = true;  \r\n  \r\n        // 截图文件判断  \r\n        var fileName = \"shareScreenshot.jpg\";  \r\n        var fullPath = jsb.fileUtils.getWritablePath() + fileName;  \r\n        if (jsb.fileUtils.isFileExist(fullPath)) {  \r\n            jsb.fileUtils.removeFile(fullPath);  \r\n        }  \r\n  \r\n        // 截图并保存图片文件  \r\n        var size = cc.director.getWinSize(); // 获取视图大小  \r\n        var texture = new cc.RenderTexture(size.width, size.height); // 新建渲染纹理  \r\n        texture.setPosition(cc.p(size.width / 2, size.height / 2)); // 移动渲染纹理到视图中心  \r\n        texture.begin(); // 开始渲染  \r\n        cc.director.getRunningScene().visit(); // 访问当前场景  \r\n        texture.end(); // 渲染结束  \r\n        texture.saveToFile(fileName, cc.IMAGE_FORMAT_JPG); // 保存渲染纹理到图片文件  \r\n        console.log(\"渲染纹理完成\");  \r\n        // 延时50毫秒，检测截图文件是否存在  \r\n        // 重复10次这个过程，如果超过10次仍没检测到图片文件，截图失败（超时）  \r\n        var self = this;  \r\n        var tryTimes = 0;  \r\n        var fn = function () {  \r\n            if (jsb.fileUtils.isFileExist(fullPath)) {  \r\n                // 调用相应平台微信分享图片方法  \r\n                if (cc.sys.os === cc.sys.OS_ANDROID) {  \r\n                    jsb.reflection.callStaticMethod('org/cocos2dx/javascript/AppActivity', 'shareIMG', '(Ljava/lang/String;)V', fullPath);  \r\n                    console.log(\"分享成功！！！\");  \r\n                } else if (cc.sys.os === cc.sys.OS_IOS) {  \r\n                    jsb.reflection.callStaticMethod('AppController', 'shareIMG:', fullPath);  \r\n                }  \r\n                self._isCapturing = false;  \r\n            } else {  \r\n                tryTimes++;  \r\n                if (tryTimes > 10) {  \r\n                    self._isCapturing = false;  \r\n                    cc.log('截图失败，超时~');  \r\n                    return;  \r\n                }  \r\n                setTimeout(fn, 50);  \r\n            }  \r\n        };  \r\n        setTimeout(fn, 50);  \r\n        console.log(\"截图完成！！\");  \r\n},\r\n//弹出广告\r\n/**\r\n * @param  {添加广告} adId\r\n */\r\nshowAdvice : function(adId){\r\n        var self = this;\r\n        let bannerHeight = 60;\r\n        let bannerWidth = 300;\r\n        if(CC_WECHATGAME){\r\n            let winSize = wx.getSystemInfoSync();\r\n            console.log(\"winSize is \",winSize);\r\n            console.log(\"advice is \",Global.advertisement);\r\n            console.log(\"adId is \",adId);\r\n            if(Global.advertisement === null){\r\n                this.createAdvertisement(winSize,bannerWidth,bannerHeight,adId);\r\n            }else{\r\n                Global.advertisement.destroy();\r\n                this.createAdvertisement(winSize,bannerWidth,bannerHeight,adId);\r\n            }\r\n        }\r\n},\r\ncreateAdvertisement : function(winSize,bannerWidth,bannerHeight,adId){\r\n    var self = this;\r\n    console.log(\"winSize is \",winSize);\r\n    if(CC_WECHATGAME){\r\n        Global.advertisement = wx.createBannerAd({\r\n            adUnitId  : adId,\r\n            style     : {\r\n                left  : 0,\r\n                top   : winSize.windowHeight - bannerHeight,\r\n                width : bannerWidth,\r\n            }\r\n        });\r\n        // let bannerAd = wx.createBannerAd({\r\n        //     adUnitId: 'adunit-e8fb34802309ceff'\r\n        //     style: {\r\n        //         left: 0,\r\n        //         top: 0,\r\n        //         width: 350\r\n        //     }\r\n        // })\r\n        let ad = Global.advertisement;\r\n        ad.show();\r\n        console.log(\"advice is \",ad);\r\n        ad.onLoad(()=>{\r\n            console.log(\"banner 广告加载成功\");\r\n        });\r\n        ad.onError(err=>{\r\n            console.log(\"err is \",err);\r\n        });\r\n        //重新修剪广告位\r\n        ad.onResize(res =>{\r\n            console.log(\"广告实例是：\",ad);\r\n            console.log(\"res is \",res);\r\n            console.log(res.width,res.height);\r\n            console.log(ad.style.realWidth,ad.style.realHeight);\r\n            console.log(\"realHeight is \",ad.style.realHeight);\r\n            ad.style.top = winSize.windowHeight - ad.style.realHeight;\r\n            ad.style.width = winSize.windowWidth;\r\n        });\r\n    }\r\n},\r\n//视频激励广告\r\nshowVideoAd : function(videoId){\r\n    this.videoAd = wx.createRewardedVideoAd({\r\n        adUnitId: videoId\r\n    })\r\n    videoAd.load()\r\n    .then(() => videoAd.show())\r\n    .catch(err => console.log(err.errMsg))\r\n    this.videoAd.onClose(res=>{\r\n        if(res && res.isEnded || res === undefined){\r\n            //正常播放结束可以下发游戏奖励\r\n            console.log(\"广告已经看完，下发游戏奖励\");\r\n        }else{\r\n            //播放中途退出，不下发游戏奖励\r\n            console.log(\"广告没有看完，不下发游戏奖励\");\r\n        }\r\n    })\r\n},\r\nstart () {\r\n\r\n},\r\n/**\r\n * @param  {String} username 用户名信息，如果用户名信息超过三个字符将字符串截取\r\n * @param  {Node} usernameNode 用户显示用户名字的节点\r\n */\r\nshowUsername : function(username,usernameNode){\r\n    if(username.length > 6){\r\n        username = username.substring(0,6) + \"...\";\r\n        usernameNode.getComponent(cc.Label).string = username;\r\n        \r\n    }else{\r\n        usernameNode.getComponent(cc.Label).string = username;\r\n    }\r\n},\r\n/**\r\n * //将最高分上传到微信托管平台\r\n * @param  {事件名称} action\r\n * @param  {游戏类型} type\r\n * @param  {该游戏类型的最高分} score\r\n */\r\npostMessage : function(action, type, score) {\r\n    console.log(\"开始保存到微信托管平台\");\r\n    console.log(\"action is \",action);\r\n    console.log(\"type is \",type);\r\n    console.log(\"score is \",score);\r\n    if(!CC_WECHATGAME) return;\r\n    let openDataContext = wx.getOpenDataContext();\r\n    openDataContext.postMessage({\r\n        action: action,\r\n        data  : type,\r\n        score : score,\r\n    })\r\n}\r\n    // update (dt) {},\r\n});\r\n","// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n        waitServer : cc.Node,\r\n        clickAudio : {\r\n            url     : cc.AudioClip,\r\n            default : null,\r\n        },\r\n        startBtn : cc.Node,\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        if(CC_WECHATGAME){\r\n            //显示游戏圈按钮\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").gameClubButton.hide();\r\n        }\r\n        //初始化用code获取的accesstoken\r\n        this.accessToken=\"\";\r\n        //初始化用code获取的openid\r\n        this.openId=\"\";\r\n        //初始化用code获取的refeshtoken\r\n        this.refshToken=\"\";\r\n\r\n        //初始化accessToken计时器\r\n        this.fTokenTime=0;\r\n          //初始化accessToken计时开关\r\n        this.isTokenTime=false;\r\n        // this.waitServer.active = false;\r\n        //    //初始化是否刷新refsh\r\n        //    this.isRefsh=false;\r\n        // this.is=false;\r\n        this.screenAdapt();\r\n        this.wxLoginSuccess = false;\r\n        //显示广告\r\n        cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").showAdvice(\"adunit-74bb1afec52241a9\");\r\n    },\r\n   //微信登陆i\r\n   WechatLogin:function(){\r\n    if(CC_WECHATGAME){\r\n        //显示加载中提升用户体验\r\n        wx.showLoading({\r\n            title : '获取用户信息...',\r\n            mask  : true,\r\n        });\r\n    }\r\n    //播放背景音乐\r\n    this.current = cc.audioEngine.play(this.clickAudio,false,1);\r\n    if(cc.sys.isNative){\r\n        console.log(\"登录方法进入原环境\");\r\n        jsb.reflection.callStaticMethod(\"org/cocos2dx/javascript/AppActivity\",\"wxLogin\",\"()V\");\r\n    }else if(CC_WECHATGAME){\r\n        //进入微信小游戏开发环境\r\n        this.waitServer.active = true;\r\n        console.log(\"进入微信小游戏开发平台\");\r\n        var self = this;\r\n        wx.checkSession({\r\n            success :function(){\r\n                console.log(\"登录信息没有过期\");\r\n                self.wechatGameLogin();\r\n            },\r\n            fail : function(){\r\n                //session_key失效之后再重新登录\r\n                console.log(\"微信登录已经过期重新登录微信\");\r\n                self.wechatGameLogin();\r\n            },\r\n            complete : function(){\r\n            }\r\n        });\r\n    }else{\r\n        //网页环境跳转到主界面\r\n        cc.director.loadScene(\"Main\",function(){\r\n            console.log(\"加载主场景成功\");\r\n        });\r\n        \r\n    }\r\n    \r\n    },\r\n    //微信小游戏微信登录方法\r\n    wechatGameLogin :function(){\r\n        var self = this;\r\n        wx.login({\r\n            success : function(code){\r\n                console.log(\"code is \",code);\r\n                code.appid  = \"wx659abd0e802de13a\";\r\n                code.secret = \"49cc1d1dd2fac12d4aa622eebe403605\";\r\n                if(code != null){\r\n                    //发起微信请求\r\n                    wx.request({\r\n                        url         : \"https://m5.ykplay.com/LoginCode\",\r\n                        data        :  code,\r\n                        header      : {\r\n\r\n                        },\r\n                        method      : \"POST\",\r\n                        dataType    : \"json\",\r\n                        success     : function(res){\r\n                            console.log(\"res is \",res);\r\n                            //获得session_key\r\n                            self.sessionKey = res.data;\r\n                            console.log(res.data);\r\n                            wx.getUserInfo({\r\n                                success : function(res){\r\n                                    console.log(\"res is \",res);\r\n                                    res.sessionKey = self.sessionKey.data;\r\n                                    //保存用户信息\r\n                                    console.log(\"在微信登录里面昵称是 :\"+res.userInfo.nickName);\r\n                                    cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser = res.userInfo.nickName;\r\n                                    console.log(\"用户名是：\",cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser);\r\n                                    //保存用户头像信息\r\n                                    cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").pictureUser = res.userInfo.avatarUrl;\r\n                                    wx.request({\r\n                                        url         : \"https://m5.ykplay.com/UserInfo\",\r\n                                        data        :  res,\r\n                                        header      : {\r\n            \r\n                                        },\r\n                                        method      : \"POST\",\r\n                                        dataType    : \"json\",\r\n                                        success     : function(result){\r\n                                            console.log(\"res is \",result);\r\n                                            cc.find(\"PebmanentNode\").getComponent(\"GetServer\").GetServerMsg(result.data);\r\n                                        },\r\n                                        fail        :function(res){\r\n                                            console.log(res);\r\n                                            console.log(\"userInfo request fail\");\r\n                                        },\r\n                                        complete    :function(){\r\n            \r\n                                        },\r\n                                    })\r\n                                }\r\n                            });\r\n                        },\r\n                        fail        :function(){\r\n                            console.log(\"fail\");\r\n                        },\r\n                        complete    :function(){\r\n\r\n                        },\r\n\r\n                    })\r\n                }\r\n                \r\n            },\r\n            fail : function(){\r\n\r\n            },\r\n            complete : function(){\r\n\r\n            },\r\n        });\r\n    },\r\n   //通过code获取微信accesstoken\r\n   GetAccessToken:function(code1){\r\n    console.log(\"in getAccessToken code1 is \" + code1);\r\n    var url = \"https://api.weixin.qq.com/sns/oauth2/access_token?appid=wx72f9006d0b1d9b7f&secret=fe9036e8fdb8bc990a318227d0e68a5e&code=\"+code1+\"&grant_type=authorization_code\";\r\n    // var str = \"shop=钻石\";\r\n    // var str=\"name=1&password=1\";\r\n    var  self=this;\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange = function () {\r\n        if (xhr.readyState == 4 && (xhr.status >= 200 && xhr.status < 400)) {\r\n            console.log(\"微信相应\");\r\n            var response = xhr.responseText;     \r\n            console.log(\"in getAccessToken response is \" + response);\r\n            self.SendServer(response);\r\n            var msg=JSON.parse(response);\r\n            self.accessToken=msg.access_token;\r\n            self.openId=msg.openid; \r\n            self.refshToken=msg.refresh_token;\r\n        }\r\n    };\r\n\r\n    //    xhr.send(\"name=100\"+\"&password=1\");\r\n    xhr.open(\"GET\", url, true);\r\n     xhr.send();\r\n   },\r\n   //将获取到的accesstoken信息发给服务器\r\n\r\n   SendServer:function(str){\r\n    var url = \"https://m5.ykplay.com/login\";\r\n    var str1=\"{\\\"tag\\\":\\\"wxLogin\\\",\\\"body\\\":\"+str+\"}\";\r\n    var xhr = new XMLHttpRequest();\r\n    var self = this;\r\n    xhr.onreadystatechange = function () {\r\n        if (xhr.readyState == 4 && (xhr.status >= 200 && xhr.status < 400)) {\r\n            console.log(\"相应信息。。。\");\r\n             var response = xhr.responseText;\r\n             console.log(\"response is \" + response);\r\n            var msg1=JSON.parse(response);\r\n            cc.find(\"PebmanentNode\").getComponent(\"GetServer\").GetServerMsg(msg1);\r\n        }\r\n    };\r\n    console.log(\"发送信息到服务器\")\r\n    xhr.open(\"POST\", url);\r\n    xhr.send(str1);\r\n   },\r\n   //登陆成功后访问微信获取用户信息\r\n   GetUserMsg:function(){\r\n    var url = \"https://api.weixin.qq.com/sns/userinfo?access_token=\"+this.accessToken+\"&openid=\"+this.openId;\r\n    // var str = \"shop=钻石\";\r\n    // var str=\"name=1&password=1\";\r\n    var  self=this;\r\n    self.isTokenTime=true;\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange = function () {\r\n        if (xhr.readyState == 4 && (xhr.status >= 200 && xhr.status < 400)) {\r\n              var response = xhr.responseText;\r\n              cc.log(response);\r\n              var msg2=JSON.parse(response);\r\n             cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser=msg2.nickname;\r\n             cc.log(msg2.headimgurl+\"\");\r\n            //  msg2.headimgurl=\"\";\r\n            //  if(msg2.headimgurl==\"\"||msg2.headimgurl==null||msg2.headimgurl==undefined)\r\n            //  {\r\n            //      cc.log(\"===================================\");\r\n                \r\n            //      cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").pictureUser=\"http://image.baidu.com/search/detail?ct=503316480&z=0&ipn=d&word=%E5%9B%BE%E7%89%87&hs=0&pn=7&spn=0&di=135898298690&pi=0&rn=1&tn=baiduimagedetail&is=0%2C0&ie=utf-8&oe=utf-8&cl=2&lm=-1&cs=2260926939%2C1550208231&os=2086677986%2C2932337668&simid=0%2C0&adpicid=0&lpn=0&ln=30&fr=ala&fm=&sme=&cg=&bdtype=0&oriquery=&objurl=http%3A%2F%2Fimg.zcool.cn%2Fcommunity%2F01690955496f930000019ae92f3a4e.jpg%402o.jpg&fromurl=ippr_z2C%24qAzdH3FAzdH3Fooo_z%26e3Bzv55s_z%26e3Bv54_z%26e3BvgAzdH3Fo56hAzdH3FZNTAaMzMy_z%26e3Bip4s%3FfotpviPw2j%3D5g&gsm=0&islist=&querylist=\";\r\n            //      self.SendUserInfo(JSON.stringify(msg2));\r\n            //  }\r\n            //  else\r\n            //  {\r\n            //     cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").pictureUser=msg2.headimgurl;\r\n            //     self.SendUserInfo(JSON.stringify(msg2));\r\n            //  }\r\n             cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").pictureUser=msg2.headimgurl;\r\n            //  //保存图片的texture2D到全局对象中\r\n            //  cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").userImage = cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").getUserPicture(msg2.headimgurl);\r\n             self.SendUserInfo(JSON.stringify(msg2));\r\n        }\r\n    };\r\n    //    xhr.send(\"name=100\"+\"&password=1\");\r\n    xhr.open(\"GET\", url, true);\r\n     xhr.send();\r\n   },\r\n   //访问并新刷新accesstoken\r\n   RefreshToken:function(){\r\n     this.isRefsh=true;\r\n     var url = \"https://api.weixin.qq.com/sns/oauth2/refresh_token?appid=wx72f9006d0b1d9b7f&grant_type=refresh_token&refresh_token=\"+this.refshToken;\r\n    // var str = \"shop=钻石\";\r\n    // var str=\"name=1&password=1\";\r\n    var  self=this;\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange = function () {      \r\n        if (xhr.readyState == 4 && (xhr.status >= 200 && xhr.status < 400)) {\r\n            var response = xhr.responseText;\r\n            self.SendServer(response);\r\n           var msg=JSON.parse(response);\r\n           self.accessToken=msg.access_token;\r\n           self.openId=msg.openid; \r\n           self.refshToken=msg.refresh_token;\r\n        }\r\n    };\r\n    //    xhr.send(\"name=100\"+\"&password=1\");\r\n    xhr.open(\"GET\", url, true);\r\n     xhr.send();\r\n   },\r\n   //将获取到的用户信息发给服务器\r\n   SendUserInfo:function(str){\r\n    var url = \"https://m5.ykplay.com/UserMsg\";\r\n    var str1=\"{\\\"tag\\\":\\\"UserMsg\\\",\"+\"\\\"type\\\":1,\"+\"\\\"body\\\":\"+str+\"}\";\r\n    var xhr = new XMLHttpRequest();\r\n    var self = this;\r\n    xhr.onreadystatechange = function () {\r\n        if (xhr.readyState == 4 && (xhr.status >= 200 && xhr.status < 400)) {\r\n             var response = xhr.responseText;  \r\n            var msg1=JSON.parse(response);\r\n            //接受服务器用户并判断是否为非法用户\r\n            cc.find(\"PebmanentNode\").getComponent(\"GetServer\").GetServerMsg(msg1);\r\n        }\r\n    };\r\n    xhr.open(\"POST\", url);\r\n    xhr.send(str1);\r\n   },\r\n    start () {\r\n    },\r\n    //屏幕适配\r\n    screenAdapt : function(){\r\n        var size = cc.view.getFrameSize();\r\n        var size1 = cc.director.getWinSize();\r\n\r\n        console.log(\"设计分辨率的宽是\",size1.width);\r\n        console.log(\"设计分辨率的高是\",size1.height);\r\n        console.log(\"手机屏幕的宽是\",size.width);\r\n        console.log(\"手机屏幕的高是\",size.height);\r\n    },\r\n    update (dt) {\r\n        if(this.isTokenTime)\r\n        { \r\n            this.fTokenTime +=dt; \r\n            if(this.fTokenTime>7000)\r\n            {\r\n                this.RefreshToken();\r\n                this.isTokenTime=false;\r\n                this.fTokenTime=0;\r\n            }\r\n        }\r\n        if(!this.wxLoginSuccess){\r\n            if(cc.sys.isNative){\r\n                //判断用户微信是否登录\r\n                var loginState = jsb.reflection.callStaticMethod(\"org/cocos2dx/javascript/AppActivity\",\"GetWeChatState\",\"()I\")\r\n                console.log(\"微信登录状态是\",loginState + typeof(loginState));\r\n                console.log(\"loginState === 1\",loginState === 1);\r\n                if(loginState === 1){\r\n                    var code = jsb.reflection.callStaticMethod(\"org/cocos2dx/javascript/AppActivity\",\"GetCode\",\"()Ljava/lang/String;\");\r\n                    console.log(\"in update code is \",code);\r\n                    this.GetAccessToken(code);\r\n                    jsb.reflection.callStaticMethod(\"org/cocos2dx/javascript/AppActivity\",\"Init\",\"()V\");\r\n                    this.wxLoginSuccess = true;\r\n                }\r\n            }\r\n        }\r\n        if(Global.wechatSuccess){\r\n            //显示等待节点\r\n            this.waitServer.active = true;\r\n        }\r\n        // this.glinkTime += dt;\r\n        // if(this.glinkTime >= 1.5){\r\n\r\n        // }\r\n        if(this.startBtn.opacity > 150){\r\n            this.startBtn.opacity -= dt * 80;\r\n        }\r\n        if(this.startBtn.opacity <= 150){\r\n            this.startBtn.opacity = 255;\r\n        }\r\n        //登录成功之后设置开始游戏按钮透明度为255\r\n        if(this.wxLoginSuccess){\r\n            this.startBtn.opacity = 255;\r\n        }\r\n      \r\n    },\r\n});\r\n","/*\r\n * @Author: mikey.zhaopeng \r\n * @Date: 2018-06-20 09:51:08 \r\n * @Last Modified by: mikey.zhaopeng\r\n * @Last Modified time: 2018-12-21 22:10:44\r\n */\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        nickName : cc.Node,\r\n        icon     : cc.Node,\r\n        clickAudio :{\r\n            url : cc.AudioClip,\r\n            default : null,\r\n        },\r\n    },\r\n    \r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        if(CC_WECHATGAME){\r\n            //显示游戏圈按钮\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").gameClubButton.hide();\r\n        }\r\n        // //预加载这些场景\r\n        cc.director.preloadScene(\"Game1\",function(){\r\n            cc.log(\"俄罗斯方块预加载成功！！\");\r\n        });\r\n        cc.director.preloadScene(\"Game2\",function(){\r\n            cc.log(\"宝石方块预加载成功\");\r\n        });\r\n        // cc.director.preloadScene(\"Game3\",function(){\r\n        //     cc.log(\"噗哟噗哟预加载成功\");\r\n        // });\r\n        cc.director.preloadScene(\"Game4\",function(){\r\n            cc.log(\"画像方块预加载成功\");\r\n            console.log(\"永久节点是:\",cc.find(\"PebmanentNode\"));\r\n            if(cc.find(\"PebmanentNode\") !== null){\r\n                //显示广告\r\n                cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").showAdvice(\"adunit-4c58e1d36d38a2d6\");\r\n            }\r\n            \r\n        });\r\n        // let textureListLength = cc.textureCache.getAllTextures().length;\r\n        // for(let i = 0;i <textureListLength;i++){\r\n        //     console.log(\"in oneChooseModel's all textures is \",cc.textureCache.getAllTextures()[i].url);\r\n        // }\r\n    },\r\n    \r\n    start () {\r\n        if(cc.sys.isNative){\r\n            var userInfoScript = cc.find(\"PebmanentNode\").getComponent(\"UserInfo\");\r\n            this.nickName.getComponent(cc.Label).string = userInfoScript.nameUser;\r\n            userInfoScript.LoadUserPicture(userInfoScript.pictureUser,this.icon);\r\n            //加载用户姓名\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").showUsername(userInfoScript.nameUser,this.nickName);\r\n        }\r\n        if(CC_WECHATGAME){\r\n            var userInfoScript = cc.find(\"PebmanentNode\").getComponent(\"UserInfo\");\r\n            console.log(\"in chooseModel nameUser is \",userInfoScript.nameUser);\r\n            // this.nickName.getComponent(cc.Label).string = userInfoScript.nameUser;\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").loadUserPictureByWx(cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").pictureUser,cc.find(\"Canvas/icon\"));\r\n            //加载用户姓名\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").showUsername(userInfoScript.nameUser,this.nickName);\r\n        }\r\n        \r\n    },\r\n    //画像方块\r\n    figureBlock : function(){\r\n        if(CC_WECHATGAME){\r\n            wx.showLoading({\r\n                title : '火速加载中...',\r\n                mask  : true,\r\n            })\r\n        }\r\n        this.playClickMusic();\r\n        cc.director.loadScene(\"Game4\",function(){\r\n            if(CC_WECHATGAME){\r\n               //隐藏加载框\r\n               wx.hideLoading();\r\n            }\r\n        });\r\n    },\r\n    //噗哟噗哟\r\n    puyoBlock   : function(){\r\n        // this.playClickMusic();\r\n        // cc.director.loadScene(\"Game2\");\r\n    },\r\n    //俄罗斯方块\r\n    tetrisBlock : function(){\r\n        if(CC_WECHATGAME){\r\n            wx.showLoading({\r\n                title : '火速加载中...',\r\n                mask  : true,\r\n            })\r\n        }\r\n        this.playClickMusic();\r\n        cc.director.loadScene(\"Game1\",function(){\r\n            if(CC_WECHATGAME){\r\n               //隐藏加载框\r\n               wx.hideLoading();\r\n            }\r\n        });\r\n    },\r\n    //宝石方块\r\n    stoneBlock  : function(){\r\n        if(CC_WECHATGAME){\r\n            wx.showLoading({\r\n                title : '火速加载中...',\r\n                mask  : true,\r\n            })\r\n        }\r\n        this.playClickMusic();\r\n        cc.director.loadScene(\"Game3\",function(){\r\n            if(CC_WECHATGAME){\r\n               //隐藏加载框\r\n               wx.hideLoading();\r\n            }\r\n        });\r\n    },\r\n    //匹配返回\r\n    back        : function(){\r\n        if(CC_WECHATGAME){\r\n            wx.showLoading({\r\n                title : '火速加载中...',\r\n                mask  : true,\r\n            })\r\n        }\r\n        this.playClickMusic();\r\n        cc.director.loadScene(\"Main\",function(){\r\n            if(CC_WECHATGAME){\r\n                wx.hideLoading();\r\n            }\r\n        });\r\n    },\r\n    share : function(){\r\n        if(CC_WECHATGAME){\r\n            console.log(\"首页share\");\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").shareFriends();\r\n        }else if(cc.sys.isNative){\r\n            //原生平台分享\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nativeShare();\r\n        }\r\n    },\r\n    playClickMusic : function(){\r\n        cc.audioEngine.play(this.clickAudio,false,1);\r\n    },\r\n    // update (dt) {},\r\n    \r\n});\r\n","/*\r\n * @Author: mikey.zhaopeng \r\n * @Date: 2018-06-19 19:29:08 \r\n * @Last Modified by: mikey.zhaopeng\r\n * @Last Modified time: 2018-12-21 21:48:06\r\n */\r\nvar comm = require(\"../game3/Common\");\r\nvar game3 = require(\"../game3/game\");\r\nvar statuMachine = require(\"./StatuMachine\");\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        imagePrefabArr : {\r\n            default : [],\r\n            type    : [cc.Prefab],\r\n        },\r\n        girdSize    : 120,\r\n        back        : cc.Prefab,\r\n        nextShape : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        next2 : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        downButton : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        slideButton : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        rotateButton : {\r\n            default  : null,\r\n            type     : cc.Node,\r\n        },\r\n        //遮罩层\r\n        mask : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        //暂停菜单\r\n        pauseMenu : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        pauseBack      : cc.Node,\r\n        pauseContinue  : cc.Node,\r\n        pauseRestart   : cc.Node,\r\n        //昵称label\r\n        nickName : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        //分数label\r\n        scoreLabel : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        //游戏结束菜单\r\n        overMenu  : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        //用户头像\r\n        icon     :{\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        gameOverAnimation : cc.Node,\r\n        gameSlide : cc.Node,\r\n        //点击按钮的声音\r\n        clickAudio : {\r\n            url  : cc.AudioClip,\r\n            default : null,\r\n        },\r\n        //失败音效\r\n        loseAudio : {\r\n            url  : cc.AudioClip,\r\n            default : null,\r\n        },\r\n        //消除音效\r\n        removeAudio : {\r\n            url  : cc.AudioClip,\r\n            default : null,\r\n        },\r\n        //快速下落音效\r\n        downAudio : {\r\n            url  : cc.AudioClip,\r\n            default : null,\r\n        },\r\n        darkNode : cc.Node,\r\n        handNode : cc.Node,\r\n        noticePrefab : cc.Prefab,\r\n\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        this.showOver = false;\r\n        if(Global.advertisement !== null){\r\n            //隐藏广告\r\n            Global.advertisement.hide();\r\n        }\r\n        this.showNoticeHelp = true;\r\n        //初始化提示预制体\r\n        this.noticeBtn = this.setPrefabPosition(this.noticePrefab,0,0,this.node.parent.getChildByName(\"darkNotice\"));\r\n        console.log(\"this.noticeBtn is \",this.noticeBtn);\r\n        this.noticeBtn.getChildByName(\"wodNotice\").getChildByName(\"dynamicWords\").getComponent(cc.Label).string = \"随着消除次数的增加，方块的下落速度\\n\"\r\n        + \"随之增加,要掌控住方块的速度哦！\";\r\n        this.noticeBtn.on(\"touchstart\",function(){\r\n            this.darkNode.active = false;\r\n            this.handNode.active = false;\r\n            this.noticeBtn.active = false;\r\n            this.showNoticeHelp = false;\r\n        }.bind(this))\r\n        this.darkNode.on(\"touchstart\",function(){\r\n            this.darkNode.active = false;\r\n            this.handNode.active = false;\r\n            this.noticeBtn.active = false;\r\n            this.showNoticeHelp = false;\r\n        }.bind(this));\r\n        this.handNode.on(\"touchstart\",function(){\r\n            this.darkNode.active = false;\r\n            this.handNode.active = false;\r\n            this.noticeBtn.active = false;\r\n            this.showNoticeHelp = false;\r\n        }.bind(this));\r\n        if(cc.director.isPaused()){\r\n            cc.director.resume();\r\n        }\r\n        if(cc.sys.isNative){\r\n            let userInfoScript = cc.find(\"PebmanentNode\").getComponent(\"UserInfo\");\r\n            // this.nickName.getComponent(cc.Label).string = userInfoScript.nameUser;\r\n            userInfoScript.showUsername(userInfoScript.nameUser,this.nickName);\r\n            userInfoScript.LoadUserPicture(userInfoScript.pictureUser,this.icon);\r\n        }\r\n        if(CC_WECHATGAME){\r\n            let userInfoScript = cc.find(\"PebmanentNode\").getComponent(\"UserInfo\");\r\n            // this.nickName.getComponent(cc.Label).string = userInfoScript.nameUser;\r\n            userInfoScript.showUsername(userInfoScript.nameUser,this.nickName);\r\n            userInfoScript.LoadUserPicture(userInfoScript.pictureUser,this.icon);\r\n        }\r\n        this.totalRemoveTime = 0;\r\n        this.totalTime = 0;\r\n        this.normalSpeed = 0.8,\r\n        this.quickSpeed  = 0.07,\r\n         this.nodeHeight = this.node.height;\r\n         this.nodeWidth = this.node.width;\r\n         this.initMap();\r\n         //创建一个空节点用来盛放生成的预制体\r\n         this.nodeArr = this.initImage(this.node,this.createRandomX(this.createRandom(0,6)),this.nodeHeight/2 - this.girdSize/2);\r\n         this.createNext();\r\n         //从游戏屏幕上下落的次数\r\n         this.times = 0;\r\n        //  //开始下落\r\n        //  this.downFunction(this.nodeArr,1);\r\n         this.iState = 0;\r\n         this.totalTime = 0;\r\n         this.registerKeyBoard();\r\n         this.quick = false;\r\n         this.time = 0;\r\n         this.xltime = this.normalSpeed;\r\n         this.cishu = 0;\r\n         //监听下落按钮按下的时候\r\n         this.downButton.on(\"touchstart\",function(){\r\n            this.playAudio(this.downAudio);\r\n            this.xltime = this.quickSpeed;\r\n            this.downButton.children[0].opacity = 120;\r\n            this.playAudio(this.clickAudio);\r\n         }.bind(this));\r\n         //下落按钮离开时候\r\n         this.downButton.on(\"touchend\",function(){\r\n            this.xltime = this.normalSpeed;\r\n            this.downButton.children[0].opacity = 0;\r\n         }.bind(this));\r\n         this.gameOver = false;\r\n         this.status = 0;\r\n         Array.prototype.contain = function(node){\r\n            if(node != undefined){\r\n                for(var i = 0;i<this.length;i++){\r\n                    if(this[i].x === node.x && this[i].y === node.y && this[i].getComponent(\"Figure\").type === node.getComponent(\"Figure\").type){\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n            return false;\r\n        };\r\n        this.tempNodes = [];\r\n        this.san = 0;\r\n        //计分数字\r\n        this.score = 0;\r\n        //旋转按钮旋转\r\n        // var rotateAction = cc.rotateBy(3,360).easing(cc.easeCubicActionOut());\r\n        // var rf = cc.repeatForever(rotateAction);\r\n        // this.rotateButton.runAction(rf);\r\n\r\n        // Menu.prototype.onLoad();\r\n\r\n        //不显示遮罩层\r\n        this.mask.active = false;\r\n        //暂停菜单不显示\r\n        this.pauseMenu.active = false;\r\n        //不显示游戏结束菜单\r\n        this.overMenu.active = false;\r\n\r\n        //游戏结束计时\r\n        this.overCost = 0;\r\n        //当前的行号\r\n        this.nCol = 0;\r\n        this.gameOverAnimation.active = false;\r\n        this.pauseBack.on(\"touchstart\",function(){\r\n            console.log(\"暂停页面的退出\");\r\n            cc.director.resume();\r\n            cc.director.loadScene(\"OneChoose\");\r\n        }.bind(this));\r\n        this.pauseContinue.on(\"touchstart\",function(){\r\n            console.log(\"暂停页面的继续\");\r\n            cc.director.resume();\r\n            this.mask.active = false;\r\n            this.pauseMenu.active = false;\r\n        }.bind(this));\r\n        this.pauseRestart.on(\"touchstart\",function(){\r\n            console.log(\"暂停页面的重新开始\");\r\n            cc.director.resume();\r\n            this.mask.active = false;\r\n            this.pauseMenu.active = false;\r\n            cc.director.loadScene(\"Game4\");\r\n        }.bind(this));\r\n        this.screenAdapt();\r\n        //单机的网络版超时时间防止自己被踢出\r\n        this.invalidRemoveTime = 0;\r\n        this.currentAu = null;\r\n    },\r\n    registerKeyBoard : function(){\r\n        //是否在滑动节点上\r\n        this.onSlide = false;\r\n        this.onGameSlide = false;\r\n        var self = this;\r\n        //注册键盘监听\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN,this.onKeyDown,this);\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP,this.onKeyUp,this);\r\n        //滑动按钮监听\r\n        this.slideButton.on(\"touchstart\",function(event){\r\n            // this.onSlide = true;\r\n            //获得当前点击的全局坐标\r\n            this.slideButton.children[0].opacity = 120;\r\n            // self.slidePosition = event.getLocation();\r\n            cc.log(\"self.slidePositionX is \" + self.slidePositionX);\r\n        }.bind(this));\r\n        //在滑动节点上移动的时候\r\n        this.slideButton.on(\"touchmove\",function(event){\r\n            this.onSlide = true;\r\n            //获得当前点击的全局坐标\r\n            this.slideButton.children[0].opacity = 120;\r\n            self.slidePosition = event.getLocation();\r\n            cc.log(\"slidePositionX is \" + self.slidePositionX);\r\n        }.bind(this));\r\n        this.slideButton.on(\"touchcancel\",function(event){\r\n            //获得当前点击的全局坐标\r\n            this.slideButton.children[0].opacity = 0;\r\n            self.slidePosition = event.getLocation();\r\n            this.onSlide = false;\r\n        }.bind(this));\r\n        //在滑动节点上离开的时候\r\n        this.slideButton.on(\"touchend\",function(event){\r\n             //获得当前点击的全局坐标\r\n            this.slideButton.children[0].opacity = 0;\r\n            self.slidePosition = event.getLocation();\r\n            this.onSlide = true;\r\n        }.bind(this));\r\n\r\n         // 滑动节点上方的空节点\r\n         this.gameSlide.on(\"touchstart\",function(event){\r\n            cc.log(\"点击了gameSlide节点\");\r\n        }.bind(this));\r\n        this.gameSlide.on(\"touchmove\",function(event){\r\n            this.onGameSlide = true;\r\n            self.gameSlidePosition = event.getLocation();\r\n        }.bind(this));\r\n        this.gameSlide.on(\"touchend\",function(event){\r\n            this.onGameSlide = true;\r\n            self.gameSlidePosition = event.getLocation();\r\n        }.bind(this));\r\n        this.gameSlide.on(\"touchcancel\",function(event){\r\n            this.onGameSlide = false;\r\n            self.gameSlidePosition = event.getLocation();\r\n        }.bind(this));\r\n        function time(){\r\n            return new Promise(function(resolve,reject){\r\n                setTimeout(function(){\r\n                    console.log(\"aaaaaaaaaaa\")\r\n                    resolve(\"aaa\");\r\n                },3000)\r\n            })\r\n        }\r\n        (function(){\r\n            time();\r\n            console.log(\"$$$$$$$$$$$$$$$$$$$$$$$$$\");\r\n        })();\r\n    },\r\n    //返回触点对应的列数\r\n    getTouchLine : function(touchNode,worldPosition){\r\n         //将触点的x坐标转化为本地坐标系\r\n         var localX = touchNode.convertToNodeSpaceAR(cc.v2(worldPosition.x,worldPosition.y)).x;\r\n         cc.log(\"local is \" + localX);\r\n         if(localX > 0){\r\n              var n1 = Math.floor(localX/(touchNode.width/6));\r\n              if(n1 >= 0 && n1 < 1){\r\n                  this.nCol = 3;\r\n              }else if(n1 >= 1 && n1 < 2){\r\n                  this.nCol = 4;\r\n              }else if(n1 >= 2 && n1 < 3){\r\n                  this.nCol = 5;\r\n              }\r\n         }else if(localX < 0){\r\n             var n2 = Math.floor(-localX/(touchNode.width/6));\r\n             if(n2 >= 0 && n2 < 1){\r\n                this.nCol = 2;\r\n            }else if(n2 >= 1 && n2 < 2){\r\n                this.nCol = 1;\r\n            }else if(n2 >= 2 && n2 < 3){\r\n                this.nCol = 0;\r\n            }\r\n         }\r\n         return this.nCol;\r\n    },\r\n    onKeyDown : function(event){\r\n        switch(event.keyCode){\r\n            case cc.KEY.down:\r\n                this.xltime = this.quickSpeed;\r\n                 break;\r\n            case cc.KEY.left:\r\n                 this.moveLeft();\r\n                 cc.log(\"<-----\");\r\n                 break;\r\n            case cc.KEY.right:\r\n                 this.moveRight();\r\n                 cc.log(\"----->\");\r\n                 break;  \r\n            case cc.KEY.f:\r\n                 this.rotate();\r\n                 //旋转操作\r\n                 break;                  \r\n        }\r\n    },\r\n    onKeyUp   : function(event){\r\n        switch(event.keyCode){\r\n            case cc.KEY.down:\r\n                this.xltime = this.normalSpeed;\r\n                 break;\r\n            case cc.KEY.left:\r\n                 break;\r\n            case cc.KEY.right:\r\n                 break;  \r\n            case cc.KEY.f:\r\n                 //旋转操作\r\n                 break;                 \r\n        }\r\n    },\r\n    onDestroy () {\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\r\n        let resLength = cc.textureCache.getAllTextures().length;\r\n        let resArr = cc.textureCache.getAllTextures();\r\n        for(let i = 0;i < resLength;i++){\r\n            //释放贴图资源\r\n            console.log(\"in game4's textures is \",resArr[i]);\r\n        }\r\n    },\r\n    start () {\r\n        // let textureListLength = cc.textureCache.getAllTextures().length;\r\n        // //收集贴图资源\r\n        // for(let i = 0;i <textureListLength;i++){\r\n        //     console.log(\"in game4's all textures is -i \" + i,cc.textureCache.getAllTextures()[i].url);\r\n        // }\r\n    },\r\n    createRandomX : function(randomNumber){\r\n        return this.backGroundArr[0][randomNumber];\r\n    },\r\n    //产生随机数\r\n    createRandom : function(min,max){\r\n         return Math.floor(Math.random()*(max - min) + min);\r\n    },\r\n    //初始化游戏场景主背景12行6列的网格\r\n    initMap : function(){\r\n        //初始化y坐标\r\n        var y = this.nodeHeight/2 - this.girdSize/2 - 12;\r\n        //初始化x坐标\r\n        var x = -this.nodeWidth/2 + this.girdSize/2 + 10;\r\n        cc.log(\"x is \" + x);\r\n        this.backGroundArr = [];\r\n        this.map = [];\r\n        //12行6列的网格\r\n        for(var i = 0;i < comm.MAP_ROW; i++){\r\n            //设置它的y坐标\r\n            var tempY =y - i * this.girdSize - 1;\r\n            tempY = Number(tempY.toFixed(2));\r\n            cc.log(\"tempY is \" + tempY);\r\n            this.backGroundArr[i] = [];\r\n            this.map[i] = [];\r\n            for(var j = 0; j < comm.MAP_COL;j++){\r\n                var outArr = this.backGroundArr[i];\r\n                var mapData = this.map[i];\r\n                var tempX = x + j * this.girdSize + 1;\r\n                tempX = Number(tempX.toFixed(2));\r\n                cc.log(\"tempX is \" + tempX);\r\n                //y坐标不变，x坐标要变\r\n                var tempPrefab = this.setPrefabPosition(this.back,tempX,tempY,this.node);\r\n                // var node = new Shape(tempPrefab,-1);\r\n                tempPrefab.getComponent(\"Back\").isFilled = 0;\r\n                // tempPrefab.isFilled = 0;\r\n                // cc.log(\"tempPrefab.isFilled is \" + tempPrefab.isFilled);\r\n                tempPrefab.getComponent(\"Back\").type = -1;\r\n                tempPrefab.getComponent(\"Back\").innerNode = null;\r\n                // var shape = new Shape(tempPrefab,-1);\r\n                outArr[j]=tempPrefab;\r\n                mapData[j] = 0;\r\n            }\r\n        }\r\n        cc.log(\"backGroundArr is \" +this.backGroundArr);\r\n    },\r\n    //生成形状在这个节点数组中加入父节点\r\n    initImage : function(parentNode){\r\n        this.times = 0;\r\n        //动态生成一个新的节点将生成的预制体节点加入到该父节点上\r\n        // var newNode = new cc.Node();\r\n        // parentNode.addChild(newNode);\r\n        //用来存放预制体的数组\r\n        //定义从哪一列开始下落\r\n        var randomCol = game3.prototype.createRandom(2,4);\r\n        var prefabArrTemp = [];\r\n        this.cishu  = 0;\r\n        //是否生成成功并且全部显示完毕\r\n        this.isCreateOver = false;\r\n        //从上往下生成\r\n        // var y = this.nodeHeight/2 + this.girdSize/2+1*this.girdSize;\r\n        for(var i = 0;i < 2;i++){\r\n            // var offSet = i * this.prefabHeight;\r\n            // cc.log(\"offSet is \" + offSet);\r\n            // //产生0-8的随机数\r\n            var index = this.controlRandom();\r\n            // //将对应的颜色索引存放到该数组中\r\n            // // this.boxColorArr.push(this.prefabArr[index].color);\r\n            // cc.log(\"index is \" + index);\r\n            // //将对应的预制体取出来转化为节点然后显示\r\n            var prefabNode = game3.prototype.createPrefab(this.imagePrefabArr[index]);\r\n            // cc.log(\"x is \" + x + \" and y is \"+ y - offSet);\r\n            //设置预制节点的位置\r\n            prefabNode.setPosition(this.backGroundArr[0][randomCol].x,this.backGroundArr[0][randomCol].y);\r\n            cc.log(\"prefabNode is \" + prefabNode);\r\n            prefabNode.getComponent(\"Figure\").type = index;\r\n            prefabNode.getComponent(\"Figure\").col = randomCol;\r\n            prefabNode.getComponent(\"Figure\").row = 0;\r\n            prefabNode.active = false;\r\n            // this.backGroundArr[i][randomCol].node = prefabNode;\r\n            cc.log(\"------type is \" + prefabNode.getComponent(\"Figure\").type);\r\n            //将该预制节点添加为parentNode的孩子\r\n            parentNode.addChild(prefabNode);\r\n            // var shape = new Shape(prefabNode,index);\r\n            //将当前预制体节点存放到预制体临时数组里面\r\n            prefabArrTemp.push(prefabNode);\r\n        }\r\n        console.log(prefabArrTemp);\r\n        //生成父节点\r\n        return prefabArrTemp;\r\n    },\r\n    //改变随机数出现的概率\r\n    controlRandom : function(){\r\n        var id;\r\n        var rnd = Math.random();\r\n        if(rnd < 0.2){\r\n            id = 0;\r\n        }else if(rnd < 0.4){\r\n            id = 1;\r\n        }else if(rnd < 0.6){\r\n            id = 2;\r\n        }else if(rnd < 0.8){\r\n            id = 3;\r\n        }else if(rnd < 0.85){\r\n            id = 4;\r\n        }else if(rnd < 0.9){\r\n            id = 5;\r\n        }else if(rnd < 0.95){\r\n            id = 6;\r\n        }else if(rnd < 1){\r\n            id = 7;\r\n        }\r\n        return id;\r\n    },\r\n    //生成下一个形状\r\n    createNext : function(){\r\n        if(this.next2Block === undefined){\r\n            this.nextBlock = this.generateNext(this.node);\r\n            //显示下一个形状\r\n            this.showNextShape(this.nextBlock,this.nextShape);\r\n        }else{\r\n            this.nextBlock = this.next2Block;\r\n            this.showNextShape(this.nextBlock,this.nextShape);\r\n        }\r\n        //生成下下个形状\r\n        this.next2Block = this.generateNext(this.node);\r\n        //显示下下个形状\r\n        this.showNextShape(this.next2Block,this.next2);\r\n    },\r\n    //生成下一个形状\r\n    generateNext : function(parentNode){\r\n        return this.initImage(parentNode);\r\n    },\r\n    //显示下一个形状\r\n    showNextShape : function(nextBlock,parentNode){\r\n        //显示下一个形状之前删除这个节点的所有子节点\r\n        if(parentNode.childrenCount > 0){\r\n            for(let k = 0;k<parentNode.childrenCount;k++){\r\n                //销毁该子节点,如果销毁节点成功的话就显示下一个形状\r\n                parentNode.children[k].destroy();\r\n            }\r\n        }\r\n        //依次生成预制节点组成的节点数组\r\n        for(let i = 0;i<2;i++){\r\n            var type = nextBlock[i].getComponent(\"Figure\").type;\r\n            // var spriteFrame = nextBlock[i].getComponent(\"cc.Sprite\").spriteFrame;\r\n            this.setPrefabPosition(this.imagePrefabArr[type],0,100-i*this.girdSize,parentNode);\r\n        }\r\n        // for(let k = 0;k<3;k++){\r\n        //     var pre = ;\r\n        //     this.setPrefabPosition(,50,50+k*this.prefabHeight,this.nextShape);\r\n        // }\r\n    },\r\n     /**\r\n    @param prefab:将要生成预制节点的预制体\r\n    @param x     :将要生成预制节点的x坐标\r\n    @param y     :将要生成预制节点的y坐标\r\n    @param parentNode : 生成的预制节点的父节点\r\n     */\r\n    setPrefabPosition : function(prefab,x,y,parentNode){\r\n        var prefab = this.createPrefab(prefab);\r\n        prefab.setPosition(x,y);\r\n        parentNode.addChild(prefab);\r\n        return prefab;\r\n    },\r\n    //创建一个预制体节点\r\n    createPrefab : function(prefab){\r\n        var prefabNode = cc.instantiate(prefab);\r\n        return prefabNode;\r\n    },\r\n    //查看当前的棍处于哪一列\r\n    getColumn : function(node){\r\n        //竖行的条\r\n        var indexGrid = this.chooseColumnByLocation(node.x);\r\n        //放回列号\r\n        return indexGrid;\r\n    },\r\n    //根据坐标选择位于哪个列\r\n    chooseColumnByLocation : function(x){\r\n        switch(x){\r\n            case this.backGroundArr[0][0].x:\r\n                return 0;\r\n            case this.backGroundArr[0][1].x:\r\n                return 1;\r\n            case this.backGroundArr[0][2].x: \r\n                return 2;\r\n            case this.backGroundArr[0][3].x: \r\n                return 3;\r\n            case this.backGroundArr[0][4].x:\r\n                return 4;\r\n            case this.backGroundArr[0][5].x:\r\n                return 5;                 \r\n        }\r\n    },\r\n    //根据坐标获得位于哪一行\r\n    getRow : function(node){\r\n        var yIndexResult;\r\n        cc.log(\"node is \" + node);\r\n        yIndexResult = this.chooseRawByLocation(node.y);\r\n        return yIndexResult;\r\n    },\r\n    /***\r\n        根据y坐标数值得到对应的行\r\n        返回对应的行数\r\n        @param : y 传入方法中的y坐标\r\n        @return 返回坐标对应的行号\r\n    * */\r\n    chooseRawByLocation : function(y){\r\n        switch(y){\r\n            case this.backGroundArr[11][0].y:\r\n                return 11;\r\n            case this.backGroundArr[10][0].y:\r\n                return 10;\r\n            case this.backGroundArr[9][0].y: \r\n                return 9;\r\n            case this.backGroundArr[8][0].y: \r\n                return 8;\r\n            case this.backGroundArr[7][0].y:\r\n                return 7;\r\n            case this.backGroundArr[6][0].y:\r\n                return 6;\r\n            case this.backGroundArr[5][0].y:\r\n                return 5;\r\n            case this.backGroundArr[4][0].y:\r\n                return 4;\r\n            case this.backGroundArr[3][0].y: \r\n                return 3;\r\n            case this.backGroundArr[2][0].y: \r\n                return 2;\r\n            case this.backGroundArr[1][0].y:\r\n                return 1;\r\n            case this.backGroundArr[0][0].y:\r\n                return 0;    \r\n        }\r\n    },\r\n    getNodeArrMaxCol : function(){\r\n        var maxCol;\r\n        var colArr = [];\r\n        for(let i = 0;i<this.nodeArr.length;i++){\r\n            colArr.push(this.nodeArr[i].getComponent(\"Figure\").col);\r\n        }\r\n        maxCol = Math.max.apply(Math,colArr);\r\n        //返回最大列\r\n        return maxCol;\r\n    },\r\n    getNodeArrMinCol : function(){\r\n        var minCol;\r\n        var colArr = [];\r\n        for(let i = 0;i<this.nodeArr.length;i++){\r\n            colArr.push(this.nodeArr[i].getComponent(\"Figure\").col);\r\n        }\r\n        minCol = Math.min.apply(Math,colArr);\r\n        //返回最小列\r\n        return minCol;\r\n\r\n    },\r\n    shareButton : function(){\r\n        if(CC_WECHATGAME){\r\n            console.log(\"首页share\");\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").shareFriends();\r\n        }else if(cc.sys.isNative){\r\n            //原生平台分享\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nativeShare();\r\n        }\r\n    },\r\n    //复活按钮\r\n    relive : function(){\r\n        //停止播放失败音效\r\n        cc.audioEngine.stop(this.currentAu);\r\n        var self = this;\r\n        console.log(\"正在看视频\");\r\n        let videoIdArr = [\"adunit-3838817899a6fb0d\",\"adunit-4b3b25878ef47139\",\"adunit-821fcb6e0d0793d1\",\"adunit-1dc7d6d90f7f49bf\"];\r\n        let choosedId = Math.floor(Math.random(0,1)*4);\r\n        console.log(\"广告id是：\",choosedId);\r\n        if(CC_WECHATGAME){\r\n            let videoAd = wx.createRewardedVideoAd({\r\n                adUnitId: videoIdArr[choosedId]\r\n            })\r\n            videoAd.load()\r\n            .then(() => videoAd.show())\r\n            .catch(err => console.log(err.errMsg))\r\n            videoAd.onClose(res=>{\r\n                if(res && res.isEnded || res === undefined){\r\n                    self.showOver = false;\r\n                    self.cishu = 0;\r\n                    self.gameOver = false;\r\n                    self.mask.active = false;\r\n                    self.overMenu.active = false;\r\n                    self.gameOverAnimation.active = false;\r\n                    for(let i = 0;i < 5;i++){\r\n                        for(let j = 0;j < 6;j++){\r\n                            self.map[i][j] = 0;\r\n                            if(self.backGroundArr[i][j].getComponent(\"Back\").innerNode !== null){\r\n                                //很重要坑很大\r\n                                self.backGroundArr[i][j].getComponent(\"Back\").innerNode.destroy();\r\n                                self.backGroundArr[i][j].getComponent(\"Back\").innerNode = null;\r\n                                self.backGroundArr[i][j].getComponent(\"Back\").type = -1;\r\n                            }\r\n                        }\r\n                    }\r\n                }else{\r\n                    //视频没有观看完成不能复活\r\n                }\r\n            });\r\n        }\r\n    },\r\n    directBack : function(){\r\n        //加载单人选择界面\r\n        cc.director.loadScene(\"OneChoose\");\r\n    },\r\n    update (dt) {\r\n        if(Global.advertisement !== null){\r\n            //隐藏广告\r\n            Global.advertisement.hide();\r\n        }\r\n        if(!this.showNoticeHelp){\r\n            if(this.onSlide || this.onGameSlide){\r\n                if(this.onSlide){\r\n                    var column = this.getTouchLine(this.slideButton,this.slidePosition);\r\n                    this.onSlide = false;\r\n                }else{\r\n                    var column = this.getTouchLine(this.gameSlide,this.gameSlidePosition);\r\n                    this.onGameSlide = false;\r\n                }\r\n                //如果当前列比节点数组中最大列还大的话就右移\r\n                if(column > this.getNodeArrMaxCol()){\r\n                    //右移\r\n                    this.moveRight();\r\n                }else if(column < this.getNodeArrMinCol()){\r\n                    //左移\r\n                    this.moveLeft();\r\n                }\r\n            }\r\n            switch(this.status){\r\n                case statuMachine.STATE_BEGIN:\r\n                 cc.log(\"开始游戏\");\r\n                 break;\r\n                case statuMachine.STATE_PLAY:\r\n                 cc.log(\"游戏中\");  \r\n            }\r\n            //如果游戏结束了就不在进行下落\r\n            if(!this.gameOver){\r\n                this.invalidRemoveTime += dt;\r\n                //告诉服务器不要断开连接\r\n                if(this.invalidRemoveTime >= 60){\r\n                    console.log(\"发送给服务器消息防止自己不被踢出\");\r\n                    var url = 'https://m5.ykplay.com/KeepLink';\r\n                    var xhr = new XMLHttpRequest();\r\n                    xhr.onreadystatechange = function () {\r\n                        if (xhr.readyState == 4 && (xhr.status >= 200 && xhr.status < 400)) {\r\n                            var response = xhr.responseText;\r\n                            console.log(response);\r\n                        }\r\n                    };\r\n                    xhr.open(\"GET\", url, true);\r\n                    xhr.send();\r\n                    //发送长连接请求\r\n                    if(cc.sys.isNative || (CC_WECHATGAME)){\r\n                        var sendData = {\r\n                            tag1 : 0,\r\n                            score : \"\",\r\n                            type : \"4\"\r\n                        }\r\n                        // var dataString = JSON.stringify(sendData);\r\n                        // console.log(\"dataString is \",dataString);\r\n                        cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(sendData);\r\n                    }\r\n                    this.invalidRemoveTime = 0;\r\n                }\r\n                this.san += dt;\r\n                this.time += dt;\r\n                if(this.cishu === 0 && this.xltime < this.normalSpeed){\r\n                    this.xltime = this.normalSpeed;\r\n                }\r\n                if(this.totalTime === 15){\r\n                    if(this.totalRemoveTime < 91){\r\n                        //提升下落速度\r\n                        this.normalSpeed -= 0.1;\r\n                    }\r\n                    this.totalTime = 0;\r\n                }\r\n                if(this.time > this.xltime){\r\n                    if(this.cishu < 2){\r\n                        //这种情况不让它旋转\r\n                        if(this.cishu === 0){\r\n                            if(this.map[0][this.nodeArr[1].getComponent(\"Figure\").col] === 1){\r\n                                this.gameOver = true;\r\n                            }else{\r\n                                this.nodeArr[1].active = true;\r\n                            }\r\n                        }else if(this.cishu === 1){\r\n                            if(this.map[1][this.nodeArr[1].getComponent(\"Figure\").col] != 1){\r\n                                this.nodeArr[1].y = this.backGroundArr[1][this.nodeArr[1].getComponent(\"Figure\").col].y;\r\n                                this.nodeArr[1].getComponent(\"Figure\").row = 1;\r\n                                this.nodeArr[0].active = true;\r\n                                this.nodeArr[0].y = this.backGroundArr[0][this.nodeArr[0].getComponent(\"Figure\").col].y;\r\n                                this.nodeArr[0].getComponent(\"Figure\").row = 0;\r\n                            }else{\r\n                                this.gameOver = true;\r\n                            }\r\n                        }\r\n                        this.cishu++;\r\n                        //表示节点数组已经生成完毕可以进行旋转操作\r\n                        if(this.cishu === 2){\r\n                            this.isCreateOver = true;\r\n                        }\r\n                    }else{\r\n                        \r\n                        this.updatePrefatY(this.nodeArr);\r\n                    }\r\n                    this.time = 0;\r\n                    \r\n                }\r\n            }else {\r\n                if(!this.showOver){\r\n                    //显示banner广告\r\n                    cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").showAdvice(\"adunit-f874b1440d977650\");\r\n                    //其他下降，旋转按钮，左右移动按钮处于不可激活状态\r\n                    this.downButton.interactable = false;\r\n                    this.rotateButton.interactable = false;\r\n                    // this.slideButton.interactable = false;\r\n                    this.gameOverAnimation.active = true;\r\n                    var animation = this.gameOverAnimation.getComponent(cc.Animation);\r\n                    this.playAudio(this.loseAudio);\r\n                    animation.play(\"Over_light\"); \r\n                    this.overMenu.active = true;\r\n                    this.mask.active = true;\r\n                    //显示分数\r\n                    this.overMenu.getChildByName(\"scoreValue\").getComponent(cc.Label).string = this.score;\r\n                    //显示等级\r\n                    this.overCost += dt;\r\n                    if(cc.sys.localStorage.getItem('maxScoreFigure') === null){\r\n                        //设置值\r\n                        cc.sys.localStorage.setItem('maxScoreFigure',this.score.toString());\r\n                    }else{\r\n                        let currentBestScore = cc.sys.localStorage.getItem('maxScoreFigure');\r\n                        // console.log(\"最高分是：\",cc.sys.localStorage.getItem('maxScoreFigure'),typeof(cc.sys.localStorage.getItem('maxScoreFigure')));\r\n                        // console.log(\"this.score > cc.sys.localStorage?\",this.score > cc.sys.localStorage.getItem('maxScoreFigure'));\r\n                        if(typeof(currentBestScore) === \"string\"){\r\n                            currentBestScore = Number(currentBestScore);\r\n                        }\r\n                        if(this.score > currentBestScore){\r\n                            console.log(\"即将保存到微信平台。。。\");\r\n                            //设置值\r\n                            cc.sys.localStorage.setItem('maxScoreFigure',this.score.toString());\r\n                            //将最高分数保存起来\r\n                            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").figureTopScore = this.score.toString();\r\n                            // let username = cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser;\r\n                            //将最高分上传到微信托管平台\r\n                            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").postMessage(\"SaveScore\",\"figureRankScore\",this.score.toString());\r\n                        }\r\n                        console.log(\"画像方块的最高分是: \",cc.sys.localStorage.getItem('maxScoreFigure'));\r\n                    }\r\n                    //显示过结束页面\r\n                    this.showOver = true;\r\n                }\r\n                // if(this.overCost > 4){\r\n                //     cc.director.loadScene(\"OneChoose\");\r\n                //     this.overCost = 0;\r\n                // }\r\n            }\r\n        }\r\n    },\r\n    //更新预制体节点的y坐标\r\n    updatePrefatY : function(nodeArr){\r\n                var self = this;\r\n                //如果允许下落的话条的y坐标向下移动\r\n                if(this.CheckIsDown(nodeArr)){\r\n                        //下落节点数组,如果是横向的话分开这连个节点\r\n                        this.down(nodeArr);\r\n                }else{\r\n                    //改变地图信息\r\n                    this.changeMap(this.nodeArr);\r\n\r\n                    var removeTime = 0;\r\n                    function next(){\r\n                        //生成下一个形状\r\n                        self.nodeArr = self.nextBlock;\r\n                        //生成下一个形状\r\n                        self.createNext();\r\n                    }\r\n                    (function(n){\r\n                        (function(){\r\n                            //查看这个节点数组中是否可以消除如果满足条件进行消除\r\n                            self.checkNodeArr(self.nodeArr,removeTime);\r\n                        })();\r\n                        n();\r\n                    })(next);\r\n                    \r\n                    \r\n                }\r\n    },\r\n    //检查一个节点数组是否满足消除条件\r\n    checkNodeArr : function(nodeArr,removeTime){\r\n        if(nodeArr.length > 0){\r\n            //临时数组存放待消节点\r\n            var waitQueue = [];\r\n            if(this.canRemove(nodeArr,waitQueue).isRemove){\r\n                //如果是可以消除的话进行消除这时候待消队列已经填满了节点\r\n                // this.remove(this.nodeArr);\r\n                //检测完这两个下落的方块的待消队列\r\n                for(let j = 0;j<waitQueue.length;j++){\r\n                    //如果该节点已经删除的话不对它操作\r\n                    if(waitQueue[j] === null){\r\n                        //将它从该数组删除\r\n                        waitQueue.splice(j,1);\r\n                    }\r\n                    //将这些待消除的标记为可消除的\r\n                    waitQueue[j].getComponent(\"Figure\").isRemove = true;\r\n                    \r\n                }\r\n                this.tempNodes = waitQueue;\r\n                //加分\r\n                this.addScore(waitQueue.length);\r\n                //该消除的消除该下落的下落\r\n                this.remove(waitQueue,removeTime);\r\n            }\r\n        }\r\n        \r\n    },\r\n    //改变地图信息\r\n    changeMap : function(nodeArr){\r\n        if(nodeArr.length > 0){\r\n            for(let k = 0;k<nodeArr.length;k++){\r\n                //将所有的坐标变成只保留两位小数的数字\r\n                nodeArr[k].x = Number(nodeArr[k].x.toFixed(2));\r\n                nodeArr[k].y = Number(nodeArr[k].y.toFixed(2));\r\n            }\r\n            for(let i = 0;i<nodeArr.length;i++){\r\n                //当前停止的节点对应的地图位置\r\n                var row = nodeArr[i].getComponent(\"Figure\").row;\r\n                var col = nodeArr[i].getComponent(\"Figure\").col;\r\n                //如果有块在停止的时候更新了地图就不在这里更新地图信息了\r\n                if(!nodeArr[i].getComponent(\"Figure\").hasDown){\r\n                    this.map[row][col] = 1;\r\n                    //将背景方格的属性状态改为该节点数组对应的类型\r\n                    this.backGroundArr[row][col].getComponent(\"Back\").type = nodeArr[i].getComponent(\"Figure\").type;\r\n                    this.backGroundArr[row][col].getComponent(\"Back\").innerNode = nodeArr[i];\r\n                }else{\r\n                    //将该节点的移动状态改为初始值\r\n                    nodeArr[i].getComponent(\"Figure\").hasDown = false;\r\n                }\r\n                \r\n            }\r\n                \r\n        }\r\n    },\r\n    //检查该节点数组是否可以消除\r\n    /**\r\n     * @param  {待检测的节点数组} nodeArr\r\n     * @param  {待消队列} waitQueue\r\n     * @return {JSON}    result\r\n     */\r\n    canRemove : function(nodeArr,waitQueue){\r\n        var result = {\r\n            isRemove : false,\r\n            queue    : null,\r\n        }\r\n        for(let m = 0;m < nodeArr.length;m++){\r\n            var tempArr = [];\r\n            var cRow = nodeArr[m].getComponent(\"Figure\").row;\r\n            var cCol = nodeArr[m].getComponent(\"Figure\").col;\r\n            var cType = nodeArr[m].getComponent(\"Figure\").type;\r\n            this.find(nodeArr[m],cRow,cCol,cType,tempArr);\r\n            if(tempArr.length >= 3){\r\n                for(let k = 0;k < tempArr.length;k++){\r\n                    var nodeType = tempArr[k].getComponent(\"Figure\").type;\r\n                    //画像方块的类型在0-3之间才允许加进去\r\n                    if(!waitQueue.contain(tempArr[k]) && (nodeType < 4 && nodeType >= 0)){\r\n                        //如果数组里面有这个节点的信息了说明已经加到数组里面了不用再重复加入了\r\n                        waitQueue.push(tempArr[k]);\r\n                    }else{\r\n                        cc.log(\"该类型不在加入的条件\");\r\n                    }\r\n                    \r\n                }\r\n            }\r\n        }\r\n        //递归的方式把待消队列找出来\r\n        if(waitQueue.length >= 3){\r\n            result.isRemove = true;\r\n            result.queue = waitQueue;\r\n        }else{\r\n            result.isRemove = false;\r\n            result.queue = [];\r\n        }\r\n        return result;\r\n\r\n    },\r\n    /**\r\n     * 依据带消除队列里的长度进行计算分数\r\n     * @param  {待消除队列的长度} waitQueueLength\r\n     */\r\n    addScore : function(waitQueueLength){\r\n        var scoreLabel = this.scoreLabel.getComponent(cc.Label);\r\n        switch(waitQueueLength){\r\n            case 3:\r\n                this.score += 30;\r\n                break;\r\n            case 4:\r\n                this.score += 40;\r\n                break;\r\n            case 5:\r\n                this.score += 50;\r\n                break;\r\n            case 6:\r\n                this.score += 60;\r\n                break;\r\n            case 7:\r\n                this.score += 70;\r\n                break;\r\n            case 8:\r\n                this.score += 80;\r\n                break;\r\n            case 9:\r\n                this.score += 90;\r\n                break;                        \r\n        }\r\n        //显示分数\r\n        scoreLabel.string = this.score;\r\n    },\r\n    //消除操作，先播放消除动画删除相应节点，上面的节点依次下落\r\n    /**\r\n     * @param  {待消除队列} waitQueue\r\n     * @param  {消除次数} removeTime\r\n     */\r\n    remove : function(waitQueue,removeTime){\r\n        //播放消除音效\r\n        this.playAudio(this.removeAudio);\r\n        //先不删除这些节点等找到所有这些待消节点上方的节点之后删除他们\r\n        //找到这几个待消节点上面的所有节点让他们自动执行下落动作（节点所挂的消除下落方法）\r\n        var scoreLabel = this.scoreLabel.getComponent(cc.Label);\r\n        removeTime++;\r\n        this.totalRemoveTime++;\r\n        this.totalTime++;\r\n        if(removeTime >= 2){\r\n            if(removeTime === 2){\r\n                //产生一次连击\r\n                this.score += 10;\r\n            }else if(removeTime === 3){\r\n                //产生两次连击\r\n                this.score += 20;\r\n            }else if(removeTime === 4){\r\n                //产生3次连击\r\n                this.score += 30;\r\n            }else if(removeTime === 5){\r\n                //产生4次连击\r\n                this.score += 40;\r\n            }\r\n            scoreLabel.string = this.score;\r\n        }\r\n        var waitDownArr = [];\r\n        for(let m = 0;m<waitQueue.length;m++){\r\n            var cRow = waitQueue[m].getComponent(\"Figure\").row;\r\n            var cCol = waitQueue[m].getComponent(\"Figure\").col;\r\n            this.upFindNodes(cRow,cCol,waitDownArr);\r\n        }\r\n        cc.log(\"待下落节点数组为：\" + waitDownArr);\r\n        //得到激活之后的节点\r\n        var activeNode = this.deleteNodeFromParent(waitQueue);\r\n        \r\n        // if(!waitDownArr.contain(activeNode))\r\n        //     waitDownArr.push(activeNode);\r\n        //下落其他节点\r\n        for(let j = 0;j<waitDownArr.length;j++){\r\n             waitDownArr[j].getComponent(\"Figure\").afterRemoveDown(this.map,this.backGroundArr,false);\r\n        }\r\n        if(activeNode.length > 0){\r\n            for(let i = 0;i<activeNode.length;i++){\r\n                if(!waitDownArr.contain(activeNode[i])){\r\n                    //将该激活节点加入到下降节点队列里检测是否可以再次消除\r\n                    waitDownArr.push(activeNode[i]);\r\n                }\r\n            }\r\n        }\r\n        //检测下降的节点数组看看是否可以再次消除\r\n        //0.5秒后检测下落的节点数组，为了防止下落块还没有执行action完又来了个action这样moveTo方法会出现错误\r\n        //连消检测\r\n        this.scheduleOnce(function(){\r\n            this.checkNodeArr(waitDownArr,removeTime);\r\n        },0.3);\r\n        \r\n    },\r\n    /**\r\n     * @param  {待消除队列} waitQueue\r\n     */\r\n    deleteNodeFromParent : function(waitQueue){\r\n        var activeNodeArr = [];\r\n        for(let i = 0;i<waitQueue.length;i++){\r\n            var row = waitQueue[i].getComponent(\"Figure\").row;\r\n            var col = waitQueue[i].getComponent(\"Figure\").col;\r\n            // var upNodes = this.upFindNodes(row,col);\r\n            //检查待消除方格的周围有没有封印的方格小块\r\n            this.checkHasSealBlock(row,col,activeNodeArr);\r\n            //恢复地图信息\r\n            this.map[row][col] = 0;\r\n            //恢复背景方格的原始属性\r\n            this.backGroundArr[row][col].getComponent(\"Back\").type = -1;\r\n            this.backGroundArr[row][col].getComponent(\"Back\").innerNode = null;\r\n            waitQueue[i].getComponent(\"Figure\").shine();\r\n            \r\n        }\r\n        //返回激活队列\r\n        return activeNodeArr;\r\n        // if(activeNodeArr.length > 0){\r\n        //     //检查激活过的节点是否存在消除的可能\r\n        //     this.checkNodeArr(activeNodeArr);\r\n        // }\r\n    },\r\n    //查看一个节点周围有没有封印的画像方块\r\n    /**\r\n     * @param  {该节点所处的行} row\r\n     * @param  {该节点所处的列} col\r\n     * @param  {激活节点数组} activeNodeArr\r\n     */\r\n    checkHasSealBlock : function(row,col,activeNodeArr){\r\n        //四个方向的位置\r\n        var directionArr = [[row-1,col],[row+1,col],[row,col-1],[row,col+1]];\r\n        for(let m = 0;m<directionArr.length;m++){\r\n            var crow = directionArr[m][0];\r\n            var ccol = directionArr[m][1];\r\n            //如果行或者列超出了边界位置就继续下一个方向数组对应的行和列\r\n            if(crow > 11 || crow < 0 || ccol > 5 || ccol < 0){\r\n                continue;\r\n            }else{\r\n                var node = this.backGroundArr[crow][ccol].getComponent(\"Back\").innerNode;\r\n                if(node === null){\r\n                    continue;\r\n                }\r\n                //如果是待消除的方块的话就跳过该节点\r\n                if(node.getComponent(\"Figure\").isRemove === true){\r\n                    continue;\r\n                }\r\n                var nodeType = this.backGroundArr[crow][ccol].getComponent(\"Back\").type;\r\n                if(nodeType >= 4 && nodeType <= 7){\r\n                    // var nodeName = Number(node.name);\r\n                    //证明该行该列存在封印的画像动态加载图片\r\n                    cc.log(\"nodeType is \" + nodeType);\r\n                    var anim = node.getComponent(cc.Animation);\r\n                    //激活状态设置为true\r\n                    node.getComponent(\"Figure\").isActive = true;\r\n                    if(!activeNodeArr.contain(node)){\r\n                        //将该激活节点加入到激活队列里\r\n                        activeNodeArr.push(node);\r\n                    }\r\n                    if(nodeType === 4){\r\n                        for(let j = 0;j<node.childrenCount;j++){\r\n                            node.children[j].setPositionX(0);\r\n                            node.children[j].active = true;\r\n                        }\r\n                        anim.play(\"game_yellow_stone_unlock\");\r\n                        //改变背景方格的对应的状态类型\r\n                        this.backGroundArr[crow][ccol].getComponent(\"Back\").type = 0;\r\n                        //设置该节点的类型为0\r\n                        node.getComponent(\"Figure\").type = 0;\r\n                        node.name = \"7\";\r\n                    }else if(nodeType === 5){\r\n                        for(let j = 0;j<node.childrenCount;j++){\r\n                            node.children[j].setPositionX(0);\r\n                            node.children[j].active = true;\r\n                        }\r\n                        anim.play(\"game_yellow_stone_unlock\");\r\n                        this.backGroundArr[crow][ccol].getComponent(\"Back\").type = 1;\r\n                        node.getComponent(\"Figure\").type = 1;\r\n                        node.name = \"8\";\r\n                    }else if(nodeType === 6){\r\n                        for(let j = 0;j<node.childrenCount;j++){\r\n                            node.children[j].setPositionX(0);\r\n                            node.children[j].active = true;\r\n                        }\r\n                        anim.play(\"game_yellow_stone_unlock\");\r\n                        this.backGroundArr[crow][ccol].getComponent(\"Back\").type = 2;\r\n                        node.getComponent(\"Figure\").type = 2;\r\n                        node.name = \"9\";\r\n                    }else if(nodeType === 7){\r\n                        for(let j = 0;j<node.childrenCount;j++){\r\n                            node.children[j].setPositionX(0);\r\n                            node.children[j].active = true;\r\n                        }\r\n                        anim.play(\"game_yellow_stone_unlock\");\r\n                        this.backGroundArr[crow][ccol].getComponent(\"Back\").type = 3;\r\n                        node.getComponent(\"Figure\").type = 3;\r\n                        node.name = \"10\";\r\n                    }  \r\n                }\r\n            }\r\n        }\r\n\r\n    },\r\n    //动态修改图片的spriteFrame\r\n    /**\r\n     * @param  {节点的名字} nodeName\r\n     * @param  {待修改节点} node\r\n     */\r\n    dynamicLoad : function(nodeName,node){\r\n        nodeName = Number(nodeName);\r\n        function callback(err,spriteFrame){\r\n            if(err){\r\n                console.log(err);\r\n            }\r\n            node.getComponent(cc.Sprite).spriteFrame = spriteFrame;\r\n            //加载完之后修改精灵的名字\r\n            cc.log(\"设置\");\r\n        }\r\n        (function test(callback){\r\n            cc.loader.loadRes(\"Game4/\" + nodeName-4,cc.SpriteFrame,callback);\r\n        })(callback.bind(this));\r\n    },\r\n    \r\n    //向上找节点\r\n    upFindNodes : function(row,col,arr){\r\n        if(arguments.length === 2){\r\n            var tempArr = [];\r\n        }\r\n        while(row > 0){\r\n            row--;\r\n            var upNode = this.backGroundArr[row][col].getComponent(\"Back\").innerNode;\r\n            if(upNode != null){\r\n                if(upNode.getComponent(\"Figure\").isRemove === true){\r\n                    continue;\r\n                }else{\r\n                    if(arguments.length === 3){\r\n                        //将不是待消节点添加到数组中去\r\n                        if(!arr.contain(upNode)){    \r\n                            //如果该数组中还没有该节点的话就加进去\r\n                            arr.push(upNode);\r\n                        }\r\n                    }else{\r\n                        if(!tempArr.contain(upNode))\r\n                            tempArr.push(upNode);\r\n                    }\r\n                }\r\n            }else{\r\n                //如果upNode是空的话\r\n                break;\r\n            }\r\n        }\r\n        if(arguments.length === 2){\r\n            return tempArr;\r\n        }\r\n    },\r\n   //\r\n   /**\r\n    * 递归查找该节点上下左右四个方向是否有跟自己的类型相同的节点\r\n    * @param  {待检测节点} node\r\n    * @param  {待检测节点所在的行} row\r\n    * @param  {待检测节点所在的列} col\r\n    * @param  {待检测节点的类型} type\r\n    * @param  {待消除队列} arr\r\n    */\r\n   find : function(node,row,col,type,arr){\r\n       //定义上下左右四个方向数组\r\n       var round = [[row-1,col],[row+1,col],[row,col-1],[row,col+1]];\r\n       if(!arr.contain(node)){\r\n           //如果当前数组中不包含该节点就加入数组\r\n           arr.push(node);\r\n       }\r\n       for(let i =0;i < round.length;i++){\r\n           //如果计算的行或者列超出了边界继续下一个行列\r\n           if(round[i][0] < 0 || round[i][0] >11 || round[i][1] > 5 || round[i][1] < 0){\r\n               continue;\r\n           }\r\n           var checkType = this.backGroundArr[round[i][0]][round[i][1]].getComponent(\"Back\").type;\r\n           if(checkType === type && checkType < 4 && checkType >= 0){\r\n                var waitDeleteNode = this.backGroundArr[round[i][0]][round[i][1]].getComponent(\"Back\").innerNode;\r\n                if(!arr.contain(waitDeleteNode)){\r\n                    arr.push(waitDeleteNode);\r\n                    //递归寻找节点\r\n                    this.find(waitDeleteNode,round[i][0],round[i][1],type,arr);\r\n                }\r\n           }\r\n       }\r\n   },\r\n   //方块下落方法\r\n   down : function(nodeArr){\r\n        //位移3个方格\r\n        for(var i = nodeArr.length-1;i >= 0;i--){\r\n            var row = this.getRow(nodeArr[i]);\r\n            var col = this.getColumn(nodeArr[i]);\r\n            nodeArr[i].y = this.backGroundArr[row+1][col].y; \r\n            nodeArr[i].getComponent(\"Figure\").row = row+1;\r\n        }\r\n    },\r\n    //将这两个预制体的坐标数值保留两位小数\r\n    remainTwoNumber : function(nodeArr){\r\n        for(let k = 0;k<nodeArr.length;k++){\r\n            //将所有的坐标变成只保留两位小数的数字\r\n            nodeArr[k].x = Number(nodeArr[k].x.toFixed(2));\r\n            nodeArr[k].y = Number(nodeArr[k].y.toFixed(2));\r\n        }\r\n    },\r\n    //旋转方法\r\n    rotate : function(){\r\n        if(!this.gameOver){\r\n            //记录下旋转的位置\r\n            // this.unscheduleAllCallbacks();\r\n            if(this.isCreateOver){\r\n                this.playAudio(this.clickAudio);\r\n                this.rotateButton.children[0].opacity = 120;\r\n                var self = this;\r\n                //旋转中心\r\n                var x0 = this.nodeArr[1].x;\r\n                var y0 = this.nodeArr[1].y;\r\n                var x0Row = this.getRow(this.nodeArr[1]);\r\n                var x0Col = this.getColumn(this.nodeArr[1]);\r\n        \r\n                // var rotateArr = [[x0Row-1,x0Col],[x0Row,x0Col+1],[x0Row+1,x0Col],[x0Row,x0Col-1 ]];\r\n                //旋转0度对应的坐标\r\n                var x = this.nodeArr[0].x;\r\n                var y = this.nodeArr[0].y;\r\n                \r\n                //旋转45度对应的坐标\r\n                var rotate45X = (x-x0)*Math.cos(-Math.PI/4)-(y-y0)*Math.sin(-Math.PI/4) + x0;\r\n                var rotate45Y = (x-x0)*Math.sin(-Math.PI/4)+(y-y0)*Math.cos(-Math.PI/4) + y0;\r\n                //节点的旋转状态\r\n                var nodeAngle = this.nodeArr[0].getComponent(\"Figure\").angle;\r\n                var canAction = false;\r\n                if(nodeAngle === 0){\r\n                    //边界旋转\r\n                    if(x0Col === 5){\r\n                        //改变旋转中心进行旋转内部进行判断是否可以旋转\r\n                        this.changeRotateCenter(nodeAngle,x0Col);\r\n                    }else{\r\n                        if(this.checkIsRotate(x0Row,x0Col,nodeAngle)){\r\n                            //旋转90度对应的坐标位置\r\n                            var bezier = this.dealRotate(nodeAngle,x0Row,x0Col,rotate45X,rotate45Y,x,y,1);\r\n                            //能够旋转\r\n                            canAction = true;\r\n                        }\r\n                    }\r\n                    \r\n                }else if(nodeAngle === 1){\r\n                    if(this.checkIsRotate(x0Row,x0Col,nodeAngle)){\r\n                        var bezier = this.dealRotate(nodeAngle,x0Row,x0Col,rotate45X,rotate45Y,x,y,2);\r\n                        canAction = true;\r\n                    }\r\n                }else if(nodeAngle === 2){\r\n                    //边界旋转判断改为顺时针旋转（以#0块为旋转中心）\r\n                    if(x0Col === 0){\r\n                    this.changeRotateCenter(nodeAngle,x0Col);\r\n                    }else{\r\n                        if(this.checkIsRotate(x0Row,x0Col,nodeAngle)){\r\n                            var bezier = this.dealRotate(nodeAngle,x0Row,x0Col,rotate45X,rotate45Y,x,y,3);\r\n                            canAction = true;\r\n                        }\r\n                    }\r\n                }else if(nodeAngle === 3){\r\n                    if(this.checkIsRotate(x0Row,x0Col,nodeAngle)){\r\n                        //创建贝塞尔曲线所对应的最少坐标\r\n                        var bezier = this.dealRotate(nodeAngle,x0Row,x0Col,rotate45X,rotate45Y,x,y,0);\r\n                        canAction = true;\r\n                    }\r\n                }\r\n                if(canAction){\r\n                    (function test(cb){\r\n                        var bezierAction = cc.bezierTo(0.008,bezier);\r\n                        self.nodeArr[0].runAction(bezierAction);\r\n                        cb()\r\n                    })(pro);\r\n                    function pro() {\r\n                        cc.log(\"承诺正常执行########\");\r\n                        cc.log(\"@@@@@@@@@@\" + self.nodeArr[0].getComponent(\"Figure\").row);\r\n                        cc.log(\"@@@@@@@@@@\" + self.nodeArr[0].getComponent(\"Figure\").col);\r\n                    }\r\n                    cc.log(\"结束旋转动作!!!!!\");\r\n                }\r\n            }\r\n            this.scheduleOnce(function(){\r\n                this.rotateButton.children[0].opacity = 0;\r\n            },0.5);\r\n        }\r\n    },\r\n    //处理旋转\r\n    /**\r\n     * @param  {当前需要旋转的节点的角度代码属性} angle\r\n     * @param  {旋转中心所在的行} row\r\n     * @param  {选装中心所在的列} col\r\n     * @param  {旋转45度对应的x坐标} rotate45X\r\n     * @param  {旋转45度对应的y坐标} rotate45Y\r\n     * @param  {旋转之前的x坐标} x\r\n     * @param  {旋转之前对应的y坐标} y\r\n     * @param  {旋转之后该节点对应的角度属性代号} angleCode\r\n     */\r\n    dealRotate : function(angle,row,col,rotate45X,rotate45Y,x,y,angleCode){\r\n        if(angle === 0){\r\n            var rotate90X = this.backGroundArr[row][col+1].x;\r\n            var rotate90Y = this.backGroundArr[row][col+1].y;\r\n            this.nodeArr[0].getComponent(\"Figure\").row = row;\r\n            this.nodeArr[0].getComponent(\"Figure\").col = col+1;  \r\n        }else if(angle === 1){\r\n            var rotate90X = this.backGroundArr[row+1][col].x;\r\n            var rotate90Y = this.backGroundArr[row+1][col].y;  \r\n            this.nodeArr[0].getComponent(\"Figure\").row = row+1;\r\n            this.nodeArr[0].getComponent(\"Figure\").col = col;  \r\n        }else if(angle === 2){\r\n            var rotate90X = this.backGroundArr[row][col-1].x;\r\n            var rotate90Y = this.backGroundArr[row][col-1].y;\r\n            this.nodeArr[0].getComponent(\"Figure\").row = row;\r\n            this.nodeArr[0].getComponent(\"Figure\").col = col-1;   \r\n        }else if(angle === 3){\r\n            var rotate90X = this.backGroundArr[row-1][col].x;\r\n            var rotate90Y = this.backGroundArr[row-1][col].y;\r\n            this.nodeArr[0].getComponent(\"Figure\").row = row-1;\r\n            this.nodeArr[0].getComponent(\"Figure\").col = col;    \r\n        }\r\n         \r\n        //创建贝塞尔曲线所对应的最少坐标\r\n        var bezier = [cc.p(x,y),cc.p(rotate45X,rotate45Y),cc.p(rotate90X,rotate90Y)];\r\n        // //初始向量\r\n        // var startV = cc.v2(x,y).sub(cc.v2(x0,y0));\r\n        // var result = startV.rotate(Math.PI/2);\r\n        this.nodeArr[0].x = rotate90X;\r\n        this.nodeArr[0].y = rotate90Y;\r\n        //旋转之后变成相应的角度\r\n        this.nodeArr[0].getComponent(\"Figure\").angle = angleCode;\r\n        return bezier;\r\n    },\r\n    //变换旋转中心\r\n    changeRotateCenter : function(nodeAngle,col){\r\n        var canRotate = false;\r\n        var self = this;\r\n        var x00 = this.nodeArr[0].x;\r\n        var y00 = this.nodeArr[0].y;\r\n        var x00Row = this.getRow(this.nodeArr[0]);\r\n        var x00Col = this.getColumn(this.nodeArr[0]);\r\n\r\n        var xx = this.nodeArr[1].x;\r\n        var yy = this.nodeArr[1].y;\r\n\r\n        //旋转45度方向\r\n        var rotate45Xc = (xx-x00)*Math.cos(-Math.PI/4)-(yy-y00)*Math.sin(-Math.PI/4) + x00;\r\n        var rotate45Yc = (xx-x00)*Math.sin(-Math.PI/4)+(yy-y00)*Math.cos(-Math.PI/4) + y00;\r\n        if(nodeAngle === 0 && col === 5){\r\n            //检查是否可以旋转\r\n            if(this.checkIsRotateByRotateCenter(x00Row,x00Col,nodeAngle)){\r\n                var rotate90X = this.backGroundArr[x00Row][x00Col-1].x;\r\n                var rotate90Y = this.backGroundArr[x00Row][x00Col-1].y;\r\n                this.nodeArr[1].getComponent(\"Figure\").row = x00Row;\r\n                this.nodeArr[1].getComponent(\"Figure\").col = x00Col-1;   \r\n                canRotate = true;\r\n            }\r\n           \r\n        }else if(nodeAngle === 2 && col === 0){\r\n            if(this.checkIsRotateByRotateCenter(x00Row,x00Col,nodeAngle)){\r\n                var rotate90X = this.backGroundArr[x00Row][x00Col+1].x;\r\n                var rotate90Y = this.backGroundArr[x00Row][x00Col+1].y;   \r\n                this.nodeArr[1].getComponent(\"Figure\").row = x00Row;\r\n                this.nodeArr[1].getComponent(\"Figure\").col = x00Col+1;   \r\n                canRotate = true;\r\n            }\r\n            \r\n        }\r\n        //如果能旋转的话就进行执行贝塞尔曲线\r\n        if(canRotate){\r\n            //创建贝塞尔曲线所对应的最少坐标\r\n            var bezier = [cc.p(xx,yy),cc.p(rotate45Xc,rotate45Yc),cc.p(rotate90X,rotate90Y)];\r\n            // //初始向量\r\n            this.nodeArr[1].x = rotate90X;\r\n            this.nodeArr[1].y = rotate90Y;\r\n            //旋转之后变成270度\r\n            if(nodeAngle === 2 && col === 0){\r\n                this.nodeArr[0].getComponent(\"Figure\").angle = 3;\r\n            }else if(nodeAngle === 0 && col === 5){\r\n                this.nodeArr[0].getComponent(\"Figure\").angle = 1;\r\n            }\r\n            //执行贝塞尔曲线动作\r\n            (function test(cb){\r\n                \r\n                var bezierAction = cc.bezierTo(0.008,bezier);\r\n                self.nodeArr[1].runAction(bezierAction);\r\n                cb()\r\n            })(pro.bind(self));\r\n            function pro() {\r\n                cc.log(\"承诺正常执行########\");\r\n                cc.log(\"@@@@@@@@@@\" + self.nodeArr[0].getComponent(\"Figure\").row);\r\n                cc.log(\"@@@@@@@@@@\" + self.nodeArr[0].getComponent(\"Figure\").col);\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * 检查以0号数组元素为旋转中心检查是否可以旋转\r\n     * @param  {以零号数组节点所在的行} centerRow\r\n     * @param  {以零号数组节点所在的列} centerCol\r\n     * @param  {以零号数组节点所在的角度} angle\r\n     */\r\n    checkIsRotateByRotateCenter : function(centerRow,centerCol,angle){\r\n        if(angle === 2 && centerCol === 0){\r\n            if(this.map[centerRow-1][centerCol+1] != 1 && this.map[centerRow][centerCol+1] != 1){\r\n                return true;\r\n            }else{\r\n                return false;\r\n            }\r\n        }else if(angle === 0 && centerCol === 5){\r\n            if(this.map[centerRow+1][centerCol-1] != 1 && this.map[centerRow][centerCol-1] != 1){\r\n                return true;\r\n            }else{\r\n                return false;\r\n            }\r\n        }\r\n    },\r\n    //检查是否可以旋转\r\n    /**\r\n     * @param  {旋转中心节点所在的行} centerRow\r\n     * @param  {旋转中心节点所在的列} centerCol\r\n     * @param  {待旋转节点的角度属性} angle\r\n     */\r\n    checkIsRotate : function(centerRow,centerCol,angle){\r\n            //四个方向\r\n            //如果当前方向是0的话就看看一方向对应的背景方格的状态是什么\r\n            if(angle === 0){\r\n                //检查旋转中心节点的右边背景方格的状态是否为1和检查#0块右边对应的背景方格是否为1\r\n                if(this.map[centerRow-1][centerCol+1] != 1 && this.map[centerRow][centerCol+1] != 1){\r\n                    return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n            }else if(angle === 1){\r\n                if(this.map[centerRow+1][centerCol+1] != 1 && this.map[centerRow+1][centerCol] != 1){\r\n                    return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n            }else if(angle === 2){\r\n                if(this.map[centerRow+1][centerCol-1] != 1 && this.map[centerRow][centerCol-1] != 1){\r\n                    return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n            }else if(angle === 3){\r\n                if(this.map[centerRow-1][centerCol-1] != 1 && this.map[centerRow-1][centerCol] != 1){\r\n                    return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n            }\r\n    },\r\n     //左移方法\r\n     moveLeft    : function(){\r\n        if(!this.gameOver){\r\n            this.remainTwoNumber(this.nodeArr);\r\n            if(this.CheckIsLeft()){\r\n                for(var i = 0;i < this.nodeArr.length;i++){\r\n                    this.leftMove(this.nodeArr[i]);\r\n                    cc.log(this.getColumn(this.nodeArr[i]));\r\n                }\r\n            }\r\n        }\r\n    },\r\n    leftMove : function(node){\r\n        var row = this.getRow(node);\r\n        var col = this.getColumn(node);\r\n        //将当前背景节点的node改为null\r\n        // this.backGroundArr[row][col].node = null;\r\n        node.x = this.backGroundArr[row][col-1].x;\r\n        node.getComponent(\"Figure\").row = row;\r\n        node.getComponent(\"Figure\").col = col-1;\r\n    },\r\n   //右移方法\r\n   moveRight   : function(){\r\n       if(!this.gameOver){\r\n           this.remainTwoNumber(this.nodeArr);\r\n           if(this.CheckIsRight()){\r\n               for(var i = 0;i < this.nodeArr.length;i++){\r\n                   this.rightMove(this.nodeArr[i]);\r\n                }\r\n            } \r\n        }\r\n    },\r\n    rightMove : function(node){\r\n        var row = this.getRow(node);\r\n        var col = this.getColumn(node);\r\n        //将当前背景节点的node改为null\r\n        node.x = this.backGroundArr[row][col+1].x;\r\n        node.getComponent(\"Figure\").row = row;\r\n        node.getComponent(\"Figure\").col = col+1;\r\n    },\r\n    /**\r\n        检测是否可以向下移动\r\n        返回true或者false\r\n        @return true  : 可以下落\r\n        @return false : 不可以下落\r\n    **/\r\n    /**\r\n     * @param  {待检测的节点数组} nodeArr\r\n     */\r\n    CheckIsDown : function(nodeArr){\r\n        if(nodeArr.length != 0){\r\n            //将坐标值转换为小数点两位小数\r\n            this.remainTwoNumber(nodeArr);\r\n            //如果#0块的属性angle为零的时候，只判断#1块下面是否为1，为1不下落，为地面不下落\r\n            if(nodeArr[0].getComponent(\"Figure\").angle === 0){\r\n                return this.checkIsBottom(nodeArr[1],0);\r\n            }else if(nodeArr[0].getComponent(\"Figure\").angle === 1 || nodeArr[0].getComponent(\"Figure\").angle === 3){\r\n                //横条的形状的时候会出现有一个下落的情况\r\n                if(this.checkDown(nodeArr) && !(this.checkDown(nodeArr) instanceof cc.Node)){\r\n                    return true;\r\n                }else if(!this.checkDown(nodeArr) && !(this.checkDown(nodeArr) instanceof cc.Node)){\r\n                    return false;\r\n                }else if(this.checkDown(nodeArr) instanceof cc.Node){\r\n                    var targetNode = this.checkDown(nodeArr);\r\n                    //找出这个下面背景方格状态为0的节点\r\n                    var targetRow = this.findTheNodeDown(targetNode);\r\n                    var col = this.getColumn(targetNode);\r\n                    //单独下落这个节点\r\n                    targetNode.getComponent(\"Figure\").quickDown(targetRow,col,this.backGroundArr,this.map,false);\r\n                    return false;\r\n                }\r\n            }else if(nodeArr[0].getComponent(\"Figure\").angle === 2){\r\n                return this.checkIsBottom(nodeArr[0],2);\r\n            }\r\n        }\r\n    },\r\n    \r\n    /**\r\n     * @param  {需要向下搜索背景方格的状态的初始节点} node\r\n     */\r\n    findTheNodeDown : function(node){\r\n         //获得当前节点的行和列\r\n         var row = this.getRow(node);\r\n         var col = this.getColumn(node);\r\n         //向下寻找\r\n         while(row < 11){\r\n            row++;\r\n            if(this.map[row][col] === 1){\r\n                break;\r\n            }\r\n            if(row === 11){\r\n                break;\r\n            }\r\n         }\r\n         //最底下的背景方格的状态不为1\r\n         if(row === 11 && this.map[row][col] != 1){\r\n             return 11;\r\n         }else{\r\n            return row-1;\r\n         }\r\n         \r\n    },\r\n    //判断横条的情况\r\n    checkDown : function(nodeArr){\r\n        this.remainTwoNumber(nodeArr);\r\n        var count1 = 0;\r\n        var count0 = 0;\r\n        var nodeDownIsZero = [];\r\n        //如果是第11行就放回false\r\n        if(this.getRow(nodeArr[0]) === 11){\r\n            return false;\r\n        }\r\n        for(let m = 0;m < nodeArr.length;m++){\r\n            var row = this.getRow(nodeArr[m]);\r\n            var col = this.getColumn(nodeArr[m]);\r\n            if(this.map[row+1][col] === 1){\r\n                count1++;\r\n            }else if(this.map[row+1][col] ===0){\r\n                count0++;\r\n                nodeDownIsZero.push(nodeArr[m]);\r\n            }\r\n        }\r\n        if(count1 === 2){\r\n            //如果两个块的下面都为1的话不可以下落\r\n            return false;\r\n        }else if(count0 === 2){\r\n            //如果两个块的下面都为0的话是可以下落的\r\n            return true;\r\n        }else{\r\n            if(nodeDownIsZero.length > 0 && nodeDownIsZero.length === 1){\r\n                return nodeDownIsZero[0];\r\n            }\r\n        }\r\n        \r\n\r\n    },\r\n    // },\r\n    //判断是否触底或者是下面还有方块\r\n    /**\r\n     * @param  {待检测的节点} node\r\n     */\r\n    checkIsBottom : function(node,angle){\r\n        // if(angle === 0 || angle === 2){\r\n            var row = this.getRow(node);\r\n            var col = this.getColumn(node);\r\n            if(row != 11){\r\n                //下一行背景方格的状态是否为1\r\n                if(this.map[row + 1][col] === 1){\r\n                    //将对应的背景方格的状态改为1\r\n                    return false;\r\n                }else{\r\n                    return true;\r\n                }\r\n            }else{\r\n                return false;\r\n            }\r\n    },\r\n    /**\r\n       检测是否可以向左移动\r\n    **/\r\n   CheckIsLeft : function(){\r\n        //如果两个形状还没有完全落下来不能左移右移\r\n        if(this.nodeArr[0].y > this.nodeHeight/2){\r\n                return false;\r\n        }\r\n        this.remainTwoNumber(this.nodeArr);\r\n        var xArr = [];\r\n        var rowArr = [];\r\n        var colArr = [];\r\n        for(let i = 0;i< this.nodeArr.length;i++){\r\n            xArr.push(this.nodeArr[i].x);\r\n            rowArr.push(this.getRow(this.nodeArr[i]));\r\n            colArr.push(this.getColumn(this.nodeArr[i]));\r\n        }\r\n        var minX = Math.min.apply(Math,xArr);\r\n        cc.log(\"minX is \" + minX);\r\n        //找到最小列\r\n        var col = this.chooseColumnByLocation(minX);\r\n        if(xArr.length > 0){\r\n            if(xArr[0] === xArr[xArr.length-1]){\r\n                if(col === 0){\r\n                    return false;\r\n                }\r\n                //说明是同一列\r\n                //找出x坐标最小的左边看看它的坐标地图状态值是多少\r\n                if(this.map[rowArr[0]][col-1] === 0 && this.map[rowArr[1]][col-1] === 0){\r\n                    return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n\r\n            }else{\r\n                //同一行\r\n                if(this.map[rowArr[0]][col-1] === 0){\r\n                    return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    },\r\n    //检测是否可以向右移动\r\n    CheckIsRight : function(){\r\n          //如果两个形状还没有完全落下来不能左移右移\r\n        if(this.nodeArr[0].y > this.nodeHeight/2){\r\n            return false;\r\n        }\r\n        var xArr = [];\r\n        var rowArr = [];\r\n        var colArr = [];\r\n        this.remainTwoNumber(this.nodeArr);\r\n        for(let i = 0;i< this.nodeArr.length;i++){\r\n            xArr.push(this.nodeArr[i].x);\r\n            rowArr.push(this.getRow(this.nodeArr[i]));\r\n            colArr.push(this.getColumn(this.nodeArr[i]));\r\n        }\r\n        var maxX = Math.max.apply(Math,xArr);\r\n        cc.log(\"maxX is \" + maxX);\r\n        //找到最大列\r\n        var col = this.chooseColumnByLocation(maxX);\r\n        if(xArr.length > 0){\r\n            if(xArr[0] === xArr[xArr.length-1]){\r\n                if(col === 5){\r\n                    return false;\r\n                }\r\n                //说明是同一列\r\n                //找出x坐标最小的左边看看它的坐标地图状态值是多少\r\n                if(this.map[rowArr[0]][col+1] === 0 && this.map[rowArr[1]][col+1] === 0){\r\n                    return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n            }else{\r\n                //同一行\r\n                if(this.map[rowArr[0]][col+1] === 0){\r\n                    //如果最大行右边的背景方格的状态是0的话就可以移动\r\n                    return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    },\r\n    //暂停游戏\r\n    pause : function(){\r\n        if(!this.gameOver){\r\n            //暂停游戏\r\n            cc.director.pause();\r\n            console.log(\"game3 is \" + game3);\r\n            console.log(\"暂停游戏开始！！！！\");\r\n            this.mask.active = true;\r\n            this.pauseMenu.active = true;\r\n        }\r\n    },\r\n    //播放音效方法\r\n    playAudio : function(audioUrl){\r\n        this.currentAu = cc.audioEngine.play(audioUrl,false,1);\r\n    },\r\n    screenAdapt : function(){\r\n        //获得当前屏幕的宽度\r\n        let currentWidth = cc.director.getWinSize();\r\n        //获得屏幕的宽度\r\n        let winWidth = cc.view.getFrameSize();\r\n        console.log(\"视图宽度是\",winWidth);\r\n        console.log(\"屏幕的宽度是\",currentWidth);\r\n    },\r\n});\r\n","var Common = require(\"Common\");\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        //预制体数组\r\n        prefabArr : {\r\n            default : [],\r\n            type    : [cc.Prefab],\r\n        },\r\n        girdSize : 20,\r\n        backPrefab  : {\r\n            default : null,\r\n            type    : cc.Prefab,\r\n        },\r\n        scoreLabel : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        //下一个形状显示区域节点\r\n        nextShape   : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        //联网版的时候是对手信息\r\n        rivalInfoNode : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        //下落按钮\r\n        downButton  : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        //单机版的时候是下下个方格状态\r\n        next2 : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        //gameover标签\r\n        // gameBye : {\r\n        //     default : null,\r\n        //     type    : cc.Node,\r\n        // },\r\n        //滑动按钮\r\n        slideButton : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        rotateButton : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        //遮罩\r\n        mask : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        //暂停结束菜单\r\n        pauseMenu : {\r\n            default   : null,\r\n            type      : cc.Node,\r\n        },\r\n        pauseBack : cc.Node,\r\n        pauseContinue : cc.Node,\r\n        pauseRestart : cc.Node,\r\n        //游戏结束菜单\r\n        overMenu  : {\r\n            default : null,\r\n            type    : cc.Node,\r\n        },\r\n        gameSlide : cc.Node,\r\n        nickName : cc.Node,\r\n        icon     : cc.Node,\r\n        //按钮点击音效\r\n        clickAudio : {\r\n            url : cc.AudioClip,\r\n            default : null,\r\n        },\r\n        //消除音效\r\n        removeAudio : {\r\n            url : cc.AudioClip,\r\n            default : null,\r\n        },\r\n        //失败音效\r\n        loseAudio : {\r\n            url : cc.AudioClip,\r\n            default : null,\r\n        },\r\n        darkNode : cc.Node,\r\n        handNode : cc.Node,\r\n        noticePrefab : cc.Prefab,\r\n    },\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        if(Global.advertisement !== null){\r\n            //隐藏广告\r\n            Global.advertisement.hide();\r\n        }\r\n        this.showOver = false;\r\n        this.showNoticeHelp = true;\r\n        this.noticeBtn = this.setPrefabPosition(this.noticePrefab,0,0,this.node.parent.getChildByName(\"noticeDark\"));\r\n        this.noticeBtn.active = true;\r\n        this.invalidRemoveTime = 0;\r\n        this.normalSpeed = 0.7,\r\n        this.quickSpeed  = 0.07,\r\n        this.up = 10;\r\n        this.lr = 12;\r\n        console.log(\"noticeBtn is \",this.noticeBtn);\r\n        cc.log(\"当前游戏是否是处于暂停状态\"+cc.director.isPaused());\r\n        if(cc.director.isPaused()){\r\n            cc.director.resume();\r\n        }\r\n        if(cc.sys.isNative){\r\n            var userInfoScript = cc.find(\"PebmanentNode\").getComponent(\"UserInfo\");\r\n            // this.nickName.getComponent(cc.Label).string = userInfoScript.nameUser;\r\n            //显示用户信息\r\n            userInfoScript.showUsername(userInfoScript.nameUser,this.nickName);\r\n            userInfoScript.LoadUserPicture(userInfoScript.pictureUser,this.icon);\r\n        }\r\n        if(CC_WECHATGAME){\r\n            var userInfoScript = cc.find(\"PebmanentNode\").getComponent(\"UserInfo\");\r\n            //显示用户姓名\r\n            userInfoScript.showUsername(userInfoScript.nameUser,this.nickName);\r\n            userInfoScript.LoadUserPicture(userInfoScript.pictureUser,this.icon);\r\n        }\r\n        this.noticeBtn.on(\"touchstart\",function(){\r\n            this.darkNode.active = false;\r\n            this.handNode.active = false;\r\n            this.noticeBtn.active =false;\r\n            this.showNoticeHelp = false;\r\n        }.bind(this));\r\n        this.darkNode.on(\"touchstart\",function(){\r\n            this.darkNode.active = false;\r\n            this.handNode.active = false;\r\n            this.noticeBtn.active =false;\r\n            this.showNoticeHelp = false;\r\n        }.bind(this));\r\n        this.handNode.on(\"touchstart\",function(){\r\n            this.darkNode.active = false;\r\n            this.handNode.active = false;\r\n            this.noticeBtn.active =false;\r\n            this.showNoticeHelp = false;\r\n        }.bind(this));\r\n        // Menu.prototype.onLoad();\r\n        // if(Common.MOVEMODEL === 1){\r\n        //     this.slideButton.active = true;\r\n        //     this.leftAndRight.active = false;\r\n        // }else if(Common.MOVEMODEL === 2){\r\n        //     this.slideButton.active = false;\r\n        //     this.leftAndRight.active = true;\r\n        //     //为左右按钮添加点击事件\r\n        // }\r\n        //消除的总次数\r\n        this.totalRemoveTime = 0;\r\n        this.totalTime = 0;\r\n        //消除之后待下落数组的集合\r\n        this.nodeWidth = this.node.width;\r\n        this.nodeHeight = this.node.height;\r\n        cc.log(\"this.nodeWidth is \" + this.nodeWidth + \"this.nodeHeight is \" + this.nodeHeight);\r\n        //定义消除次数\r\n        this.eliminateCount = 0;\r\n        //定义得分\r\n        this.score = 0;\r\n        //背景二位数组\r\n        this.backGroundArr = null;\r\n        //形状集合二维数组,将每次生成的形状添加到二维数组里面\r\n        // this.shapeArr = [];\r\n        this.time = 0;\r\n        //创建背景网格\r\n        this.initMap(this.up,this.lr,this.backPrefab,12,6);\r\n        //存放每次生成的预制体数组即是活动的条\r\n        this.nodeArr = this.createShape(this.node);\r\n        //生成下一个形状\r\n        this.createNext();\r\n        // //显示下一个形状\r\n        // this.showNextShape(this.nextBlock);\r\n        //显示下下个形状\r\n        // this.showNextShape();\r\n        cc.log(\"this.nodeArr is \" + this.nodeArr);\r\n        // this.columnLocation();\r\n        //创建下一个旋转体\r\n        this.gameOver = false;\r\n        // this.nextShape = new Shape(this.nextShape,0,0);\r\n        // this.gameBye.active = false;\r\n        //当前条是否还可以改变状态\r\n        this.canChangeStatu = true;\r\n        //状态机的状态\r\n        this.iState = 0;\r\n        //定义一个状态标志\r\n        /**\r\n         * cover = 0 封面\r\n         * paly = 2; 游戏\r\n         * remove = 3;消除\r\n         * over = 4;结束游戏\r\n         * Menu 菜单\r\n         */\r\n        this.xltime = this.normalSpeed;\r\n        this.cishu = 0;\r\n        Array.prototype.contain = function(shape){\r\n            if(shape != undefined){\r\n                for(var i = 0;i<this.length;i++){\r\n                    if(this[i].x === shape.x && this[i].y === shape.y && this[i].getComponent(\"Stone\").type === shape.getComponent(\"Stone\").type){\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n        //下落按钮监听\r\n        this.downButton.on(\"touchstart\",function(){\r\n            this.playAudio(this.clickAudio);\r\n            this.downButton.children[0].opacity = 120;\r\n            this.xltime = this.quickSpeed;\r\n        }.bind(this));\r\n        this.downButton.on(\"touchend\",function(){\r\n            this.downButton.children[0].opacity = 0;\r\n            this.xltime = this.normalSpeed;\r\n        }.bind(this));\r\n        //注册监听事件\r\n        this.registerKeyBoard();\r\n        // var rotateAction = cc.rotateBy(3,360).easing(cc.easeCubicActionOut());\r\n        // var rf = cc.repeatForever(rotateAction);\r\n        // this.rotateButton.runAction(rf);\r\n        //游戏开始不显示遮罩\r\n        this.mask.active = false;\r\n        //开始时候暂停菜单不显示\r\n        this.pauseMenu.active = false;\r\n        //消除的次数\r\n        this.removeTime = 0;\r\n\r\n        //游戏结束菜单不显示\r\n        this.overMenu.active = false;\r\n        //游戏结束计时\r\n        this.overCost = 0;\r\n        //滑动按钮时间间隔，到达那个事件间隔计算第二次触摸所对应的列数\r\n        this.index = 0;\r\n        var self = this;\r\n        //触屏的当前列\r\n        this.nCol = 0;\r\n        this.rightDirection = false;\r\n        this.leftDirection = false;\r\n        this.slideStart = 0;\r\n        this.invokeRemoveTime = 0;\r\n        this.pauseBack.on(\"touchstart\",function(){\r\n            console.log(\"暂停页面退出\");\r\n            cc.director.resume();\r\n            cc.director.loadScene(\"OneChoose\");\r\n        }.bind(this));\r\n        this.pauseContinue.on(\"touchstart\",function(){\r\n            console.log(\"暂停页面继续\");\r\n            cc.director.resume();\r\n            self.mask.active = false;\r\n            self.pauseMenu.active = false;\r\n        }.bind(this));\r\n        this.pauseRestart.on(\"touchstart\",function(){\r\n            console.log(\"暂停页面重新开始\");\r\n            cc.director.resume();\r\n            self.mask.active = false;\r\n            self.pauseMenu.active = false;\r\n            cc.director.loadScene(\"Game3\");\r\n        }.bind(this));\r\n        // //资源引用\r\n        // let resLength = cc.textureCache.getAllTextures().length;\r\n        // for(let i = 0;i < resLength;i++){\r\n        //     console.log(\"in game3's textures is \",cc.textureCache.getAllTextures()[i].url);\r\n        // }\r\n    },\r\n    leftFunction : function(){\r\n        this.moveLeft();\r\n    },\r\n    rightFunction : function(){\r\n        this.moveRight();\r\n    },\r\n    playAudio : function(audioUrl){\r\n        cc.audioEngine.play(audioUrl,false,1);\r\n    },\r\n    //注册键盘监听\r\n    registerKeyBoard : function(){\r\n        //是否在滑动节点上\r\n        this.onSlide = false;\r\n        this.onGameSlide = false;\r\n        var self = this;\r\n        //注册键盘监听\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN,this.onKeyDown,this);\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP,this.onKeyUp,this);\r\n        //滑动按钮监听\r\n        this.slideButton.on(\"touchstart\",function(event){\r\n            this.slideButton.children[0].opacity = 120;\r\n            // this.onSlide = true;\r\n            //获得当前点击的全局坐标\r\n            // self.slidePosition = event.getLocation();\r\n            //获得开始触点的坐标\r\n            // this.slideStart = event.getLocation();\r\n            // cc.log(\"self.slidePositionX is \" + self.slidePosition.x);\r\n        }.bind(this));\r\n        //在滑动节点上移动的时候\r\n        this.slideButton.on(\"touchmove\",function(event){\r\n            // if(event.getLocation().x - self.slidePosition.x > 0){\r\n            //     this.rightDirection = true;\r\n            //     cc.log(\"------>>>>>>\");\r\n            // }else if(event.getLocation().x - self.slidePosition.x < 0){\r\n            //     this.leftDirection = true;\r\n            //     cc.log(\"<<<<<-------\");\r\n            // }\r\n            this.slideButton.children[0].opacity = 120;\r\n            this.onSlide = true;\r\n            self.slidePosition = event.getLocation();\r\n            cc.log(\"slidePositionX is \" + self.slidePosition.x);\r\n        }.bind(this));\r\n        //在滑动节点上离开的时候\r\n        this.slideButton.on(\"touchend\",function(event){\r\n            self.slidePosition = event.getLocation();\r\n            this.slideButton.children[0].opacity = 0;\r\n            this.onSlide = true;\r\n        }.bind(this));\r\n        //在滑动节点上离开的时候\r\n        this.slideButton.on(\"touchcancel\",function(event){\r\n            self.slidePosition = event.getLocation();\r\n            this.slideButton.children[0].opacity = 0;\r\n            this.onSlide = false;\r\n        }.bind(this));\r\n        // 滑动节点上方的空节点\r\n        this.gameSlide.on(\"touchstart\",function(event){\r\n            cc.log(\"点击了gameSlide节点\");\r\n        }.bind(this));\r\n        this.gameSlide.on(\"touchmove\",function(event){\r\n            this.onGameSlide = true;\r\n            self.gameSlidePosition = event.getLocation();\r\n        }.bind(this));\r\n        this.gameSlide.on(\"touchend\",function(event){\r\n            this.onGameSlide = true;\r\n            self.gameSlidePosition = event.getLocation();\r\n        }.bind(this));\r\n        this.gameSlide.on(\"touchcancel\",function(event){\r\n            this.onGameSlide = false;\r\n            self.gameSlidePosition = event.getLocation();\r\n        }.bind(this));\r\n    },\r\n    //返回触点对应的列数\r\n    /**\r\n     * @param  {触摸的是哪个节点} buttonNode\r\n     * @param  {世界节点坐标系} worldPosition\r\n     */\r\n    getTouchLine : function(buttonNode,worldPosition){\r\n        //将触点的x坐标转化为本地坐标系\r\n        var localX = buttonNode.convertToNodeSpaceAR(cc.v2(worldPosition.x,worldPosition.y)).x;\r\n        cc.log(\"local is \" + localX);\r\n        if(localX > 0){\r\n             var n1 = Math.floor(localX/(buttonNode.width/6));\r\n             if(n1 >= 0 && n1 < 1){\r\n                this.nCol = 3;\r\n             }else if(n1 >= 1 && n1 < 2){\r\n                 this.nCol = 4;\r\n             }else if(n1 >= 2 && n1 < 3){\r\n                 this.nCol = 5;\r\n             }\r\n        }else if(localX < 0){\r\n            var n2 = Math.floor(-localX/(buttonNode.width/6));\r\n            if(n2 >= 0 && n2 < 1){\r\n               this.nCol = 2;\r\n           }else if(n2 >= 1 && n2 < 2){\r\n               this.nCol = 1;\r\n           }else if(n2 >= 2 && n2 < 3){\r\n               this.nCol = 0;\r\n           }\r\n        }\r\n        if(this.nCol >= 5){\r\n            this.nCol = 5;\r\n        }\r\n        return this.nCol;\r\n   },\r\n    onKeyDown : function(event){\r\n        switch(event.keyCode){\r\n            case cc.KEY.down:\r\n                this.xltime = this.quickSpeed;\r\n                 break;\r\n            case cc.KEY.left:\r\n                 this.moveLeft();\r\n                 cc.log(\"<-----\");\r\n                 break;\r\n            case cc.KEY.right:\r\n                 this.moveRight();\r\n                 cc.log(\"----->\");\r\n                 break;  \r\n            case cc.KEY.f:\r\n                 this.rotate();\r\n                 //旋转操作\r\n                 break;                  \r\n        }\r\n    },\r\n    onKeyUp   : function(event){\r\n        switch(event.keyCode){\r\n            case cc.KEY.down:\r\n                this.xltime = this.normalSpeed;\r\n                 break;\r\n            case cc.KEY.left:\r\n                 break;\r\n            case cc.KEY.right:\r\n                 break;  \r\n            case cc.KEY.f:\r\n                 //旋转操作\r\n                 break;                 \r\n        }\r\n    },\r\n    onDestroy () {\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\r\n        // cc.loader.setAutoReleaseRecursively(\"res/raw-assets/Textures/Common1.png\",false);\r\n        // cc.loader.setAutoReleaseRecursively(\"res/raw-assets/Textures/Common2.png\",false);\r\n        // //不释放预制体资源\r\n        // cc.loader.setAutoReleaseRecursively(\"8e63b147-d2bd-4b08-b49f-3edb00ce450f\",false);\r\n    },\r\n    //产生随机数\r\n    createRandom : function(min,max){\r\n         return Math.floor(Math.random()*(max - min) + min);\r\n    },\r\n    //初始化游戏场景主背景12行6列的网格\r\n    /**\r\n     * @param  {外框上边缘的厚度} up\r\n     * @param  {外框左右边缘的厚度} lr\r\n     * @param  {背景网格的预制体} back\r\n     * @param  {行数} row\r\n     * @param  {列数} col\r\n     */\r\n    initMap : function(up,lr,back,row,col){\r\n        //初始化y坐标\r\n        var y = this.nodeHeight/2 - this.girdSize/2 - up;\r\n        //初始化x坐标\r\n        var x = -this.nodeWidth/2 + this.girdSize/2 + lr;\r\n        cc.log(\"x is \" + x);\r\n        this.backGroundArr = [];\r\n        this.map = [];\r\n        //12行6列的网格\r\n        for(var i = 0;i < row; i++){\r\n            //设置它的y坐标\r\n            var tempY =y - i * this.girdSize;\r\n            cc.log(\"tempY is \" + tempY);\r\n            this.backGroundArr[i] = [];\r\n            this.map[i] = [];\r\n            for(var j = 0; j < col;j++){\r\n                var outArr = this.backGroundArr[i];\r\n                var mapData = this.map[i];\r\n                var tempX = x + j * this.girdSize;\r\n                cc.log(\"tempX is \" + tempX);\r\n                //y坐标不变，x坐标要变\r\n                var tempPrefab = this.setPrefabPosition(back,tempX,tempY,this.node,null);\r\n                // var shape = new Shape(tempPrefab,-1);\r\n                tempPrefab.getComponent(\"Back\").type = -1;\r\n                tempPrefab.getComponent(\"Back\").innerNode = null;\r\n                // var shape = new Shape(tempPrefab,-1);\r\n                outArr[j]=tempPrefab;\r\n                mapData[j] = 0;\r\n            }\r\n        }\r\n        cc.log(\"backGroundArr is \" +this.backGroundArr);\r\n    },\r\n    /**\r\n    @param prefab:将要生成预制节点的预制体\r\n    @param x     :将要生成预制节点的x坐标\r\n    @param y     :将要生成预制节点的y坐标\r\n    @param parentNode : 生成的预制节点的父节点\r\n    @param trimSizeJson : 裁减预制体的json对象\r\n     */\r\n    setPrefabPosition : function(prefab,x,y,parentNode,trimSizeJson){\r\n           var prefab = this.createPrefab(prefab);\r\n           if(trimSizeJson != null){\r\n               prefab.width = trimSizeJson.width;\r\n               prefab.height = trimSizeJson.height;\r\n           }\r\n           prefab.setPosition(x,y);\r\n           parentNode.addChild(prefab);\r\n           return prefab;\r\n    },\r\n    createPrefab : function(prefab){\r\n        var prefabNode = cc.instantiate(prefab);\r\n        return prefabNode;\r\n    },\r\n    //生成形状每一个节点设置为都为0行随机列\r\n    createShape : function(parentNode){\r\n        //该节点数组消除次数容易计分\r\n        // this.removeTime = 0;\r\n        this.cishu = 0;\r\n        //动态生成一个新的节点将生成的预制体节点加入到该父节点上\r\n        // var newNode = new cc.Node();\r\n        // parentNode.addChild(newNode);\r\n        //用来存放预制体的数组\r\n        var randomCol = this.createRandom(2,4);\r\n        var prefabArrTemp = [];\r\n        //盛放颜色代码的数组每次重新生成预制体节点的时候将之前的颜色代码数组置空\r\n        this.boxColorArr = [];\r\n        for(var i = 0;i < 3;i++){\r\n            // var offSet = i * this.girdSize;\r\n            // cc.log(\"offSet is \" + offSet);\r\n            // //产生0-3的随机数\r\n            var index = this.createRandom(0,4);\r\n\r\n            // //将对应的颜色索引存放到该数组中\r\n            // // this.boxColorArr.push(this.prefabArr[index].color);\r\n            // cc.log(\"index is \" + index);\r\n            // //将对应的预制体取出来转化为节点然后显示\r\n            var prefabNode = this.createPrefab(this.prefabArr[index]);\r\n            var self = this;\r\n            //设置预制节点的位置\r\n            prefabNode.setPosition(self.backGroundArr[0][randomCol].x,self.backGroundArr[0][randomCol].y);\r\n            \r\n            prefabNode.getComponent(\"Stone\").type = index;\r\n            prefabNode.getComponent(\"Stone\").row = 0;\r\n            prefabNode.getComponent(\"Stone\").col = randomCol;\r\n            prefabNode.active = false;\r\n\r\n            // this.backGroundArr[i][randomCol].innerNode = prefabNode;\r\n            cc.log(\"------type is \" + prefabNode.getComponent(\"Stone\").type);\r\n            //将该预制节点添加为parentNode的孩子\r\n            parentNode.addChild(prefabNode);\r\n            // var shape = new Shape(prefabNode,index);\r\n            //将当前预制体节点存放到预制体临时数组里面\r\n            prefabArrTemp.push(prefabNode);\r\n        }\r\n        console.log(prefabArrTemp);\r\n        return prefabArrTemp;\r\n    },\r\n    //生成下一个形状\r\n    createNext : function(){\r\n        if(this.next2Block === undefined){\r\n            this.nextBlock = this.generateNext(this.node);\r\n            //显示下一个形状\r\n            this.showNextShape(this.nextBlock,this.nextShape,null);\r\n        }else{\r\n            this.nextBlock = this.next2Block;\r\n            this.showNextShape(this.nextBlock,this.nextShape,null);\r\n        }\r\n        //生成下下个形状\r\n        this.next2Block = this.generateNext(this.node);\r\n        var trimSizeJson = {\r\n            width      : 100,\r\n            height      : 100,\r\n        }\r\n        //显示下下个形状\r\n        this.showNextShape(this.next2Block,this.next2,trimSizeJson);\r\n    },\r\n    //显示下一个形状\r\n    /**\r\n     * @param  {下一个形状的数组} nextBlock\r\n     * @param  {父节点} parentNode\r\n     * @param  {是否修改预制体节点的大小} TrimSizeJson\r\n     */\r\n    showNextShape : function(nextBlock,parentNode,trimSizeJson){\r\n        //显示下一个形状之前删除这个节点的所有子节点\r\n        if(parentNode.childrenCount > 0){\r\n            for(let k = 0;k<parentNode.childrenCount;k++){\r\n                //销毁该子节点,如果销毁节点成功的话就显示下一个形状\r\n                parentNode.children[k].destroy();\r\n            }\r\n        }\r\n        //依次生成预制节点组成的节点数组\r\n        for(let i = 0;i<3;i++){\r\n            var type = nextBlock[i].getComponent(\"Stone\").type;\r\n            // if(trimSizeJson != null){\r\n            //     this.prefabArr[type].width = trimSizeJson.width;\r\n            //     this.prefabArr[type].height = trimSizeJson.height;\r\n            // }\r\n            // var spriteFrame = nextBlock[i].getComponent(\"cc.Sprite\").spriteFrame;\r\n            if(trimSizeJson === null){\r\n                this.setPrefabPosition(this.prefabArr[type],0,120-i*this.girdSize,parentNode,trimSizeJson);\r\n            }else{\r\n                this.setPrefabPosition(this.prefabArr[type],0,100-i*trimSizeJson.height,parentNode,trimSizeJson);\r\n            }\r\n            \r\n        }\r\n        // for(let k = 0;k<3;k++){\r\n        //     var pre = ;\r\n        //     this.setPrefabPosition(,50,50+k*this.girdSize,this.nextShape);\r\n        // }\r\n    },\r\n    getNodeArrMaxCol : function(){\r\n        var maxCol;\r\n        var colArr = [];\r\n        for(let i = 0;i<this.nodeArr.length;i++){\r\n            colArr.push(this.nodeArr[i].getComponent(\"Stone\").col);\r\n        }\r\n        maxCol = Math.max.apply(Math,colArr);\r\n        //返回最大列\r\n        return maxCol;\r\n    },\r\n    getNodeArrMinCol : function(){\r\n        var minCol;\r\n        var colArr = [];\r\n        for(let i = 0;i<this.nodeArr.length;i++){\r\n            colArr.push(this.nodeArr[i].getComponent(\"Stone\").col);\r\n        }\r\n        minCol = Math.min.apply(Math,colArr);\r\n        //返回最小列\r\n        return minCol;\r\n    },\r\n    shareButton : function(){\r\n        if(CC_WECHATGAME){\r\n            console.log(\"首页share\");\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").shareFriends();\r\n        }else if(cc.sys.isNative){\r\n            //原生平台分享\r\n            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nativeShare();\r\n        }\r\n    },\r\n    //看视频复活\r\n    relive : function(){\r\n        var self = this;\r\n        console.log(\"正在看视频\");\r\n        let videoIdArr = [\"adunit-3838817899a6fb0d\",\"adunit-4b3b25878ef47139\",\"adunit-821fcb6e0d0793d1\",\"adunit-1dc7d6d90f7f49bf\"];\r\n        let choosedId = Math.floor(Math.random(0,1)*4);\r\n        console.log(\"广告id是：\",choosedId);\r\n        if(CC_WECHATGAME){\r\n            let videoAd = wx.createRewardedVideoAd({\r\n                adUnitId: videoIdArr[choosedId]\r\n            })\r\n            videoAd.load()\r\n            .then(() => videoAd.show())\r\n            .catch(err => console.log(err.errMsg))\r\n            videoAd.onClose(res=>{\r\n                if(res && res.isEnded || res === undefined){\r\n                    //视频观看完毕可以复活了\r\n                    self.showOver = false;\r\n                    self.cishu = 0;\r\n                    self.gameOver = false;\r\n                    self.overMenu.active = false;\r\n                    self.mask.active = false;\r\n                    //清空六行的节点\r\n                    for(let i = 0;i < 5;i++){\r\n                        for(let j = 0;j < 6;j++){\r\n                            //清空背景网格的标志\r\n                            self.map[i][j] = 0;\r\n                            if(self.backGroundArr[i][j].getComponent(\"Back\").innerNode !== null){\r\n                                //很重要坑很大\r\n                                self.backGroundArr[i][j].getComponent(\"Back\").innerNode.destroy();\r\n                                self.backGroundArr[i][j].getComponent(\"Back\").innerNode = null;\r\n                                self.backGroundArr[i][j].getComponent(\"Back\").type = -1;\r\n                            }\r\n                        }\r\n                    }\r\n                    console.log(\"当前节点数组是：\",self.nodeArr);\r\n                    cc.director.resume();\r\n                }else{\r\n                    //视频没有观看完成不能复活\r\n                }\r\n            })\r\n        }\r\n        \r\n    },\r\n    directBack : function(){\r\n        cc.director.loadScene(\"OneChoose\");\r\n    },\r\n    // called every frame\r\n    update: function (dt) {\r\n        if(Global.advertisement !== null){\r\n            //隐藏广告\r\n            Global.advertisement.hide();\r\n        }\r\n        if(this.showNoticeHelp){\r\n            return;\r\n        }else{\r\n            if(this.onSlide || this.onGameSlide){\r\n                this.index += dt;\r\n                // cc.log(\"this.slidePosition is \" + this.slidePosition.x);\r\n                // if(this.index === dt){\r\n                //     this.column1 = this.getTouchLine(this.slidePosition);\r\n                // }\r\n                // if(this.index >= 0.3){\r\n                //     this.column2 = this.getTouchLine(this.slidePosition);\r\n                //     this.index = 0;\r\n                // }\r\n                if(this.onSlide){\r\n                    var column = this.getTouchLine(this.slideButton,this.slidePosition);\r\n                    //当用的是滑屏的时候将空节点的滑动状态改为false\r\n                    this.onSlide = false;\r\n                }else{\r\n                    var column = this.getTouchLine(this.gameSlide,this.gameSlidePosition);\r\n                    this.onGameSlide = false;\r\n                }\r\n                //如果当前列比节点数组中最大列还大的话就右移\r\n                if(column > this.getNodeArrMaxCol()){\r\n                    //右移\r\n                    this.moveRight();\r\n                }else if(column < this.getNodeArrMinCol()){\r\n                    //左移\r\n                    this.moveLeft();\r\n                }\r\n            }\r\n            switch(this.iState){\r\n                case Common.STATE_COVER:\r\n                    //执行封面\r\n                case Common.STATE_MENU:\r\n                    //菜单\r\n                case Common.STATE_PLAY:\r\n                    //游戏 --执行游戏代码\r\n                case Common.STATE_REMOVE:\r\n                   //消除 -- 执行消除代码\r\n                case Common.STATE_OVER:\r\n                  //游戏结束 -- 执行游戏结束代码\r\n            }\r\n            //如果游戏结束了就不在进行下落\r\n            if(!this.gameOver){\r\n                this.invalidRemoveTime += dt;\r\n                //告诉服务器不要断开连接\r\n                if(this.invalidRemoveTime >= 60){\r\n                    console.log(\"发送给服务器消息防止自己不被踢出\");\r\n                    var url = 'https://m5.ykplay.com/KeepLink';\r\n                    var xhr = new XMLHttpRequest();\r\n                    xhr.onreadystatechange = function () {\r\n                        if (xhr.readyState == 4 && (xhr.status >= 200 && xhr.status < 400)) {\r\n                            var response = xhr.responseText;\r\n                            console.log(response);\r\n                        }\r\n                    };\r\n                    xhr.open(\"GET\", url, true);\r\n                    xhr.send();\r\n                    //发送长连接请求\r\n                    if(cc.sys.isNative || (CC_WECHATGAME)){\r\n                        var sendData = {\r\n                            tag1 : 0,\r\n                            score : \"\",\r\n                            type : \"2\"\r\n                        }\r\n                        // var dataString = JSON.stringify(sendData);\r\n                        // console.log(\"dataString is \",dataString);\r\n                        cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(sendData);\r\n                    }\r\n                    this.invalidRemoveTime = 0;\r\n                }\r\n                this.time += dt;\r\n                if(this.cishu === 0 && this.xltime < this.normalSpeed){\r\n                    //如果重新生成一个形状的话就将下落的速度改为this.normalSpeed\r\n                    this.xltime = this.normalSpeed;\r\n                }\r\n                if(this.totalTime === 20){\r\n                    if(this.totalRemoveTime < 121){\r\n                        //将下落速度提升\r\n                        this.normalSpeed -= 0.1;\r\n                    }\r\n                    this.totalTime = 0;\r\n                }\r\n                if(this.time > this.xltime){\r\n                    if(this.cishu < 3){\r\n                        if(this.cishu === 0){\r\n                            if(this.map[0][this.nodeArr[2].getComponent(\"Stone\").col] != 1)\r\n                                this.nodeArr[2].active = true;\r\n                            else\r\n                                this.gameOver = true;    \r\n                        }else if(this.cishu === 1){\r\n                            if(this.map[1][this.nodeArr[1].getComponent(\"Stone\").col] != 1){\r\n                                this.nodeArr[2].y = this.backGroundArr[1][this.nodeArr[1].getComponent(\"Stone\").col].y;\r\n                                this.nodeArr[2].getComponent(\"Stone\").row = 1;\r\n                                this.nodeArr[1].active = true;\r\n                                this.nodeArr[1].y = this.backGroundArr[0][this.nodeArr[0].getComponent(\"Stone\").col].y;\r\n                                this.nodeArr[1].getComponent(\"Stone\").row = 0;\r\n                            }else{\r\n                                this.gameOver = true;\r\n                            }\r\n                        }else if(this.cishu === 2){\r\n                            if(this.map[2][this.nodeArr[1].getComponent(\"Stone\").col] != 1){\r\n                                this.nodeArr[2].y = this.backGroundArr[2][this.nodeArr[1].getComponent(\"Stone\").col].y;\r\n                                this.nodeArr[2].getComponent(\"Stone\").row = 2;\r\n        \r\n                                this.nodeArr[1].y = this.backGroundArr[1][this.nodeArr[0].getComponent(\"Stone\").col].y;\r\n                                this.nodeArr[1].getComponent(\"Stone\").row = 1;\r\n                                this.nodeArr[0].active = true;\r\n                                console.log(\"第一个宝石的显隐状态是：\",this.nodeArr[0].active);\r\n                                this.nodeArr[0].getComponent(\"Stone\").row = 0;\r\n                            }else{\r\n                                this.gameOver = true;\r\n                            }\r\n                            \r\n                        }\r\n                        this.cishu++;\r\n                    }else{\r\n                        // this.cishu = 0;\r\n                        this.updatePrefatY(this.nodeArr,false);\r\n    \r\n                    }\r\n                    this.time = 0;\r\n                }\r\n            }else{\r\n                if(!this.showOver){\r\n\r\n                    this.overMenu.active = true;\r\n                    this.mask.active = true;\r\n                    this.playAudio(this.loseAudio);\r\n                    //显示分数\r\n                    this.overMenu.getChildByName(\"scoreValue\").getComponent(cc.Label).string = this.score;\r\n                    this.overCost += dt;\r\n                    //显示广告\r\n                    cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").showAdvice(\"adunit-f874b1440d977650\");\r\n                    if(cc.sys.localStorage.getItem('maxScoreStone') === null){\r\n                        //设置值\r\n                        cc.sys.localStorage.setItem('maxScoreStone',this.score.toString());\r\n                    }else{\r\n                        let currentBestScore = cc.sys.localStorage.getItem('maxScoreStone');\r\n                        if(typeof(currentBestScore) === \"string\"){\r\n                            currentBestScore = Number(currentBestScore);\r\n                        }\r\n                        if(this.score > currentBestScore){\r\n                            //设置值\r\n                            cc.sys.localStorage.setItem('maxScoreStone',this.score.toString());\r\n                            //将最高分数保存起来\r\n                            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").stoneTopScore = this.score.toString();\r\n                            // let username = cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser;\r\n                            //将最高分上传到微信托管平台\r\n                            cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").postMessage(\"SaveScore\",\"stoneRankScore\",this.score.toString());\r\n                        }\r\n                        console.log(\"宝石方块的最高分是: \",cc.sys.localStorage.getItem('maxScoreStone'));\r\n                    }\r\n                    // //暂停游戏\r\n                    this.showOver = true;\r\n                }\r\n                // if(this.overCost >= 4){\r\n                //     //恢复游戏主逻辑\r\n                //     cc.director.resume();\r\n                //     cc.director.loadScene(\"OneChoose\");\r\n                //     this.overCost = 0;\r\n                // }\r\n            }\r\n        }\r\n    },\r\n    Over : function(){\r\n        //将游戏结束的标记重置为true\r\n        this.gameOver = true;\r\n        //显示游戏结束图片  \r\n        // this.gameBye.active = true;\r\n    },\r\n    //设置游戏状态 --开始 --暂停 --游戏 --消除 --游戏结束 --\r\n    setState : function(state){\r\n        this.iState = state;\r\n    },\r\n    //更新预制体节点的y坐标\r\n    updatePrefatY : function(nodeArr,isNetWork){\r\n        var self = this;\r\n        cc.log(\"nodeArr is \" + nodeArr);\r\n        if(nodeArr.length != 0){\r\n            //如果允许下落的话条的y坐标向下移动\r\n            if(this.CheckIsDown(nodeArr)){\r\n                    //下落节点数组\r\n                    this.down(nodeArr,isNetWork);\r\n                //判断方格是否可以消除\r\n            }else{\r\n                //如果不能下落的话改变背景方格状态(背景方格更新完成之后进行再次生成节点数组)\r\n                this.updateMap(nodeArr);\r\n                // //生成下一个形状\r\n                // this.createNext();\r\n                this.invokeRemoveTime = 0;\r\n                var removeTime = 0;\r\n                //消除次数\r\n                function next(){\r\n                    if(isNetWork){\r\n                        //如果是网络版的话就加入网络接口\r\n                        if(removeTime > 0){\r\n                            let jsonR = {\r\n                                row : removeTime,\r\n                                col : 0,\r\n                            };\r\n                            removeJsonToServer.removeMapList1.push(jsonR);\r\n                            //向服务器发送消除的次数以便进行惩罚\r\n                            // cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(removeJsonToServer);\r\n                        }\r\n                    }\r\n                    //固定完之后重新生成随机预制体节点\r\n                    self.nodeArr = self.nextBlock;\r\n                    //生成下一个形状\r\n                    self.createNext();\r\n                    // this.nextBlock = this.next2Block;\r\n                }\r\n                (function(n){\r\n                    if(isNetWork){\r\n                        self.checkNodeArr(nodeArr,removeTime,isNetWork);\r\n                    }else{\r\n                        self.checkNodeArr(nodeArr,removeTime,isNetWork);\r\n                    }\r\n                    console.log(\"removeTiem is \" + removeTime);\r\n                    n();\r\n                })(next.bind(self));\r\n                \r\n               \r\n            }\r\n        }\r\n    },\r\n    updateMap : function(nodeArr){\r\n        if(nodeArr.length > 0){\r\n            for(let i = 0;i<nodeArr.length;i++){\r\n                var row = nodeArr[i].getComponent(\"Stone\").row;\r\n                var col = nodeArr[i].getComponent(\"Stone\").col;\r\n                this.map[row][col] = 1;\r\n                //将背景方格的属性状态改为该节点数组对应的类型\r\n                this.backGroundArr[row][col].getComponent(\"Back\").type = nodeArr[i].getComponent(\"Stone\").type;\r\n                this.backGroundArr[row][col].getComponent(\"Back\").innerNode = nodeArr[i];\r\n                nodeArr[i].getComponent(\"Stone\").downShine();\r\n            }\r\n        }\r\n    },\r\n    //方块下落方法\r\n    down : function(nodeArr,isNetWork){\r\n        //如果游戏结束的话不允许向下移动\r\n        if(!this.gameOver){\r\n            //位移3个方格\r\n            for(var i = nodeArr.length-1;i >= 0;i--){\r\n                var row = nodeArr[i].getComponent(\"Stone\").row;\r\n                var col = nodeArr[i].getComponent(\"Stone\").col;\r\n                nodeArr[i].y = this.backGroundArr[row+1][col].y; \r\n                nodeArr[i].getComponent(\"Stone\").row = row+1;\r\n            }\r\n        }\r\n    },\r\n    /*创建一个二维数组的方法\r\n     *@param rows : 二维数组的行数\r\n      @param cols : 二维数组的列数\r\n     *@param initial : 二维数组的初始值\r\n    */\r\n    createMatrix : function(rows,cols,initial){\r\n        var arr = [];\r\n        for(var i = 0;i < rows;i++){\r\n            var columns = [];\r\n            for(var j = 0;j<cols;j++){\r\n                columns[j] = initial;\r\n            }\r\n            arr[i] = columns;\r\n        }\r\n        return arr;\r\n    },\r\n    /**\r\n        1：旋转的时候判断旋转的坐标对应的背景方格的状态是否为1\r\n        2：当竖条出现在最左边的时候改变旋转中心为最上面的预制体节点\r\n        3：当竖条出现在最右边的时候改变旋转中心为最下面的预制节点\r\n    **/\r\n    rotate       : function(){\r\n        //游戏结束之后不可以再操作这些块了\r\n        if(!this.gameOver){\r\n            this.playAudio(this.clickAudio);\r\n            this.rotateButton.children[0].opacity = 120;\r\n            //判断周围的网格状态是否为true\r\n            /**\r\n             * \r\n             * 旋转之后方块的颜色变换，第一个变成第二个，第二个变成第三个，第三个变成第一个\r\n             * \r\n             * ** */\r\n            // cc.log(this.boxColorArr);\r\n            var before0Name = this.nodeArr[0].name;\r\n            var before0Type = this.nodeArr[0].getComponent(\"Stone\").type;\r\n            var before0Frame = this.nodeArr[0].getComponent(\"cc.Sprite\").spriteFrame;\r\n            var before0Row = this.nodeArr[0].getComponent(\"Stone\").row;\r\n            // cc.log(\"before0 is \" + before0);\r\n            var before1Name = this.nodeArr[1].name;\r\n            var before1Type = this.nodeArr[1].getComponent(\"Stone\").type;\r\n            var before1Frame = this.nodeArr[1].getComponent(\"cc.Sprite\").spriteFrame;\r\n            var before1Row = this.nodeArr[1].getComponent(\"Stone\").row;\r\n            // cc.log(\"before1 is \" + before1);\r\n            var before2Name = this.nodeArr[2].name;\r\n            var before2Type = this.nodeArr[2].getComponent(\"Stone\").type;\r\n            var before2Frame = this.nodeArr[2].getComponent(\"cc.Sprite\").spriteFrame;\r\n            var before2Row = this.nodeArr[2].getComponent(\"Stone\").row;\r\n            // cc.log(\"before2 is \" + before2);\r\n            //分别改变颜色\r\n            this.nodeArr[0].name = before2Name;\r\n            this.nodeArr[0].getComponent(\"Stone\").type = before2Type;\r\n            this.nodeArr[0].getComponent(\"cc.Sprite\").spriteFrame = before2Frame;\r\n            this.nodeArr[1].name = before0Name;\r\n            this.nodeArr[1].getComponent(\"Stone\").type = before0Type;\r\n            this.nodeArr[1].getComponent(\"cc.Sprite\").spriteFrame = before0Frame;\r\n            this.nodeArr[2].name = before1Name;\r\n            this.nodeArr[2].getComponent(\"Stone\").type = before1Type;\r\n            this.nodeArr[2].getComponent(\"cc.Sprite\").spriteFrame = before1Frame;\r\n            console.log(\"arguments's length is \",arguments.length);\r\n            console.log(\"arguments's length is \",arguments[0]);\r\n            //如果是网络版的发送旋转数据到服务器\r\n            if(arguments.length === 2){\r\n                //发送数据到服务器\r\n                var jsonData0 = {\r\n                    row : before0Row,\r\n                    col : this.nodeArr[0].getComponent(\"Stone\").col,\r\n                    color : before0Type.toString(),\r\n                };\r\n                var jsonData1 = {\r\n                    row  : before1Row,\r\n                    col : this.nodeArr[0].getComponent(\"Stone\").col,\r\n                    color : before1Type.toString(),\r\n                };\r\n                var jsonData2 = {\r\n                    row   : before2Row,\r\n                    col   : this.nodeArr[0].getComponent(\"Stone\").col,\r\n                    color : before2Type.toString(),\r\n                };\r\n                var jsonData3 = {\r\n                    row   : before0Row,\r\n                    col   : this.nodeArr[0].getComponent(\"Stone\").col,\r\n                    color : this.nodeArr[0].getComponent(\"Stone\").type.toString(),\r\n                };\r\n                var jsonData4 = {\r\n                    row   : before1Row,\r\n                    col   : this.nodeArr[0].getComponent(\"Stone\").col,\r\n                    color : this.nodeArr[1].getComponent(\"Stone\").type.toString(),\r\n                };\r\n                var jsonData5 = {\r\n                    row   : before2Row,\r\n                    col   : this.nodeArr[0].getComponent(\"Stone\").col,\r\n                    color : this.nodeArr[2].getComponent(\"Stone\").type.toString(),\r\n                };\r\n                var jsonArr = [];\r\n                jsonArr = Array.of(jsonData0,jsonData1,jsonData2,jsonData3,jsonData4,jsonData5);\r\n                console.log(\"jsonArr is \",jsonArr);\r\n                for(let m = 0;m < jsonArr.length;m++){\r\n                    this.jsonMsgToServer.changeMapList1.push(jsonArr[m]);\r\n                }\r\n            }\r\n            this.scheduleOnce(function(){\r\n                this.rotateButton.children[0].opacity = 0;\r\n            },0.2);\r\n        }\r\n    },\r\n    //左移方法\r\n    moveLeft    : function(){\r\n        //如果游戏结束就不能再左右移动\r\n        if(!this.gameOver){\r\n            if(this.CheckIsLeft()){\r\n                console.log(\"arguments.length is \",arguments.length);\r\n                var rowArr = [];\r\n                for(var i = 0;i < this.nodeArr.length;i++){\r\n                    //参数的长度为1的话被认定为网络版的方法\r\n                    if(arguments.length === 1){\r\n                        console.log(\"进入左移网络版\");\r\n                        this.leftMove(this.nodeArr[i],true);\r\n                        //将行数保留下来\r\n                        rowArr.push(this.nodeArr[i].getComponent(\"Stone\").row);\r\n                    }else{\r\n                        this.leftMove(this.nodeArr[i]);\r\n                    }\r\n                }\r\n                //网络版的方法\r\n                if(arguments.length === 1){\r\n                    console.log(\"进入网络版左移\");\r\n                    //将这些数据发送给服务器让对手显示游戏\r\n                    for(let m = 0;m < rowArr.length;m++){\r\n                        var jsonDataForServer = {\r\n                            row   : rowArr[m],\r\n                            col   : this.nodeArr[m].getComponent(\"Stone\").col+1,\r\n                            color : \"-1\",\r\n                        };\r\n                        this.jsonMsgToServer.changeMapList1.push(jsonDataForServer);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    leftMove : function(node){\r\n        var row = node.getComponent(\"Stone\").row;\r\n        var col = node.getComponent(\"Stone\").col;\r\n        //将当前背景节点的node改为null\r\n        node.x = this.backGroundArr[row][col-1].x;\r\n        //改变该节点的列\r\n        node.getComponent(\"Stone\").col = col-1;\r\n        //网络版的数据\r\n        if(arguments.length != 1){\r\n            //加入发送到服务器的信息\r\n            let afterLeftJson = {\r\n                row   : row,\r\n                col   : col - 1,\r\n                color : node.getComponent(\"Stone\").type.toString(),\r\n            }\r\n            this.jsonMsgToServer.changeMapList1.push(afterLeftJson);\r\n        }\r\n    },\r\n    //右移方法\r\n    moveRight   : function(){\r\n        if(!this.gameOver){\r\n            if(this.CheckIsRight()){\r\n                var rowArr = [];\r\n                for(var i = 0;i < this.nodeArr.length;i++){\r\n                    if(arguments.length === 1){\r\n                        console.log(\"进入左移网络版\");\r\n                        this.rightMove(this.nodeArr[i],true);\r\n                        //将行数保留下来\r\n                        rowArr.push(this.nodeArr[i].getComponent(\"Stone\").row);\r\n                    }else{\r\n                        this.rightMove(this.nodeArr[i]);\r\n                    }\r\n                }\r\n                if(arguments.length === 1){\r\n                    console.log(\"进入网络版左移\");\r\n                    //将这些数据发送给服务器让对手显示游戏\r\n                    for(let m = 0;m < rowArr.length;m++){\r\n                        var jsonDataForServer = {\r\n                            row   : rowArr[m],\r\n                            col   : this.nodeArr[m].getComponent(\"Stone\").col - 1,\r\n                            color : \"-1\",\r\n                        };\r\n                        this.jsonMsgToServer.changeMapList1.push(jsonDataForServer);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    rightMove : function(node){\r\n        var row = node.getComponent(\"Stone\").row;\r\n        var col = node.getComponent(\"Stone\").col;\r\n        node.x = this.backGroundArr[row][col+1].x;\r\n        //设置该节点的列\r\n        node.getComponent(\"Stone\").col = col + 1;\r\n        if(arguments.length != 1){\r\n            //加入发送到服务器的信息\r\n            let afterLeftJson = {\r\n                row   : row,\r\n                col   : col + 1,\r\n                color : node.getComponent(\"Stone\").type.toString(),\r\n            }\r\n            this.jsonMsgToServer.changeMapList1.push(afterLeftJson);\r\n        }\r\n    },\r\n    /**\r\n        检测是否可以向下移动\r\n        返回true或者false\r\n        @return true  : 可以下落\r\n        @return false : 不可以下落\r\n    **/\r\n    CheckIsDown : function(nodeArr){\r\n        if(nodeArr !== null && nodeArr.length != 0){\r\n            var row = nodeArr[nodeArr.length - 1].getComponent(\"Stone\").row;\r\n            var col = nodeArr[nodeArr.length - 1].getComponent(\"Stone\").col;\r\n            //获取最后一个\r\n                //如果最大的行号是11的话不用再这里判断这样的情况是触底的情况\r\n                if(row != 11){\r\n                    if(this.map[row + 1][col] === 1){\r\n                        //将对应的背景方格的状态改为1\r\n                        return false;\r\n                    }else{\r\n                        return true;\r\n                    }\r\n                }else{\r\n                        return false;\r\n                }\r\n        }\r\n    },\r\n    /**\r\n       检测是否可以向左移动\r\n    **/\r\n   CheckIsLeft : function(){\r\n        var row = [];\r\n        for(var i = 0;i<3;i++){\r\n            row[i] = this.nodeArr[i].getComponent(\"Stone\").row;\r\n        }\r\n        var col = this.nodeArr[2].getComponent(\"Stone\").col;\r\n        //如果达到左边界不可左移\r\n        if(col <= 0){\r\n            return false;\r\n        }\r\n        //每下降一个格检测一次\r\n        //如果列的个数为1的话\r\n        for(var m = 0;m<row.length;m++){\r\n            //获得行数\r\n            var mr = row[m];\r\n            //只要一个方格的左边的背景方格的状态为1的话就停止移动\r\n            if(this.map[mr][col - 1] === 1){\r\n                //一个方格的左边背景方格的状态是1的话就说明不可以向左边移动\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n    //检测是否可以向右移动\r\n    CheckIsRight : function(){\r\n        var row = [];\r\n        for(var i = 0;i<3;i++){\r\n            row[i] = this.nodeArr[i].getComponent(\"Stone\").row;\r\n        }\r\n        var col = this.nodeArr[2].getComponent(\"Stone\").col;\r\n        //如果达到右边界不可右移\r\n        if(col >= 5){\r\n            return false;\r\n        }\r\n        //每下降一个格检测一次\r\n        //如果列的个数为1的话说明是竖条的形状\r\n        for(var m = 0;m<row.length;m++){\r\n            //获得行数\r\n            var mr = row[m];\r\n            //只要一个方格的左边的背景方格的状态为1的话就停止移动\r\n            if(this.map[mr][col + 1] === 1){\r\n                //一个方格的左边背景方格的状态是1的话就说明不可以向左边移动\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n    //改变该节点数组是否存在可消除的节点\r\n    checkNodeArr : function(nodeArr,removeTime,isNetWork){\r\n        if(nodeArr.length != 0){\r\n            if(nodeArr.length > 0){\r\n                //临时数组存放待消节点\r\n                var waitQueue = [];\r\n                if(this.canRemove(nodeArr,waitQueue)){\r\n                    //如果是可以消除的话进行消除这时候待消队列已经填满了节点\r\n                    // this.remove(this.nodeArr);\r\n                    //检测完这两个下落的方块的待消队列\r\n                    for(let j = 0;j<waitQueue.length;j++){\r\n                        //如果该节点已经删除的话不对它操作\r\n                        if(waitQueue[j] === null){\r\n                            //将它从该数组删除\r\n                            waitQueue.splice(j,1);\r\n                        }\r\n                        //将这些待消除的标记为可消除的\r\n                        waitQueue[j].getComponent(\"Stone\").isRemove = true;\r\n                    }\r\n                    // this.tempNodes = waitQueue;\r\n                    this.addScore(waitQueue.length);\r\n                    //该消除的消除该下落的下落\r\n                    if(isNetWork){\r\n                        return this.remove(waitQueue,removeTime,isNetWork);\r\n                    }else{\r\n                        this.remove(waitQueue,removeTime,isNetWork);\r\n                    }\r\n                }else{\r\n                    //如果是网络版的走这句话\r\n                    if(isNetWork){\r\n                        if(this.rivalTouchBarry){\r\n                            console.log(\"对手不能消除在发送消息给服务器！！！！！！\");\r\n                            // callback(0);\r\n                            return new Promise(function(resolve,reject){\r\n                                console.log(\"进入消除零次的Promise\");\r\n                                resolve(0);\r\n                            });\r\n                        }else{\r\n                            //如果是自己的话消除零次发送给服务器但是在不能下落的时候不发送该数据\r\n                            return new Promise(function(resolve,reject){\r\n                                console.log(\"对手没有给我发消息\");\r\n                                resolve(0); \r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                \r\n            }\r\n        }    \r\n    },\r\n    //消除代码\r\n    /**\r\n     * @param  {Array} waitQueue 待消队列\r\n     * @param  {Number} removeTime 消除次数\r\n     * @param  {Boolean} isNetWork 是否是网络版的宝石方块\r\n     */\r\n    remove : function(waitQueue,removeTime,isNetWork){\r\n        //连消的情况是remove方法被执行了几次就形成了几次连消\r\n        // this.removeTime++;\r\n        // if(this.removeTime >= 2){\r\n        //     cc.log(\"连消了两次\");\r\n        // }\r\n        this.playAudio(this.removeAudio);\r\n        removeTime++\r\n        this.invokeRemoveTime++;\r\n        this.totalRemoveTime++;\r\n        this.totalTime++;\r\n        if(removeTime >= 2){\r\n            var scoreLabel = this.scoreLabel.getComponent(cc.Label);\r\n            cc.log(\"产生了连消！！！！\");\r\n            if(removeTime === 2){\r\n                //产生一次连击\r\n                this.score += 10;\r\n            }else if(removeTime === 3){\r\n                //产生两次连击\r\n                this.score += 20;\r\n            }else if(removeTime === 4){\r\n                //产生3次连击\r\n                this.score += 30;\r\n            }else if(removeTime === 5){\r\n                //产生4次连击\r\n                this.score += 40;\r\n            }\r\n            scoreLabel.string = this.score;\r\n        }\r\n        var waitDownArr = [];\r\n        // for(let m = 0;m<waitQueue.length;m++){\r\n        //     var cRow = waitQueue[m].getComponent(\"Stone\").row;\r\n        //     var cCol = waitQueue[m].getComponent(\"Stone\").col;\r\n        //     this.upFindNodes(cRow,cCol,waitDownArr);\r\n        // }\r\n        // cc.log(\"待下落节点数组为：\" + waitDownArr);\r\n        this.deleteNodeFromParent(waitQueue,waitDownArr);\r\n        \r\n        // if(!waitDownArr.contain(activeNode))\r\n        //     waitDownArr.push(activeNode);\r\n        //下落其他节点让节点自己找空穴目标位置进行下落\r\n        // for(let j = 0;j<waitDownArr.length;j++){\r\n        //      waitDownArr[j].getComponent(\"Stone\").afterRemoveDown(this.map,this.backGroundArr);\r\n        //     //  waitDownArr[j].stopAction();\r\n        // }\r\n        \r\n        //检查这些下落的节点数组是否可以再次消除\r\n        if(!isNetWork){\r\n            this.scheduleOnce(function(){\r\n                this.checkNodeArr(waitDownArr,removeTime,isNetWork);\r\n            }.bind(this),0.5);\r\n        }else{\r\n            var self = this;\r\n            function next(){\r\n                //向服务器发送分数信息\r\n                var jsonMsgToServer = {\r\n                    tag1            : 11,\r\n                    score           : 0,\r\n                    type            : \"4\",\r\n                    state1          : \"\",\r\n                    changeMapList1  : [],\r\n                    removeMapList1  : 0,\r\n                    nMapRow         : \"\",\r\n                    nMapCol         : \"\",\r\n                    loading1        : \"\",\r\n                    nDisappear1     : 0,\r\n                }\r\n                jsonMsgToServer.tag1 = 11;\r\n                jsonMsgToServer.score = self.score;\r\n                jsonMsgToServer.nDisappear1 = self.score;\r\n                // cc.find(\"PebmanentNode\").getComponent(\"GetServer\").SendLongMsg(jsonMsgToServer);\r\n                // return true;\r\n            }\r\n            function waitPromise(){\r\n                return new Promise(function(resolve,reject){\r\n                    setTimeout(function(){\r\n                        console.log(\"1034 line \" + removeTime);\r\n                        //检查是否能再次消除\r\n                        var isP = self.checkNodeArr(waitDownArr,removeTime,isNetWork);\r\n                        if(isP instanceof Promise){\r\n                            console.log(\"1038 --->\" + isP);\r\n                            isP.then(function(data){\r\n                                resolve(data);\r\n                            });\r\n                        }\r\n                    },500);\r\n                });\r\n            }\r\n            return waitPromise().then(function(data){\r\n                console.log(\"在消除方法中消除次数是\",removeTime);\r\n                console.log(\"全局的消除变量是\",self.invokeRemoveTime);\r\n                next();\r\n                // overPromise();\r\n            });\r\n        }\r\n        \r\n        \r\n    },\r\n    /**\r\n     * 依据带消除队列里的长度进行计算分数\r\n     * @param  {待消除队列的长度} waitQueueLength\r\n     */\r\n    addScore : function(waitQueueLength){\r\n        var scoreLabel = this.scoreLabel.getComponent(cc.Label);\r\n        switch(waitQueueLength){\r\n            case 3:\r\n                this.score += 30;\r\n                break;\r\n            case 4:\r\n                this.score += 40;\r\n                break;\r\n            case 5:\r\n                this.score += 50;\r\n                break;\r\n            case 6:\r\n                this.score += 60;\r\n                break;\r\n            case 7:\r\n                this.score += 70;\r\n                break;\r\n            case 8:\r\n                this.score += 80;\r\n                break;\r\n            case 9:\r\n                this.score += 90;\r\n                break;                        \r\n        }\r\n        //显示分数\r\n        scoreLabel.string = this.score;\r\n    },\r\n    canRemove : function(nodeArr,waitQueue){\r\n        for(let i = 0;i < nodeArr.length;i++){\r\n            this.addWillDeleteArr(nodeArr[i],waitQueue);\r\n        }\r\n        if(waitQueue.length >= 3){\r\n           return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    },\r\n    /**\r\n     * @param  {需要各个方向扫描的节点} node\r\n     * @param  {消除队列} willDeleteArr\r\n     */\r\n    addWillDeleteArr(node,willDeleteArr){\r\n        //用于存放该节点类型数组,存放个数>=3个的节点\r\n        var typeArr = [];\r\n        //获得宝石的类型\r\n        var type = node.getComponent(\"Stone\").type;\r\n        //获得当前方格节点所在的行\r\n        var row = node.getComponent(\"Stone\").row;\r\n        //获得当前节点所在的列\r\n        var col = node.getComponent(\"Stone\").col;\r\n        for(var i = 0;i<4;i++){\r\n            //四个方向查找待消节点\r\n            this.directorFind(typeArr,row,col,i,type,node);\r\n        }\r\n        cc.log(\"typeArr is \" + typeArr);\r\n        if(typeArr.length >= 3){\r\n            for(let t = 0;t<typeArr.length;t++){\r\n                //将待消除的节点添加到待消队列里面去\r\n                if(!willDeleteArr.contain(typeArr[t])){\r\n                    //将该节点push进待消队列\r\n                    willDeleteArr.push(typeArr[t]);\r\n                }\r\n            }\r\n        }\r\n        cc.log(\"willDeleteArr is \" + willDeleteArr);\r\n    },\r\n    /**\r\n     * 根据角度填充各个方向数组\r\n     * @param  {遍历每个节点的时候传递进来的一个空数组} typeArr\r\n     * @param  {需要扫描的节点的行} row\r\n     * @param  {需要扫描的节点的列} col\r\n     * @param  {需要扫描的方向} direction\r\n     * @param  {该节点的类型} type\r\n     * @param  {当前需要各个方向扫描的节点} node\r\n     */\r\n    directorFind : function(typeArr,row,col,direction,type,node){\r\n        //存放这个方向的临时数组\r\n        var directionArr = [];\r\n        //45度和-135度方向检测\r\n        var leftRow = row;\r\n        var leftCol = col;\r\n        // if(leftCol === undefined){\r\n        //     cc.director.pause();\r\n        //     //暂停游戏\r\n        //     cc.director.pause();\r\n        // }\r\n        //先把自己push进去(前提是类型相同)\r\n        directionArr.push(node);\r\n        while(leftRow >= 0 || leftRow <= 11 || leftCol >= 0 || leftCol <= 5){\r\n             //行和列都减1\r\n             //0度方向\r\n             if(direction === 0){\r\n                leftCol++;\r\n             }else if(direction === 1){\r\n                 //90度方向\r\n                 leftRow--;\r\n             }else if(direction === 2){\r\n                 //45度方向\r\n                 leftRow--;\r\n                 leftCol++;\r\n             }else if(direction === 3){\r\n                 //135度方向\r\n                 leftCol--;\r\n                 leftRow--;\r\n             }\r\n             //如果寻找的行或者列超出边界\r\n             if(leftRow < 0 || leftRow >11 || leftCol < 0 || leftCol > 5){\r\n                 break;\r\n             }\r\n            //  alert(\"leftRow-->\" + leftRow + \"leftCol-->\"+leftCol);\r\n             cc.log(\"leftRow is \" + leftRow + \" leftCol is \" + leftCol + \" type is \" + type);\r\n             if(this.isCommonType(leftRow,leftCol,type)){\r\n                 //如果当前数组里有当前的元素就不加进去了\r\n                 var nextNode = this.backGroundArr[leftRow][leftCol].getComponent(\"Back\").innerNode;\r\n                 if(!directionArr.contain(nextNode)){\r\n                    //如果找到跟自己颜色一样的话将它放到消除队列里面\r\n                    directionArr.push(nextNode);\r\n                 }\r\n             }else{\r\n                 break;\r\n             }\r\n        }\r\n        leftRow = row;\r\n        leftCol = col;\r\n        while(leftRow >= 0 || leftRow <= 11 || leftCol >=0 || leftCol <= 5){\r\n            if(direction === 1){\r\n                //-90度方向\r\n                leftRow++;\r\n            }else if(direction === 0){\r\n                //180度方向\r\n                leftCol--;\r\n            }else if(direction === 2){\r\n                //-135度方向\r\n                leftRow++;\r\n                leftCol--;\r\n            }else if(direction === 3){\r\n                //-45度方向\r\n                leftCol++;\r\n                leftRow++;\r\n            }\r\n            //如果超出了边界就退出当前循环\r\n            if(leftRow < 0 || leftRow >11 || leftCol < 0 || leftCol > 5){\r\n                break;\r\n            }\r\n            // alert(\"leftRow-->\" + leftRow + \"leftCol-->\"+leftCol);\r\n            if(this.isCommonType(leftRow,leftCol,type)){\r\n                var nextNode = this.backGroundArr[leftRow][leftCol].getComponent(\"Back\").innerNode;\r\n                //将该节点的待消状态设置为true\r\n                if(!directionArr.contain(nextNode)){\r\n                    //如果找到跟自己颜色一样的话将它放到消除队列里面\r\n                    directionArr.push(nextNode);\r\n                 }\r\n            }else{\r\n                break;\r\n            }\r\n        }\r\n        if(directionArr.length >= 3){\r\n             //加上自己就满足消除条件了\r\n            //  return typeArr;\r\n             for(let j = 0;j<directionArr.length;j++){\r\n                 //将这些节点的待消状态改为true\r\n                 directionArr[j].getComponent(\"Stone\").isRemove = true;\r\n                 //将该形状类加入到相同类型的数组里\r\n                 typeArr.push(directionArr[j]);\r\n             }\r\n        }\r\n    },\r\n    \r\n    //向上找节点\r\n    /**\r\n     * @param  {当前节点所在的行} row\r\n     * @param  {当前节点所在的列} col\r\n     * @param  {存放消除节点以上的节点数组} arr\r\n     */\r\n    upFindNodes : function(row,col,arr){\r\n        console.log(\"参数列表是：\",arguments);\r\n        if(arguments.length === 2){\r\n            var tempArr = [];\r\n        }\r\n        while(row > 0){\r\n            row--;\r\n            var upNode = this.backGroundArr[row][col].getComponent(\"Back\").innerNode;\r\n            if(upNode != null){\r\n                console.log(\"upNode is \",upNode);\r\n                if(upNode.getComponent(\"Stone\").isRemove === true){\r\n                    continue;\r\n                }else{\r\n                    if(arguments.length === 3){\r\n                        //将不是待消节点添加到数组中去\r\n                        if(!arr.contain(upNode)){    \r\n                            //如果该数组中还没有该节点的话就加进去\r\n                            arr.push(upNode);\r\n                        }\r\n                    }else{\r\n                        if(!tempArr.contain(upNode))\r\n                            tempArr.push(upNode);\r\n                    }\r\n                }\r\n            }else{\r\n                //如果upNode是空的话\r\n                break;\r\n            }\r\n        }\r\n        if(arguments.length === 2){\r\n            return tempArr;\r\n        }\r\n    },\r\n    /**\r\n     * @param  {待消除队列} waitQueue\r\n     */\r\n    deleteNodeFromParent : function(waitQueue,waitDownArr){\r\n        for(let i = 0;i<waitQueue.length;i++){\r\n            var row = waitQueue[i].getComponent(\"Stone\").row;\r\n            var col = waitQueue[i].getComponent(\"Stone\").col;\r\n            //恢复地图信息\r\n            this.map[row][col] = 0;\r\n            //恢复背景方格的原始属性\r\n            this.backGroundArr[row][col].getComponent(\"Back\").type = -1;\r\n            this.backGroundArr[row][col].getComponent(\"Back\").innerNode = null;\r\n            waitQueue[i].getComponent(\"Stone\").shine();\r\n            //获得该节点以上的所有节点\r\n            var downArr = this.upFindNodes(row,col);\r\n            for(let j = 0;j<downArr.length;j++){\r\n                 if(!waitDownArr.contain(downArr[j])){\r\n                     waitDownArr.push(downArr[j]);\r\n                 }\r\n                 downArr[j].getComponent(\"Stone\").afterRemoveDown(this.map,this.backGroundArr);\r\n            }\r\n        }\r\n    },\r\n    //判断类型是否和传进来的类型相同\r\n    /**\r\n     * @param  {该节点所处的行} row\r\n     * @param  {该节点所处的列} col\r\n     * @param  {该节点的类型} type\r\n     * @returns {Boolean} true | false\r\n     */\r\n    isCommonType : function(row,col,type){\r\n          //如果该行该列的背景网格的内置节点为空的话说明该网格没有宝石\r\n          if(this.backGroundArr[row][col].getComponent(\"Back\").innerNode === null){\r\n              return false;\r\n          }else{\r\n              return this.backGroundArr[row][col].getComponent(\"Back\").type === type ? true : false;\r\n          }\r\n    },\r\n    //生成下一个形状\r\n    generateNext : function(parentNode){\r\n        return this.createShape(parentNode);\r\n    },\r\n    pause : function(){\r\n        if(!this.gameOver){\r\n            //暂停游戏\r\n            cc.director.pause();\r\n            console.log(\"暂停游戏开始宝石单机\");\r\n            this.mask.active = true;\r\n            this.pauseMenu.active = true;\r\n        }\r\n        \r\n    },\r\n    \r\n});","!function(n){\"use strict\";function t(n,t){var r=(65535&n)+(65535&t);return(n>>16)+(t>>16)+(r>>16)<<16|65535&r}function r(n,t){return n<<t|n>>>32-t}function e(n,e,o,u,c,f){return t(r(t(t(e,n),t(u,f)),c),o)}function o(n,t,r,o,u,c,f){return e(t&r|~t&o,n,t,u,c,f)}function u(n,t,r,o,u,c,f){return e(t&o|r&~o,n,t,u,c,f)}function c(n,t,r,o,u,c,f){return e(t^r^o,n,t,u,c,f)}function f(n,t,r,o,u,c,f){return e(r^(t|~o),n,t,u,c,f)}function i(n,r){n[r>>5]|=128<<r%32,n[14+(r+64>>>9<<4)]=r;var e,i,a,d,h,l=1732584193,g=-271733879,v=-1732584194,m=271733878;for(e=0;e<n.length;e+=16)i=l,a=g,d=v,h=m,g=f(g=f(g=f(g=f(g=c(g=c(g=c(g=c(g=u(g=u(g=u(g=u(g=o(g=o(g=o(g=o(g,v=o(v,m=o(m,l=o(l,g,v,m,n[e],7,-680876936),g,v,n[e+1],12,-389564586),l,g,n[e+2],17,606105819),m,l,n[e+3],22,-1044525330),v=o(v,m=o(m,l=o(l,g,v,m,n[e+4],7,-176418897),g,v,n[e+5],12,1200080426),l,g,n[e+6],17,-1473231341),m,l,n[e+7],22,-45705983),v=o(v,m=o(m,l=o(l,g,v,m,n[e+8],7,1770035416),g,v,n[e+9],12,-1958414417),l,g,n[e+10],17,-42063),m,l,n[e+11],22,-1990404162),v=o(v,m=o(m,l=o(l,g,v,m,n[e+12],7,1804603682),g,v,n[e+13],12,-40341101),l,g,n[e+14],17,-1502002290),m,l,n[e+15],22,1236535329),v=u(v,m=u(m,l=u(l,g,v,m,n[e+1],5,-165796510),g,v,n[e+6],9,-1069501632),l,g,n[e+11],14,643717713),m,l,n[e],20,-373897302),v=u(v,m=u(m,l=u(l,g,v,m,n[e+5],5,-701558691),g,v,n[e+10],9,38016083),l,g,n[e+15],14,-660478335),m,l,n[e+4],20,-405537848),v=u(v,m=u(m,l=u(l,g,v,m,n[e+9],5,568446438),g,v,n[e+14],9,-1019803690),l,g,n[e+3],14,-187363961),m,l,n[e+8],20,1163531501),v=u(v,m=u(m,l=u(l,g,v,m,n[e+13],5,-1444681467),g,v,n[e+2],9,-51403784),l,g,n[e+7],14,1735328473),m,l,n[e+12],20,-1926607734),v=c(v,m=c(m,l=c(l,g,v,m,n[e+5],4,-378558),g,v,n[e+8],11,-2022574463),l,g,n[e+11],16,1839030562),m,l,n[e+14],23,-35309556),v=c(v,m=c(m,l=c(l,g,v,m,n[e+1],4,-1530992060),g,v,n[e+4],11,1272893353),l,g,n[e+7],16,-155497632),m,l,n[e+10],23,-1094730640),v=c(v,m=c(m,l=c(l,g,v,m,n[e+13],4,681279174),g,v,n[e],11,-358537222),l,g,n[e+3],16,-722521979),m,l,n[e+6],23,76029189),v=c(v,m=c(m,l=c(l,g,v,m,n[e+9],4,-640364487),g,v,n[e+12],11,-421815835),l,g,n[e+15],16,530742520),m,l,n[e+2],23,-995338651),v=f(v,m=f(m,l=f(l,g,v,m,n[e],6,-198630844),g,v,n[e+7],10,1126891415),l,g,n[e+14],15,-1416354905),m,l,n[e+5],21,-57434055),v=f(v,m=f(m,l=f(l,g,v,m,n[e+12],6,1700485571),g,v,n[e+3],10,-1894986606),l,g,n[e+10],15,-1051523),m,l,n[e+1],21,-2054922799),v=f(v,m=f(m,l=f(l,g,v,m,n[e+8],6,1873313359),g,v,n[e+15],10,-30611744),l,g,n[e+6],15,-1560198380),m,l,n[e+13],21,1309151649),v=f(v,m=f(m,l=f(l,g,v,m,n[e+4],6,-145523070),g,v,n[e+11],10,-1120210379),l,g,n[e+2],15,718787259),m,l,n[e+9],21,-343485551),l=t(l,i),g=t(g,a),v=t(v,d),m=t(m,h);return[l,g,v,m]}function a(n){var t,r=\"\",e=32*n.length;for(t=0;t<e;t+=8)r+=String.fromCharCode(n[t>>5]>>>t%32&255);return r}function d(n){var t,r=[];for(r[(n.length>>2)-1]=void 0,t=0;t<r.length;t+=1)r[t]=0;var e=8*n.length;for(t=0;t<e;t+=8)r[t>>5]|=(255&n.charCodeAt(t/8))<<t%32;return r}function h(n){return a(i(d(n),8*n.length))}function l(n,t){var r,e,o=d(n),u=[],c=[];for(u[15]=c[15]=void 0,o.length>16&&(o=i(o,8*n.length)),r=0;r<16;r+=1)u[r]=909522486^o[r],c[r]=1549556828^o[r];return e=i(u.concat(d(t)),512+8*t.length),a(i(c.concat(e),640))}function g(n){var t,r,e=\"\";for(r=0;r<n.length;r+=1)t=n.charCodeAt(r),e+=\"0123456789abcdef\".charAt(t>>>4&15)+\"0123456789abcdef\".charAt(15&t);return e}function v(n){return unescape(encodeURIComponent(n))}function m(n){return h(v(n))}function p(n){return g(m(n))}function s(n,t){return l(v(n),v(t))}function C(n,t){return g(s(n,t))}function A(n,t,r){return t?r?s(t,n):C(t,n):r?m(n):p(n)}\"function\"==typeof define&&define.amd?define(function(){return A}):\"object\"==typeof module&&module.exports?module.exports=A:n.md5=A}(this);\r\n//# sourceMappingURL=md5.min.js.map","// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n        waitServer : cc.Node,\r\n        clickAudio : {\r\n            url     : cc.AudioClip,\r\n            default : null,\r\n        }\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        //初始化用code获取的accesstoken\r\n        this.accessToken=\"\";\r\n        //初始化用code获取的openid\r\n        this.openId=\"\";\r\n        //初始化用code获取的refeshtoken\r\n        this.refshToken=\"\";\r\n\r\n        //初始化accessToken计时器\r\n        this.fTokenTime=0;\r\n          //初始化accessToken计时开关\r\n        this.isTokenTime=false;\r\n        this.waitServer.active = false;\r\n        //    //初始化是否刷新refsh\r\n        //    this.isRefsh=false;\r\n\r\n        // this.is=false;\r\n        this.screenAdapt();\r\n        this.wxLoginSuccess = false;\r\n        \r\n    },\r\n   //微信登陆i\r\n   WechatLogin:function(){\r\n    cc.audioEngine.play(this.clickAudio,false,1);\r\n    jsb.reflection.callStaticMethod(\"org/cocos2dx/javascript/AppActivity\",\"wxLogin\",\"()V\");\r\n},\r\n   //通过code获取微信accesstoken\r\n   GetAccessToken:function(code1){\r\n    console.log(\"in getAccessToken code1 is \" + code1);\r\n    var url = \"https://api.weixin.qq.com/sns/oauth2/access_token?appid=wx72f9006d0b1d9b7f&secret=fe9036e8fdb8bc990a318227d0e68a5e&code=\"+code1+\"&grant_type=authorization_code\";\r\n    // var str = \"shop=钻石\";\r\n    // var str=\"name=1&password=1\";\r\n    var  self=this;\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange = function () {\r\n        if (xhr.readyState == 4 && (xhr.status >= 200 && xhr.status < 400)) {\r\n            console.log(\"微信相应\");\r\n            var response = xhr.responseText;     \r\n            console.log(\"in getAccessToken response is \" + response);\r\n            self.SendServer(response);\r\n            var msg=JSON.parse(response);\r\n            self.accessToken=msg.access_token;\r\n            self.openId=msg.openid; \r\n            self.refshToken=msg.refresh_token;\r\n        }\r\n    };\r\n\r\n    //    xhr.send(\"name=100\"+\"&password=1\");\r\n    xhr.open(\"GET\", url, true);\r\n     xhr.send();\r\n   },\r\n   //将获取到的accesstoken信息发给服务器\r\n\r\n   SendServer:function(str){\r\n    var url = \"http://47.92.126.116/login\";\r\n    var str1=\"{\\\"tag\\\":\\\"wxLogin\\\",\\\"body\\\":\"+str+\"}\";\r\n    var xhr = new XMLHttpRequest();\r\n    var self = this;\r\n    xhr.onreadystatechange = function () {\r\n        if (xhr.readyState == 4 && (xhr.status >= 200 && xhr.status < 400)) {\r\n            console.log(\"相应信息。。。\");\r\n             var response = xhr.responseText;\r\n             console.log(\"response is \" + response);\r\n            var msg1=JSON.parse(response);\r\n            cc.find(\"PebmanentNode\").getComponent(\"GetServer\").GetServerMsg(msg1);\r\n        }\r\n    };\r\n    console.log(\"发送信息到服务器\")\r\n    xhr.open(\"POST\", url);\r\n    xhr.send(str1);\r\n   },\r\n   //登陆成功后访问微信获取用户信息\r\n   GetUserMsg:function(){\r\n    var url = \"https://api.weixin.qq.com/sns/userinfo?access_token=\"+this.accessToken+\"&openid=\"+this.openId;\r\n    // var str = \"shop=钻石\";\r\n    // var str=\"name=1&password=1\";\r\n    var  self=this;\r\n    self.isTokenTime=true;\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange = function () {\r\n        if (xhr.readyState == 4 && (xhr.status >= 200 && xhr.status < 400)) {\r\n              var response = xhr.responseText;\r\n              cc.log(response);\r\n              var msg2=JSON.parse(response);\r\n             cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser=msg2.nickname;\r\n             cc.log(msg2.headimgurl+\"\");\r\n            //  msg2.headimgurl=\"\";\r\n            //  if(msg2.headimgurl==\"\"||msg2.headimgurl==null||msg2.headimgurl==undefined)\r\n            //  {\r\n            //      cc.log(\"===================================\");\r\n                \r\n            //      cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").pictureUser=\"http://image.baidu.com/search/detail?ct=503316480&z=0&ipn=d&word=%E5%9B%BE%E7%89%87&hs=0&pn=7&spn=0&di=135898298690&pi=0&rn=1&tn=baiduimagedetail&is=0%2C0&ie=utf-8&oe=utf-8&cl=2&lm=-1&cs=2260926939%2C1550208231&os=2086677986%2C2932337668&simid=0%2C0&adpicid=0&lpn=0&ln=30&fr=ala&fm=&sme=&cg=&bdtype=0&oriquery=&objurl=http%3A%2F%2Fimg.zcool.cn%2Fcommunity%2F01690955496f930000019ae92f3a4e.jpg%402o.jpg&fromurl=ippr_z2C%24qAzdH3FAzdH3Fooo_z%26e3Bzv55s_z%26e3Bv54_z%26e3BvgAzdH3Fo56hAzdH3FZNTAaMzMy_z%26e3Bip4s%3FfotpviPw2j%3D5g&gsm=0&islist=&querylist=\";\r\n            //      self.SendUserInfo(JSON.stringify(msg2));\r\n            //  }\r\n            //  else\r\n            //  {\r\n            //     cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").pictureUser=msg2.headimgurl;\r\n            //     self.SendUserInfo(JSON.stringify(msg2));\r\n            //  }\r\n             cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").pictureUser=msg2.headimgurl;\r\n            //  //保存图片的texture2D到全局对象中\r\n            //  cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").userImage = cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").getUserPicture(msg2.headimgurl);\r\n             self.SendUserInfo(JSON.stringify(msg2));\r\n        }\r\n    };\r\n    //    xhr.send(\"name=100\"+\"&password=1\");\r\n    xhr.open(\"GET\", url, true);\r\n     xhr.send();\r\n   },\r\n   //访问并新刷新accesstoken\r\n   RefreshToken:function(){\r\n     this.isRefsh=true;\r\n     var url = \"https://api.weixin.qq.com/sns/oauth2/refresh_token?appid=wx72f9006d0b1d9b7f&grant_type=refresh_token&refresh_token=\"+this.refshToken;\r\n    // var str = \"shop=钻石\";\r\n    // var str=\"name=1&password=1\";\r\n    var  self=this;\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange = function () {      \r\n        if (xhr.readyState == 4 && (xhr.status >= 200 && xhr.status < 400)) {\r\n            var response = xhr.responseText;\r\n            self.SendServer(response);\r\n           var msg=JSON.parse(response);\r\n           self.accessToken=msg.access_token;\r\n           self.openId=msg.openid; \r\n           self.refshToken=msg.refresh_token;\r\n        }\r\n    };\r\n    //    xhr.send(\"name=100\"+\"&password=1\");\r\n    xhr.open(\"GET\", url, true);\r\n     xhr.send();\r\n   },\r\n   //将获取到的用户信息发给服务器\r\n   SendUserInfo:function(str){\r\n    var url = \"http://47.92.126.116/UserMsg\";\r\n    var str1=\"{\\\"tag\\\":\\\"UserMsg\\\",\"+\"\\\"type\\\":1,\"+\"\\\"body\\\":\"+str+\"}\";\r\n    var xhr = new XMLHttpRequest();\r\n    var self = this;\r\n    xhr.onreadystatechange = function () {\r\n        if (xhr.readyState == 4 && (xhr.status >= 200 && xhr.status < 400)) {\r\n             var response = xhr.responseText;  \r\n            var msg1=JSON.parse(response);\r\n            //接受服务器用户并判断是否为非法用户\r\n            cc.find(\"PebmanentNode\").getComponent(\"GetServer\").GetServerMsg(msg1);\r\n        }\r\n    };\r\n    xhr.open(\"POST\", url);\r\n    xhr.send(str1);\r\n   },\r\n    start () {\r\n    },\r\n    //屏幕适配\r\n    screenAdapt : function(){\r\n        var size = cc.view.getFrameSize();\r\n        var size1 = cc.director.getWinSize();\r\n\r\n        console.log(\"设计分辨率的宽是\",size1.width);\r\n        console.log(\"设计分辨率的高是\",size1.height);\r\n        console.log(\"手机屏幕的宽是\",size.width);\r\n        console.log(\"手机屏幕的高是\",size.height);\r\n    },\r\n    update (dt) {\r\n        if(this.isTokenTime)\r\n        { \r\n            this.fTokenTime +=dt; \r\n            if(this.fTokenTime>7000)\r\n            {\r\n                this.RefreshToken();\r\n                this.isTokenTime=false;\r\n                this.fTokenTime=0;\r\n            }\r\n        }\r\n        if(!this.wxLoginSuccess){\r\n            //判断用户微信是否登录\r\n            var loginState = jsb.reflection.callStaticMethod(\"org/cocos2dx/javascript/AppActivity\",\"GetWeChatState\",\"()I\")\r\n            console.log(\"微信登录状态是\",loginState + typeof(loginState));\r\n            console.log(\"loginState === 1\",loginState === 1);\r\n            if(loginState === 1){\r\n                var code = jsb.reflection.callStaticMethod(\"org/cocos2dx/javascript/AppActivity\",\"GetCode\",\"()Ljava/lang/String;\");\r\n                console.log(\"in update code is \",code);\r\n                this.GetAccessToken(code);\r\n                jsb.reflection.callStaticMethod(\"org/cocos2dx/javascript/AppActivity\",\"Init\",\"()V\");\r\n                this.wxLoginSuccess = true;\r\n            }\r\n        }\r\n        if(Global.wechatSuccess){\r\n            //显示等待节点\r\n            this.waitServer.active = true;\r\n        }\r\n      \r\n    },\r\n});\r\n","let Consts = {\r\n\tOpenDataKeys: {\r\n\t\tInitKey: \"initKey\",\r\n\t\tGrade: \"testkey\",\r\n\t\tLevelKey: \"reachlevel\",\r\n\t\tScoreKey: \"levelScore\", // json.string\r\n\t},\r\n\tDomainAction: {\r\n\t\tFetchFriend: \"FetchFriend\",\r\n\t\tFetchGroup: \"FetchGroup\",\r\n\t\tFetchFriendLevel: \"FetchFriendLevel\", //好友关卡进度排行\r\n\t\tFetchFriendScore: \"FetchFriendScore\", //好友关卡得分排行\r\n\t\tHorConmpar: \"HorConmpar\", //横向比较 horizontal comparison\r\n\t\tPaging: \"Paging\",\r\n        Scrolling: \"Scrolling\",\r\n        SaveScore:\"SaveScore\",\r\n\t},\r\n}\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class wxRankList extends cc.Component {\r\n\r\n    static instance:wxRankList=null;\r\n\r\n    @property(cc.Sprite)\r\n    rankRender:cc.Sprite=null; // render spr\r\n    @property(cc.Node)\r\n    rankListNode:cc.Node=null;\r\n    @property(cc.Node)\r\n    horRankNode:cc.Node=null;\r\n    @property(cc.Node)\r\n    tetrisRankBtn : cc.Node = null;\r\n    @property(cc.Node)\r\n    tetrisRankBtn_down : cc.Node = null;\r\n    @property(cc.Node)\r\n    figureRankBtn : cc.Node = null;\r\n    @property(cc.Node)\r\n    figureRankBtn_down : cc.Node = null;\r\n    @property(cc.Node)\r\n    stoneRankBtn : cc.Node = null;\r\n    @property(cc.Node)\r\n    stoneRankBtn_down : cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    rankBgNode:cc.Node=null;\r\n\r\n    @property(cc.Label)\r\n    labelTitle:cc.Label=null;\r\n    @property(cc.Node)\r\n    touchLayer:cc.Node=null;\r\n\r\n    @property(Boolean)\r\n    enableScroll = false;//是否可滑动排行榜列表\r\n\r\n    _timeCounter=0;\r\n    rendInterval=0.5;//刷新排行画布间隔s\r\n\r\n    rankTexture:cc.Texture2D=null;\r\n    rankSpriteFrame : cc.SpriteFrame=null;\r\n    closeBackRank=0; // 关闭后操作\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad() {\r\n        wxRankList.instance=this;\r\n        \r\n        this._timeCounter = 0\r\n        this.rankTexture = new cc.Texture2D();\r\n        this.rankSpriteFrame = new cc.SpriteFrame();\r\n        this.resizeSharedCanvas(this.rankRender.node.width, this.rankRender.node.height);\r\n        //当前用户\r\n        this.username = cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").nameUser;\r\n        //默认显示俄罗斯排行信息\r\n        this.tetrisRank();\r\n    }\r\n\r\n    // start() {\r\n    // }\r\n\r\n    update(dt) {\r\n        // this._timeCounter += dt\r\n        // if (this._timeCounter < this.rendInterval) return\r\n        // this._timeCounter = 0\r\n\r\n        this.updateRankList()\r\n    }\r\n\r\n    resizeSharedCanvas(width, height){\r\n        if(!window[\"wx\"]) return;\r\n        let sharedCanvas = window[\"wx\"].getOpenDataContext().canvas\r\n        sharedCanvas.width = width\r\n        sharedCanvas.height = height\r\n    }\r\n\r\n    changeRender(renderNode:cc.Node){\r\n        if(renderNode.name === \"sprHorRank\"){\r\n            this.horRankNode.active = true;\r\n            this.rankListNode.active = false;\r\n            this.rankBgNode.active = false;\r\n        }else if(renderNode.name === \"sprRankList\"){\r\n            this.horRankNode.active = false;\r\n            this.rankListNode.active = true;\r\n            this.rankBgNode.active = true;\r\n        }\r\n        this.rankRender.node.width = renderNode.width\r\n        this.rankRender.node.height = renderNode.height\r\n        this.rankRender.node.position = renderNode.position\r\n        this.resizeSharedCanvas(renderNode.width, renderNode.height)\r\n    }\r\n\r\n    updateRankList() {\r\n        if(!window[\"wx\"]) return;\r\n        if(!this.rankTexture) return;\r\n        let sharedCanvas = window[\"wx\"].getOpenDataContext().canvas\r\n        this.rankTexture.initWithElement(sharedCanvas);\r\n        this.rankTexture.handleLoadedTexture();\r\n        this.rankSpriteFrame.setTexture(this.rankTexture);\r\n        this.rankRender.spriteFrame = this.rankSpriteFrame;\r\n    }\r\n    onEnable() {\r\n        this.touchLayer.active = true\r\n        if (this.enableScroll) {\r\n            this.rankRender.node.on(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove, this)\r\n        }\r\n\r\n        // this.postMessage(Consts.DomainAction.FetchFriendLevel)\r\n    }\r\n\r\n    onDisable() {\r\n        if (this.enableScroll) {\r\n            this.rankRender.node.off(cc.Node.EventType.TOUCH_MOVE)\r\n        }\r\n    }\r\n\r\n    onViewDetailRank(){\r\n        this.closeBackRank = 1;\r\n        //加载分数排行\r\n        this.loadLevelScoreRank();\r\n    }\r\n\r\n    onPageUp() {\r\n        cc.log(this)\r\n        this.postMessage(\"Paging\", -1)\r\n    }\r\n\r\n    onPageDown() {\r\n        this.postMessage(\"Paging\", 1)\r\n    }\r\n\r\n    onClose() {\r\n        // if(this.closeBackRank===1){\r\n        //     this.closeBackRank = 0;\r\n        //     this.loadHorRank(utils.curLevel)\r\n        //     return\r\n        // }\r\n        //显示游戏圈按钮\r\n        cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").gameClubButton.show();\r\n        Global.advertisement.show();\r\n        this.node.active = false;\r\n        cc.find(\"PebmanentNode/dark\").active = false;\r\n        cc.find(\"Canvas/OneGame\").getComponent(cc.Button).interactable = true;\r\n        cc.find(\"Canvas/PersobsGame\").getComponent(cc.Button).interactable = true;\r\n        cc.find(\"Canvas/Help\").getComponent(cc.Button).interactable = true;\r\n        cc.find(\"Canvas/Back\").getComponent(cc.Button).interactable = true;\r\n        cc.find(\"Canvas\").getComponent(\"TurnScene\").canClick = true;\r\n        cc.find(\"Canvas/menuBottom/RankList\").getComponent(cc.Button).interactable = true;\r\n        cc.find(\"Canvas/menuBottom/Friend\").getComponent(cc.Button).interactable = true;\r\n    }\r\n\r\n    onTouchMove(event) {\r\n        const deltaY = event.getDeltaY();\r\n        // console.log(\"rank touchmove:\", deltaY);\r\n        this.postMessage(\"Scrolling\", deltaY)\r\n    }\r\n\r\n    //获取关卡得分排行\r\n    /**\r\n     * @param  {游戏类型} level\r\n     * @param  {该游戏类型的最高分} score\r\n     */\r\n    loadLevelScoreRank(level,score){\r\n        console.log(\"level is \",level);\r\n        console.log(\"score is \",score);\r\n        // this.labelTitle.string = \"俄罗斯方块排行\"\r\n        this.node.active = true;\r\n        this.touchLayer.active = true;\r\n        this.changeRender(this.rankListNode)        \r\n        this.postMessage(Consts.DomainAction.FetchFriendScore,level,score);\r\n    }\r\n\r\n    //获取关卡进度排行\r\n    loadLevelOpenRank(){\r\n        this.labelTitle.string = \"关卡排行\"\r\n        this.node.active = true;\r\n        this.touchLayer.active = true\r\n        this.changeRender(this.rankListNode)        \r\n        this.postMessage(Consts.DomainAction.FetchFriendLevel)\r\n    }\r\n\r\n    //横向比较\r\n    // loadHorRank(level=1){\r\n    //     this.node.active = true;\r\n    //     this.touchLayer.active = false        \r\n    //     this.changeRender(this.horRankNode)\r\n    //     this.postMessage(Consts.DomainAction.HorConmpar, level, utils.getScore(level))\r\n    // }\r\n    \r\n\r\n    //向子域发送消息\r\n    postMessage(action, type=null, score=null) {\r\n        if(!window[\"wx\"]) return;\r\n        let openDataContext = window[\"wx\"].getOpenDataContext();\r\n        openDataContext.postMessage({\r\n            action: action,\r\n            data  : type,\r\n            score : score,\r\n        })\r\n    }\r\n\r\n    // //检查得分\r\n    // checkScore(key, callback){\r\n    //     if (!window.wx) return\r\n    //     wx.getUserCloudStorage({\r\n    //         keyList:[key],\r\n    //         success:res=>{\r\n    //             res.data.\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    //wx api\r\n    // 上传关卡分数\r\n    uploadScore(level, score) {\r\n        if(!window[\"wx\"]) return;\r\n        score = score.toString()\r\n        window[\"wx\"].setUserCloudStorage({\r\n            KVDataList: [\r\n                { key: Consts.OpenDataKeys.ScoreKey+level, value: score },\r\n            ],\r\n            success: (res) => {\r\n                console.log(\"uploadScore success:res=>\", res)\r\n            },\r\n            fail: (res) => {\r\n                console.log(\"uploadScore fail:res=>\", res)\r\n            }\r\n        })\r\n    }\r\n\r\n    // 上传关卡开启进度\r\n    uploadLevelOpen(level){\r\n        if (!window.window[\"wx\"]) return\r\n        level = level.toString()\r\n        window[\"wx\"].setUserCloudStorage({\r\n            KVDataList: [\r\n                { key: Consts.OpenDataKeys.LevelKey, value: level },\r\n            ],\r\n            success: (res) => {\r\n                console.log(\"uploadScore success:res=>\", res)\r\n            },\r\n            fail: (res) => {\r\n                console.log(\"uploadScore fail:res=>\", res)\r\n            }\r\n        })\r\n    }\r\n\r\n    //删除微信数据\r\n    removeUserKey(key_or_keys) {\r\n        if (!window.window[\"wx\"]) return\r\n        if(typeof(key_or_keys)===\"string\"){\r\n            key_or_keys = [key_or_keys]\r\n        }\r\n        window[\"wx\"].removeUserCloudStorage({\r\n            keyList: key_or_keys,\r\n            success: (res) => {\r\n                console.log(\"uploadScore success:res=>\", res)\r\n            },\r\n            fail: (res) => {\r\n                console.log(\"uploadScore fail:res=>\", res)\r\n            }\r\n        })\r\n    }\r\n\r\n    // 分享\r\n    /* args:{\r\n                title: string\r\n                imageUrl: string\r\n                query: string\r\n                success: func\r\n                fail: func\r\n            }\r\n    */\r\n    share(args) {\r\n        if (!window.window[\"wx\"]) return\r\n        if(!args) args={}\r\n        args.imageUrl = args.imageUrl || \"http://img.zcool.cn/community/01c2ac57beb18d0000012e7eaa6d19.jpg@1280w_1l_2o_100sh.jpg\"\r\n        window[\"wx\"].shareAppMessage({\r\n            title: \"今天的方块，你来了吗？\",\r\n            // imageUrl: \"res/raw-assets/res/shengming.25929.png\",\r\n            imageUrl: args.imageUrl,\r\n            query: \"key=testshare\",\r\n            success: (res) => {\r\n                console.log(\"success:\", res)\r\n                if(args.success){\r\n                    args.success(res)\r\n                }\r\n            },\r\n            fail: res => {\r\n                console.log(\"fail:\", res)\r\n                if(args.fail){\r\n                    args.fail(res)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    initRank() {\r\n    }\r\n\r\n    snapshotSync(){\r\n        if(!window['wx']) return\r\n        var canvas = cc.game.canvas;\r\n        var width  = cc.winSize.width;\r\n        var height  = cc.winSize.height;\r\n\r\n        return canvas['toTempFilePathSync']({\r\n            x: 0,\r\n            y: 0,\r\n            width: width*1.5,\r\n            height: height,\r\n            destWidth: width*1.5,\r\n            destHeight: height\r\n        })\r\n    }\r\n    tetrisRank (){\r\n        //其他两个按钮颜色变化\r\n        this.tetrisRankBtn.active = false;\r\n        this.tetrisRankBtn_down.active = true;\r\n        this.figureRankBtn.active = true;\r\n        this.figureRankBtn_down.active= false;\r\n        this.stoneRankBtn.active = true;\r\n        this.stoneRankBtn_down.active = false;\r\n        //俄罗斯方块的最高分是\r\n        let tetrisScore = cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").tetrisTopScore;\r\n        //俄罗斯方块排行,将最高分加载进来\r\n        this.loadLevelScoreRank(\"tetrisRankScore\",tetrisScore);\r\n        //抓取好友数据\r\n        console.log(\"获取俄罗斯方块的排名\");\r\n    }\r\n    figureRank(){\r\n        this.figureRankBtn.active = false;\r\n        this.figureRankBtn_down.active = true;\r\n        this.tetrisRankBtn.active = true;\r\n        this.tetrisRankBtn_down.active = false;\r\n        this.stoneRankBtn.active = true;\r\n        this.stoneRankBtn_down.active = false;\r\n        //画像方块的排行\r\n        let figureScore = cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").figureTopScore;\r\n        console.log(\"figureScore is \",figureScore);\r\n        this.loadLevelScoreRank(\"figureRankScore\",figureScore);\r\n        //将自己的最高分交给微信服务器托管\r\n        console.log(\"获取画像方块的排名\");\r\n    }\r\n    stoneRank(){\r\n        this.stoneRankBtn.active = false;\r\n        this.stoneRankBtn_down.active = true;\r\n        this.figureRankBtn.active = true;\r\n        this.figureRankBtn_down.active = false;\r\n        this.tetrisRankBtn.active = true;\r\n        this.tetrisRankBtn_down.active = false;\r\n        //宝石方块的排行\r\n        let stoneScore = cc.find(\"PebmanentNode\").getComponent(\"UserInfo\").stoneTopScore;\r\n        this.loadLevelScoreRank(\"stoneRankScore\",stoneScore);\r\n        console.log(\"获取宝石方块的排名\");\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"/source/","file":"project.js"}